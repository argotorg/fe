name: CI

on:
  push:
    branches: [master]
    tags:
      - v*

  pull_request:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-D warnings"

jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Install system dependencies
        run: |
          sudo apt-get install -y libboost-all-dev
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v1
      - name: install cargo-tarpaulin
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall cargo-tarpaulin
      - name: coverage with tarpaulin
        run: |
          make coverage
          bash <(curl -s https://codecov.io/bash)

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install system dependencies
        run: |
          sudo apt-get install -y libboost-all-dev
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v1
      - name: Validate release notes entry
        run: ./newsfragments/validate_files.py
      - name: Lint with rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Lint with clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --all-targets --all-features -- -D warnings -A clippy::upper-case-acronyms -A clippy::large-enum-variant
            
  book:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v1
      - name: install mdbook & mdbook-linkcheck
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall mdbook
          cargo quickinstall mdbook-linkcheck
      - name: Validate links in book
        run: |
          mdbook build docs/
      - name: Validate doc examples
        run: ./docs/validate_doc_examples.py

  test:
    # Build & Test runs on all platforms
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Boost on Mac
        if: startsWith(matrix.os,'macOS')
        run: |
          brew install boost
      - name: Install Boost on Linux
        if: startsWith(matrix.os,'ubuntu')
        run: |
          sudo apt-get install -y libboost-all-dev
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo test --workspace --all-features --no-run --locked
      - name: Run tests
        run: cargo test --workspace --all-features --verbose
    
  test-windows-latest:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Boost on Windows.
        uses: MarkusJx/install-boost@v2.1.0
        id: install-boost
        with:
          boost_version: 1.78.0
          platform_version: 2019
          toolset: msvc
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo test --workspace --all-features --no-run --locked
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
          Boost_NO_BOOST_CMAKE: ON
      - name: Run tests
        run: cargo test --workspace --all-features --verbose
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
          Boost_NO_BOOST_CMAKE: ON
          

  wasm-test:
      runs-on: ubuntu-latest
      container: davesque/rust-wasm
      steps:
      - uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v1
      - name: Build WASM tests
        run: wasm-pack test --node crates/fe -- --workspace --no-run
      - name: Run WASM tests
        # wasm-pack needs a Cargo.toml with a 'package' field.
        # (see https://github.com/rustwasm/wasm-pack/issues/642)
        # This will still run all tests in the workspace.
        run: wasm-pack test --node crates/fe -- --workspace

  release:
    # Only run this when we push a tag
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    # needs: [lint, test, wasm-test]
    needs: [lint, test]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            BIN_FILE: fe_amd64
          - os: macOS-latest
            BIN_FILE: fe_mac

    steps:
      - uses: actions/checkout@v2
      - name: Install Linux dependencies
        if: startsWith(matrix.os,'ubuntu')
        run: |
          sudo apt-get install -y libboost-all-dev
      - name: Install Mac System dependencies
        if: startsWith(matrix.os,'macOS')
        run: |
          brew install boost
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Build
        run: cargo build --all-features --release && strip target/release/fe && mv target/release/fe target/release/${{ matrix.BIN_FILE }}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: target/release/${{ matrix.BIN_FILE }}
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

diff --git a/crates/common/src/urlext.rs b/crates/common/src/urlext.rs
index c4a7e0d2..ab3ff87c 100644
--- a/crates/common/src/urlext.rs
+++ b/crates/common/src/urlext.rs
@@ -4,14 +4,11 @@ use url::Url;
 pub enum UrlExtError {
     DirectoryRangeError,
     AsDirectoryError,
-    PathConversionError,
 }
 
 pub trait UrlExt {
     fn parent(&self) -> Option<Url>;
     fn directory(&self) -> Option<Url>;
-    fn from_file_path<P: AsRef<std::path::Path>>(path: P) -> Result<Url, UrlExtError>;
-    fn from_directory_path<P: AsRef<std::path::Path>>(path: P) -> Result<Url, UrlExtError>;
 }
 
 impl UrlExt for Url {
@@ -52,46 +49,6 @@ impl UrlExt for Url {
             return Some(parent);
         }
     }
-
-    #[cfg(target_arch = "wasm32")]
-    fn from_file_path<P: AsRef<std::path::Path>>(path: P) -> Result<Url, UrlExtError> {
-        let path_str = path.as_ref().to_string_lossy();
-        let url_str = if path_str.starts_with('/') {
-            format!("file://{}", path_str)
-        } else {
-            format!("file:///{}", path_str)
-        };
-        Url::parse(&url_str).map_err(|_| UrlExtError::PathConversionError)
-    }
-
-    #[cfg(not(target_arch = "wasm32"))]
-    fn from_file_path<P: AsRef<std::path::Path>>(path: P) -> Result<Url, UrlExtError> {
-        Url::from_file_path(path).map_err(|_| UrlExtError::PathConversionError)
-    }
-
-    #[cfg(target_arch = "wasm32")]
-    fn from_directory_path<P: AsRef<std::path::Path>>(path: P) -> Result<Url, UrlExtError> {
-        let path_str = path.as_ref().to_string_lossy();
-        let url_str = if path_str.starts_with('/') {
-            if path_str.ends_with('/') {
-                format!("file://{}", path_str)
-            } else {
-                format!("file://{}/", path_str)
-            }
-        } else {
-            if path_str.ends_with('/') {
-                format!("file:///{}", path_str)
-            } else {
-                format!("file:///{}/", path_str)
-            }
-        };
-        Url::parse(&url_str).map_err(|_| UrlExtError::PathConversionError)
-    }
-
-    #[cfg(not(target_arch = "wasm32"))]
-    fn from_directory_path<P: AsRef<std::path::Path>>(path: P) -> Result<Url, UrlExtError> {
-        Url::from_directory_path(path).map_err(|_| UrlExtError::PathConversionError)
-    }
 }
 
 #[cfg(test)]
diff --git a/crates/driver/src/lib.rs b/crates/driver/src/lib.rs
index d167fb37..f6abce18 100644
--- a/crates/driver/src/lib.rs
+++ b/crates/driver/src/lib.rs
@@ -8,9 +8,6 @@ use common::ingot::IngotBaseUrl;
 use common::InputDb;
 pub use db::DriverDataBase;
 
-#[cfg(target_arch = "wasm32")]
-use test_utils::url_utils::UrlExt;
-
 use clap::{Parser, Subcommand};
 use hir::hir_def::TopLevelMod;
 use resolver::{
@@ -23,7 +20,7 @@ pub fn run(opts: &Options) {
     match &opts.command {
         Command::Build => eprintln!("`fe build` doesn't work at the moment"),
         Command::Check { path, core } => {
-            let base_url = Url::from_directory_path(path.canonicalize_utf8().unwrap())
+            let base_url = url_from_directory_path(path.canonicalize_utf8().unwrap())
                 .expect("failed to parse base URL");
             let mut db = DriverDataBase::default();
             let mut ingot_resolver = IngotResolver::default();
@@ -56,7 +53,7 @@ pub fn run(opts: &Options) {
                         for (path, content) in files {
                             index.touch(
                                 &mut db,
-                                Url::from_file_path(
+                                url_from_file_path(
                                     path.canonicalize().expect("Failed to canonicalize path"),
                                 )
                                 .expect("Failed to create URL"),
@@ -108,7 +105,7 @@ pub fn run(opts: &Options) {
                     for (path, content) in files {
                         index.touch(
                             &mut db,
-                            Url::from_file_path(
+                            url_from_file_path(
                                 path.canonicalize().expect("Failed to canonicalize path"),
                             )
                             .expect("Failed to create URL"),
@@ -118,7 +115,7 @@ pub fn run(opts: &Options) {
                     base_url
                 }
                 Ok(Ingot::SingleFile { path, content }) => {
-                    let url = Url::from_file_path(path.canonicalize_utf8().unwrap()).unwrap();
+                    let url = url_from_file_path(path.canonicalize_utf8().unwrap()).unwrap();
                     db.workspace().touch(&mut db, url.clone(), Some(content));
                     db.workspace()
                         .containing_ingot(&db, &url)
@@ -178,3 +175,49 @@ fn _dump_scope_graph(db: &DriverDataBase, top_mod: TopLevelMod) -> String {
     top_mod.scope_graph(db).write_as_dot(db, &mut s).unwrap();
     String::from_utf8(s).unwrap()
 }
+
+// Maybe the driver should eventually only support WASI?
+
+fn url_from_file_path<P: AsRef<std::path::Path>>(path: P) -> Result<Url, ()> {
+    #[cfg(not(target_arch = "wasm32"))]
+    {
+        Url::from_file_path(path)
+    }
+
+    #[cfg(target_arch = "wasm32")]
+    {
+        let path_str = path.as_ref().to_string_lossy();
+        let url_str = if path_str.starts_with('/') {
+            format!("file://{}", path_str)
+        } else {
+            format!("file:///{}", path_str)
+        };
+        Url::parse(&url_str).map_err(|_| ())
+    }
+}
+
+fn url_from_directory_path<P: AsRef<std::path::Path>>(path: P) -> Result<Url, ()> {
+    #[cfg(not(target_arch = "wasm32"))]
+    {
+        Url::from_directory_path(path)
+    }
+
+    #[cfg(target_arch = "wasm32")]
+    {
+        let path_str = path.as_ref().to_string_lossy();
+        let url_str = if path_str.starts_with('/') {
+            if path_str.ends_with('/') {
+                format!("file://{}", path_str)
+            } else {
+                format!("file://{}/", path_str)
+            }
+        } else {
+            if path_str.ends_with('/') {
+                format!("file:///{}", path_str)
+            } else {
+                format!("file:///{}/", path_str)
+            }
+        };
+        Url::parse(&url_str).map_err(|_| ())
+    }
+}
diff --git a/crates/hir-analysis/tests/corelib.rs b/crates/hir-analysis/tests/corelib.rs
index 51fc44be..2acaeafb 100644
--- a/crates/hir-analysis/tests/corelib.rs
+++ b/crates/hir-analysis/tests/corelib.rs
@@ -1,8 +1,7 @@
 mod test_db;
 
-use std::path::Path;
-
-use common::{core::HasBuiltinCore, urlext::UrlExt};
+use camino::Utf8Path;
+use common::core::HasBuiltinCore;
 
 use common::InputDb;
 use dir_test::{dir_test, Fixture};
@@ -10,6 +9,9 @@ use driver::DriverDataBase;
 
 use url::Url;
 
+#[cfg(target_arch = "wasm32")]
+use test_utils::url_utils::UrlExt;
+
 #[test]
 fn analyze_corelib() {
     let db = DriverDataBase::default();
@@ -31,8 +33,8 @@ fn analyze_corelib() {
 )]
 fn corelib_standalone(fixture: Fixture<&str>) {
     let mut db = DriverDataBase::default();
-    let path = Path::new(fixture.path()).canonicalize().unwrap();
-    let url = <Url as UrlExt>::from_file_path(path).unwrap();
+    let path = Utf8Path::new(fixture.path()).canonicalize().unwrap();
+    let url = Url::from_file_path(path).unwrap();
     db.workspace()
         .touch(&mut db, url.clone(), Some(fixture.content().to_string()));
 
diff --git a/crates/hir-analysis/tests/test_db.rs b/crates/hir-analysis/tests/test_db.rs
index ad5d28ee..a2ef4106 100644
--- a/crates/hir-analysis/tests/test_db.rs
+++ b/crates/hir-analysis/tests/test_db.rs
@@ -11,7 +11,7 @@ use codespan_reporting::{
 };
 use common::{
     core::HasBuiltinCore, define_input_db, diagnostics::Span, file::File, indexmap::IndexMap,
-    urlext::UrlExt, InputDb,
+    InputDb,
 };
 use driver::diagnostics::{CsDbWrapper, ToCsDiag};
 use fe_hir_analysis::{
@@ -29,6 +29,7 @@ use hir::{
     SpannedHirDb,
 };
 use rustc_hash::FxHashMap;
+use test_utils::url_utils::UrlExt;
 use url::Url;
 
 type CodeSpanFileId = usize;
@@ -49,8 +50,7 @@ impl HirAnalysisTestDb {
         self.initialize_builtin_core();
         index.touch(
             self,
-            <Url as UrlExt>::from_file_path(&file_name)
-                .expect("Failed to create URL from file path"),
+            <Url as UrlExt>::from_file_path_lossy(&file_name),
             Some(text.to_string()),
         )
     }
diff --git a/crates/test-utils/src/url_utils.rs b/crates/test-utils/src/url_utils.rs
index 15ada6da..0bd8f172 100644
--- a/crates/test-utils/src/url_utils.rs
+++ b/crates/test-utils/src/url_utils.rs
@@ -1,41 +1,62 @@
-#[cfg(target_arch = "wasm32")]
-use std::path::Path;
-#[cfg(target_arch = "wasm32")]
+use std::path::{Path, PathBuf};
 use url::Url;
 
-#[cfg(target_arch = "wasm32")]
+/// Extension trait for URL to provide cross-platform compatibility
+#[allow(clippy::result_unit_err)]
 pub trait UrlExt {
+    /// Create a URL from a file path.
+    ///
+    /// This is the native `Url::from_file_path` function on native platforms,
+    /// but implemented manually for WASM targets where the original is unavailable.
     fn from_file_path<P: AsRef<Path>>(path: P) -> Result<Url, ()>;
-    fn from_directory_path<P: AsRef<Path>>(path: P) -> Result<Url, ()>;
+
+    /// Creates a URL from a file path with full error handling
+    fn from_file_path_lossy<P: AsRef<Path>>(path: P) -> Url;
+
+    /// Converts a URL to a file path
+    fn to_file_path(&self) -> Result<PathBuf, ()>;
 }
 
-#[cfg(target_arch = "wasm32")]
 impl UrlExt for Url {
     fn from_file_path<P: AsRef<Path>>(path: P) -> Result<Url, ()> {
-        let path_str = path.as_ref().to_string_lossy();
-        let url_str = if path_str.starts_with('/') {
-            format!("file://{}", path_str)
-        } else {
-            format!("file:///{}", path_str)
-        };
-        Url::parse(&url_str).map_err(|_| ())
-    }
+        #[cfg(not(target_arch = "wasm32"))]
+        {
+            Url::from_file_path(path)
+        }
 
-    fn from_directory_path<P: AsRef<Path>>(path: P) -> Result<Url, ()> {
-        let path_str = path.as_ref().to_string_lossy();
-        let url_str = if path_str.starts_with('/') {
-            if path_str.ends_with('/') {
+        #[cfg(target_arch = "wasm32")]
+        {
+            let path = path.as_ref();
+            // For WASM, we need to manually construct the URL
+            let path_str = path.to_string_lossy();
+            let url_str = if path_str.starts_with('/') {
                 format!("file://{}", path_str)
             } else {
-                format!("file://{}/", path_str)
-            }
-        } else {
-            if path_str.ends_with('/') {
                 format!("file:///{}", path_str)
-            } else {
-                format!("file:///{}/", path_str)
+            };
+            Url::parse(&url_str).map_err(|_| ())
+        }
+    }
+
+    fn from_file_path_lossy<P: AsRef<Path>>(path: P) -> Url {
+        Self::from_file_path(path).expect("Failed to create URL from file path")
+    }
+
+    fn to_file_path(&self) -> Result<PathBuf, ()> {
+        #[cfg(not(target_arch = "wasm32"))]
+        {
+            url::Url::to_file_path(self)
+        }
+
+        #[cfg(target_arch = "wasm32")]
+        {
+            // Basic implementation for WASM - extract path from URL
+            if self.scheme() != "file" {
+                return Err(());
             }
-        };
-        Url::parse(&url_str).map_err(|_| ())
+
+            let path = self.path();
+            Ok(PathBuf::from(path))
+        }
     }
 }
diff --git a/crates/uitest/tests/parser.rs b/crates/uitest/tests/parser.rs
index 63451d8b..1f10e298 100644
--- a/crates/uitest/tests/parser.rs
+++ b/crates/uitest/tests/parser.rs
@@ -51,7 +51,7 @@ mod wasm {
         let mut db = DriverDataBase::default();
         let file = db.workspace().touch(
             &mut db,
-            <Url as UrlExt>::from_file_path(fixture.path()).unwrap(),
+            <Url as UrlExt>::from_file_path_lossy(fixture.path()),
             Some(fixture.content().to_string()),
         );
 
diff --git a/crates/uitest/tests/ty.rs b/crates/uitest/tests/ty.rs
index a78a4430..59b06c59 100644
--- a/crates/uitest/tests/ty.rs
+++ b/crates/uitest/tests/ty.rs
@@ -106,7 +106,7 @@ mod wasm {
             let mut db = DriverDataBase::default();
             let file = db.workspace().touch(
                 &mut db,
-                <Url as UrlExt>::from_file_path(fixture.path()).unwrap(),
+                <Url as UrlExt>::from_file_path_lossy(fixture.path()),
                 Some(fixture.content().to_string()),
             );
 
@@ -131,7 +131,7 @@ mod wasm {
             let mut db = DriverDataBase::default();
             let file = db.workspace().touch(
                 &mut db,
-                <Url as UrlExt>::from_file_path(fixture.path()).unwrap(),
+                <Url as UrlExt>::from_file_path_lossy(fixture.path()),
                 Some(fixture.content().to_string()),
             );
 
@@ -156,7 +156,7 @@ mod wasm {
             let mut db = DriverDataBase::default();
             let file = db.workspace().touch(
                 &mut db,
-                <Url as UrlExt>::from_file_path(fixture.path()).unwrap(),
+                <Url as UrlExt>::from_file_path_lossy(fixture.path()),
                 Some(fixture.content().to_string()),
             );
 
@@ -183,7 +183,7 @@ mod wasm {
             let mut db = DriverDataBase::default();
             let file = db.workspace().touch(
                 &mut db,
-                <Url as UrlExt>::from_file_path(fixture.path()).unwrap(),
+                <Url as UrlExt>::from_file_path_lossy(fixture.path()),
                 Some(fixture.content().to_string()),
             );
 
diff --git a/crates/uitest/tests/ty_check.rs b/crates/uitest/tests/ty_check.rs
index 6a16bdee..17108a94 100644
--- a/crates/uitest/tests/ty_check.rs
+++ b/crates/uitest/tests/ty_check.rs
@@ -46,7 +46,7 @@ mod wasm {
         let mut db = DriverDataBase::default();
         let file = db.workspace().touch(
             &mut db,
-            <Url as UrlExt>::from_file_path(fixture.path()).unwrap(),
+            <Url as UrlExt>::from_file_path_lossy(fixture.path()),
             Some(fixture.content().to_string()),
         );
 

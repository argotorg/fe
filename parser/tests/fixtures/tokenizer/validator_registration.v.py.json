MIN_DEPOSIT_AMOUNT: constant(u256) = 1000000000  # Gwei
DEPOSIT_CONTRACT_TREE_DEPTH: constant(u256) = 32
MAX_DEPOSIT_COUNT: constant(u256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1
PUBKEY_LENGTH: constant(u256) = 48  # bytes
WITHDRAWAL_CREDENTIALS_LENGTH: constant(u256) = 32  # bytes
AMOUNT_LENGTH: constant(u256) = 8  # bytes
SIGNATURE_LENGTH: constant(u256) = 96  # bytes

DepositEvent: event({
    pubkey: bytes[48],
    withdrawal_credentials: bytes[32],
    amount: bytes[8],
    signature: bytes[96],
    index: bytes[8],
})

branch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]
deposit_count: u256

# Compute hashes in empty sparse Merkle tree
zero_hashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]
@public
def __init__():
    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):
        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))


@private
@constant
def to_little_endian_64(value: u256) -> bytes[8]:
    # Reversing bytes using bitwise u256 manipulations
    # Note: array accesses of bytes[] are not currently supported in Vyper
    # Note: this function is only called when `value < 2**64`
    y: u256 = 0
    x: u256 = value
    for _ in range(8):
        y = shift(y, 8)
        y = y + bitwise_and(x, 255)
        x = shift(x, -8)
    return slice(convert(y, bytes32), start=24, len=8)


@public
@constant
def get_hash_tree_root() -> bytes32:
    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000
    node: bytes32 = zero_bytes32
    size: u256 = self.deposit_count
    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):
        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`
            node = sha256(concat(self.branch[height], node))
        else:
            node = sha256(concat(node, self.zero_hashes[height]))
        size /= 2
    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))


@public
@constant
def get_deposit_count() -> bytes[8]:
    return self.to_little_endian_64(self.deposit_count)


@payable
@public
def deposit(pubkey: bytes[PUBKEY_LENGTH],
            withdrawal_credentials: bytes[WITHDRAWAL_CREDENTIALS_LENGTH],
            signature: bytes[SIGNATURE_LENGTH]):
    # Avoid overflowing the Merkle tree (and prevent edge case in computing `self.branch`)
    assert self.deposit_count < MAX_DEPOSIT_COUNT

    # Validate deposit data
    deposit_amount: u256 = msg.value / as_wei_value(1, "gwei")
    assert deposit_amount >= MIN_DEPOSIT_AMOUNT
    assert len(pubkey) == PUBKEY_LENGTH
    assert len(withdrawal_credentials) == WITHDRAWAL_CREDENTIALS_LENGTH
    assert len(signature) == SIGNATURE_LENGTH

    # Emit `DepositEvent` log
    amount: bytes[8] = self.to_little_endian_64(deposit_amount)
    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))

    # Compute `DepositData` hash tree root
    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000
    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))
    signature_root: bytes32 = sha256(concat(
        sha256(slice(signature, start=0, len=64)),
        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),
    ))
    node: bytes32 = sha256(concat(
        sha256(concat(pubkey_root, withdrawal_credentials)),
        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),
    ))

    # Add `DepositData` hash tree root to Merkle tree (update a single `branch` node)
    self.deposit_count += 1
    size: u256 = self.deposit_count
    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):
        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`
            self.branch[height] = node
            break
        node = sha256(concat(self.branch[height], node))
        size /= 2
---
[
  {
    "typ": "NAME",
    "string": "MIN_DEPOSIT_AMOUNT",
    "start": [
      1,
      0
    ],
    "end": [
      1,
      18
    ],
    "line": "MIN_DEPOSIT_AMOUNT: constant(u256) = 1000000000  # Gwei\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      1,
      18
    ],
    "end": [
      1,
      19
    ],
    "line": "MIN_DEPOSIT_AMOUNT: constant(u256) = 1000000000  # Gwei\n"
  },
  {
    "typ": "NAME",
    "string": "constant",
    "start": [
      1,
      20
    ],
    "end": [
      1,
      28
    ],
    "line": "MIN_DEPOSIT_AMOUNT: constant(u256) = 1000000000  # Gwei\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      1,
      28
    ],
    "end": [
      1,
      29
    ],
    "line": "MIN_DEPOSIT_AMOUNT: constant(u256) = 1000000000  # Gwei\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      1,
      29
    ],
    "end": [
      1,
      33
    ],
    "line": "MIN_DEPOSIT_AMOUNT: constant(u256) = 1000000000  # Gwei\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      1,
      33
    ],
    "end": [
      1,
      34
    ],
    "line": "MIN_DEPOSIT_AMOUNT: constant(u256) = 1000000000  # Gwei\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      1,
      35
    ],
    "end": [
      1,
      36
    ],
    "line": "MIN_DEPOSIT_AMOUNT: constant(u256) = 1000000000  # Gwei\n"
  },
  {
    "typ": "NUMBER",
    "string": "1000000000",
    "start": [
      1,
      37
    ],
    "end": [
      1,
      47
    ],
    "line": "MIN_DEPOSIT_AMOUNT: constant(u256) = 1000000000  # Gwei\n"
  },
  {
    "typ": "COMMENT",
    "string": "# Gwei",
    "start": [
      1,
      49
    ],
    "end": [
      1,
      55
    ],
    "line": "MIN_DEPOSIT_AMOUNT: constant(u256) = 1000000000  # Gwei\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      1,
      55
    ],
    "end": [
      2,
      0
    ],
    "line": "MIN_DEPOSIT_AMOUNT: constant(u256) = 1000000000  # Gwei\n"
  },
  {
    "typ": "NAME",
    "string": "DEPOSIT_CONTRACT_TREE_DEPTH",
    "start": [
      2,
      0
    ],
    "end": [
      2,
      27
    ],
    "line": "DEPOSIT_CONTRACT_TREE_DEPTH: constant(u256) = 32\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      2,
      27
    ],
    "end": [
      2,
      28
    ],
    "line": "DEPOSIT_CONTRACT_TREE_DEPTH: constant(u256) = 32\n"
  },
  {
    "typ": "NAME",
    "string": "constant",
    "start": [
      2,
      29
    ],
    "end": [
      2,
      37
    ],
    "line": "DEPOSIT_CONTRACT_TREE_DEPTH: constant(u256) = 32\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      2,
      37
    ],
    "end": [
      2,
      38
    ],
    "line": "DEPOSIT_CONTRACT_TREE_DEPTH: constant(u256) = 32\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      2,
      38
    ],
    "end": [
      2,
      42
    ],
    "line": "DEPOSIT_CONTRACT_TREE_DEPTH: constant(u256) = 32\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      2,
      42
    ],
    "end": [
      2,
      43
    ],
    "line": "DEPOSIT_CONTRACT_TREE_DEPTH: constant(u256) = 32\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      2,
      44
    ],
    "end": [
      2,
      45
    ],
    "line": "DEPOSIT_CONTRACT_TREE_DEPTH: constant(u256) = 32\n"
  },
  {
    "typ": "NUMBER",
    "string": "32",
    "start": [
      2,
      46
    ],
    "end": [
      2,
      48
    ],
    "line": "DEPOSIT_CONTRACT_TREE_DEPTH: constant(u256) = 32\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      2,
      48
    ],
    "end": [
      3,
      0
    ],
    "line": "DEPOSIT_CONTRACT_TREE_DEPTH: constant(u256) = 32\n"
  },
  {
    "typ": "NAME",
    "string": "MAX_DEPOSIT_COUNT",
    "start": [
      3,
      0
    ],
    "end": [
      3,
      17
    ],
    "line": "MAX_DEPOSIT_COUNT: constant(u256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      3,
      17
    ],
    "end": [
      3,
      18
    ],
    "line": "MAX_DEPOSIT_COUNT: constant(u256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1\n"
  },
  {
    "typ": "NAME",
    "string": "constant",
    "start": [
      3,
      19
    ],
    "end": [
      3,
      27
    ],
    "line": "MAX_DEPOSIT_COUNT: constant(u256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      3,
      27
    ],
    "end": [
      3,
      28
    ],
    "line": "MAX_DEPOSIT_COUNT: constant(u256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      3,
      28
    ],
    "end": [
      3,
      32
    ],
    "line": "MAX_DEPOSIT_COUNT: constant(u256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      3,
      32
    ],
    "end": [
      3,
      33
    ],
    "line": "MAX_DEPOSIT_COUNT: constant(u256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      3,
      34
    ],
    "end": [
      3,
      35
    ],
    "line": "MAX_DEPOSIT_COUNT: constant(u256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1\n"
  },
  {
    "typ": "NUMBER",
    "string": "4294967295",
    "start": [
      3,
      36
    ],
    "end": [
      3,
      46
    ],
    "line": "MAX_DEPOSIT_COUNT: constant(u256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1\n"
  },
  {
    "typ": "COMMENT",
    "string": "# 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1",
    "start": [
      3,
      47
    ],
    "end": [
      3,
      83
    ],
    "line": "MAX_DEPOSIT_COUNT: constant(u256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      3,
      83
    ],
    "end": [
      4,
      0
    ],
    "line": "MAX_DEPOSIT_COUNT: constant(u256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1\n"
  },
  {
    "typ": "NAME",
    "string": "PUBKEY_LENGTH",
    "start": [
      4,
      0
    ],
    "end": [
      4,
      13
    ],
    "line": "PUBKEY_LENGTH: constant(u256) = 48  # bytes\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      4,
      13
    ],
    "end": [
      4,
      14
    ],
    "line": "PUBKEY_LENGTH: constant(u256) = 48  # bytes\n"
  },
  {
    "typ": "NAME",
    "string": "constant",
    "start": [
      4,
      15
    ],
    "end": [
      4,
      23
    ],
    "line": "PUBKEY_LENGTH: constant(u256) = 48  # bytes\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      4,
      23
    ],
    "end": [
      4,
      24
    ],
    "line": "PUBKEY_LENGTH: constant(u256) = 48  # bytes\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      4,
      24
    ],
    "end": [
      4,
      28
    ],
    "line": "PUBKEY_LENGTH: constant(u256) = 48  # bytes\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      4,
      28
    ],
    "end": [
      4,
      29
    ],
    "line": "PUBKEY_LENGTH: constant(u256) = 48  # bytes\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      4,
      30
    ],
    "end": [
      4,
      31
    ],
    "line": "PUBKEY_LENGTH: constant(u256) = 48  # bytes\n"
  },
  {
    "typ": "NUMBER",
    "string": "48",
    "start": [
      4,
      32
    ],
    "end": [
      4,
      34
    ],
    "line": "PUBKEY_LENGTH: constant(u256) = 48  # bytes\n"
  },
  {
    "typ": "COMMENT",
    "string": "# bytes",
    "start": [
      4,
      36
    ],
    "end": [
      4,
      43
    ],
    "line": "PUBKEY_LENGTH: constant(u256) = 48  # bytes\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      4,
      43
    ],
    "end": [
      5,
      0
    ],
    "line": "PUBKEY_LENGTH: constant(u256) = 48  # bytes\n"
  },
  {
    "typ": "NAME",
    "string": "WITHDRAWAL_CREDENTIALS_LENGTH",
    "start": [
      5,
      0
    ],
    "end": [
      5,
      29
    ],
    "line": "WITHDRAWAL_CREDENTIALS_LENGTH: constant(u256) = 32  # bytes\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      5,
      29
    ],
    "end": [
      5,
      30
    ],
    "line": "WITHDRAWAL_CREDENTIALS_LENGTH: constant(u256) = 32  # bytes\n"
  },
  {
    "typ": "NAME",
    "string": "constant",
    "start": [
      5,
      31
    ],
    "end": [
      5,
      39
    ],
    "line": "WITHDRAWAL_CREDENTIALS_LENGTH: constant(u256) = 32  # bytes\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      5,
      39
    ],
    "end": [
      5,
      40
    ],
    "line": "WITHDRAWAL_CREDENTIALS_LENGTH: constant(u256) = 32  # bytes\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      5,
      40
    ],
    "end": [
      5,
      44
    ],
    "line": "WITHDRAWAL_CREDENTIALS_LENGTH: constant(u256) = 32  # bytes\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      5,
      44
    ],
    "end": [
      5,
      45
    ],
    "line": "WITHDRAWAL_CREDENTIALS_LENGTH: constant(u256) = 32  # bytes\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      5,
      46
    ],
    "end": [
      5,
      47
    ],
    "line": "WITHDRAWAL_CREDENTIALS_LENGTH: constant(u256) = 32  # bytes\n"
  },
  {
    "typ": "NUMBER",
    "string": "32",
    "start": [
      5,
      48
    ],
    "end": [
      5,
      50
    ],
    "line": "WITHDRAWAL_CREDENTIALS_LENGTH: constant(u256) = 32  # bytes\n"
  },
  {
    "typ": "COMMENT",
    "string": "# bytes",
    "start": [
      5,
      52
    ],
    "end": [
      5,
      59
    ],
    "line": "WITHDRAWAL_CREDENTIALS_LENGTH: constant(u256) = 32  # bytes\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      5,
      59
    ],
    "end": [
      6,
      0
    ],
    "line": "WITHDRAWAL_CREDENTIALS_LENGTH: constant(u256) = 32  # bytes\n"
  },
  {
    "typ": "NAME",
    "string": "AMOUNT_LENGTH",
    "start": [
      6,
      0
    ],
    "end": [
      6,
      13
    ],
    "line": "AMOUNT_LENGTH: constant(u256) = 8  # bytes\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      6,
      13
    ],
    "end": [
      6,
      14
    ],
    "line": "AMOUNT_LENGTH: constant(u256) = 8  # bytes\n"
  },
  {
    "typ": "NAME",
    "string": "constant",
    "start": [
      6,
      15
    ],
    "end": [
      6,
      23
    ],
    "line": "AMOUNT_LENGTH: constant(u256) = 8  # bytes\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      6,
      23
    ],
    "end": [
      6,
      24
    ],
    "line": "AMOUNT_LENGTH: constant(u256) = 8  # bytes\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      6,
      24
    ],
    "end": [
      6,
      28
    ],
    "line": "AMOUNT_LENGTH: constant(u256) = 8  # bytes\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      6,
      28
    ],
    "end": [
      6,
      29
    ],
    "line": "AMOUNT_LENGTH: constant(u256) = 8  # bytes\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      6,
      30
    ],
    "end": [
      6,
      31
    ],
    "line": "AMOUNT_LENGTH: constant(u256) = 8  # bytes\n"
  },
  {
    "typ": "NUMBER",
    "string": "8",
    "start": [
      6,
      32
    ],
    "end": [
      6,
      33
    ],
    "line": "AMOUNT_LENGTH: constant(u256) = 8  # bytes\n"
  },
  {
    "typ": "COMMENT",
    "string": "# bytes",
    "start": [
      6,
      35
    ],
    "end": [
      6,
      42
    ],
    "line": "AMOUNT_LENGTH: constant(u256) = 8  # bytes\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      6,
      42
    ],
    "end": [
      7,
      0
    ],
    "line": "AMOUNT_LENGTH: constant(u256) = 8  # bytes\n"
  },
  {
    "typ": "NAME",
    "string": "SIGNATURE_LENGTH",
    "start": [
      7,
      0
    ],
    "end": [
      7,
      16
    ],
    "line": "SIGNATURE_LENGTH: constant(u256) = 96  # bytes\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      7,
      16
    ],
    "end": [
      7,
      17
    ],
    "line": "SIGNATURE_LENGTH: constant(u256) = 96  # bytes\n"
  },
  {
    "typ": "NAME",
    "string": "constant",
    "start": [
      7,
      18
    ],
    "end": [
      7,
      26
    ],
    "line": "SIGNATURE_LENGTH: constant(u256) = 96  # bytes\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      7,
      26
    ],
    "end": [
      7,
      27
    ],
    "line": "SIGNATURE_LENGTH: constant(u256) = 96  # bytes\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      7,
      27
    ],
    "end": [
      7,
      31
    ],
    "line": "SIGNATURE_LENGTH: constant(u256) = 96  # bytes\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      7,
      31
    ],
    "end": [
      7,
      32
    ],
    "line": "SIGNATURE_LENGTH: constant(u256) = 96  # bytes\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      7,
      33
    ],
    "end": [
      7,
      34
    ],
    "line": "SIGNATURE_LENGTH: constant(u256) = 96  # bytes\n"
  },
  {
    "typ": "NUMBER",
    "string": "96",
    "start": [
      7,
      35
    ],
    "end": [
      7,
      37
    ],
    "line": "SIGNATURE_LENGTH: constant(u256) = 96  # bytes\n"
  },
  {
    "typ": "COMMENT",
    "string": "# bytes",
    "start": [
      7,
      39
    ],
    "end": [
      7,
      46
    ],
    "line": "SIGNATURE_LENGTH: constant(u256) = 96  # bytes\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      7,
      46
    ],
    "end": [
      8,
      0
    ],
    "line": "SIGNATURE_LENGTH: constant(u256) = 96  # bytes\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      8,
      0
    ],
    "end": [
      9,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "NAME",
    "string": "DepositEvent",
    "start": [
      9,
      0
    ],
    "end": [
      9,
      12
    ],
    "line": "DepositEvent: event({\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      9,
      12
    ],
    "end": [
      9,
      13
    ],
    "line": "DepositEvent: event({\n"
  },
  {
    "typ": "NAME",
    "string": "event",
    "start": [
      9,
      14
    ],
    "end": [
      9,
      19
    ],
    "line": "DepositEvent: event({\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      9,
      19
    ],
    "end": [
      9,
      20
    ],
    "line": "DepositEvent: event({\n"
  },
  {
    "typ": "OP",
    "string": "{",
    "start": [
      9,
      20
    ],
    "end": [
      9,
      21
    ],
    "line": "DepositEvent: event({\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      9,
      21
    ],
    "end": [
      10,
      0
    ],
    "line": "DepositEvent: event({\n"
  },
  {
    "typ": "NAME",
    "string": "pubkey",
    "start": [
      10,
      4
    ],
    "end": [
      10,
      10
    ],
    "line": "    pubkey: bytes[48],\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      10,
      10
    ],
    "end": [
      10,
      11
    ],
    "line": "    pubkey: bytes[48],\n"
  },
  {
    "typ": "NAME",
    "string": "bytes",
    "start": [
      10,
      12
    ],
    "end": [
      10,
      17
    ],
    "line": "    pubkey: bytes[48],\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      10,
      17
    ],
    "end": [
      10,
      18
    ],
    "line": "    pubkey: bytes[48],\n"
  },
  {
    "typ": "NUMBER",
    "string": "48",
    "start": [
      10,
      18
    ],
    "end": [
      10,
      20
    ],
    "line": "    pubkey: bytes[48],\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      10,
      20
    ],
    "end": [
      10,
      21
    ],
    "line": "    pubkey: bytes[48],\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      10,
      21
    ],
    "end": [
      10,
      22
    ],
    "line": "    pubkey: bytes[48],\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      10,
      22
    ],
    "end": [
      11,
      0
    ],
    "line": "    pubkey: bytes[48],\n"
  },
  {
    "typ": "NAME",
    "string": "withdrawal_credentials",
    "start": [
      11,
      4
    ],
    "end": [
      11,
      26
    ],
    "line": "    withdrawal_credentials: bytes[32],\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      11,
      26
    ],
    "end": [
      11,
      27
    ],
    "line": "    withdrawal_credentials: bytes[32],\n"
  },
  {
    "typ": "NAME",
    "string": "bytes",
    "start": [
      11,
      28
    ],
    "end": [
      11,
      33
    ],
    "line": "    withdrawal_credentials: bytes[32],\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      11,
      33
    ],
    "end": [
      11,
      34
    ],
    "line": "    withdrawal_credentials: bytes[32],\n"
  },
  {
    "typ": "NUMBER",
    "string": "32",
    "start": [
      11,
      34
    ],
    "end": [
      11,
      36
    ],
    "line": "    withdrawal_credentials: bytes[32],\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      11,
      36
    ],
    "end": [
      11,
      37
    ],
    "line": "    withdrawal_credentials: bytes[32],\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      11,
      37
    ],
    "end": [
      11,
      38
    ],
    "line": "    withdrawal_credentials: bytes[32],\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      11,
      38
    ],
    "end": [
      12,
      0
    ],
    "line": "    withdrawal_credentials: bytes[32],\n"
  },
  {
    "typ": "NAME",
    "string": "amount",
    "start": [
      12,
      4
    ],
    "end": [
      12,
      10
    ],
    "line": "    amount: bytes[8],\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      12,
      10
    ],
    "end": [
      12,
      11
    ],
    "line": "    amount: bytes[8],\n"
  },
  {
    "typ": "NAME",
    "string": "bytes",
    "start": [
      12,
      12
    ],
    "end": [
      12,
      17
    ],
    "line": "    amount: bytes[8],\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      12,
      17
    ],
    "end": [
      12,
      18
    ],
    "line": "    amount: bytes[8],\n"
  },
  {
    "typ": "NUMBER",
    "string": "8",
    "start": [
      12,
      18
    ],
    "end": [
      12,
      19
    ],
    "line": "    amount: bytes[8],\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      12,
      19
    ],
    "end": [
      12,
      20
    ],
    "line": "    amount: bytes[8],\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      12,
      20
    ],
    "end": [
      12,
      21
    ],
    "line": "    amount: bytes[8],\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      12,
      21
    ],
    "end": [
      13,
      0
    ],
    "line": "    amount: bytes[8],\n"
  },
  {
    "typ": "NAME",
    "string": "signature",
    "start": [
      13,
      4
    ],
    "end": [
      13,
      13
    ],
    "line": "    signature: bytes[96],\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      13,
      13
    ],
    "end": [
      13,
      14
    ],
    "line": "    signature: bytes[96],\n"
  },
  {
    "typ": "NAME",
    "string": "bytes",
    "start": [
      13,
      15
    ],
    "end": [
      13,
      20
    ],
    "line": "    signature: bytes[96],\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      13,
      20
    ],
    "end": [
      13,
      21
    ],
    "line": "    signature: bytes[96],\n"
  },
  {
    "typ": "NUMBER",
    "string": "96",
    "start": [
      13,
      21
    ],
    "end": [
      13,
      23
    ],
    "line": "    signature: bytes[96],\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      13,
      23
    ],
    "end": [
      13,
      24
    ],
    "line": "    signature: bytes[96],\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      13,
      24
    ],
    "end": [
      13,
      25
    ],
    "line": "    signature: bytes[96],\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      13,
      25
    ],
    "end": [
      14,
      0
    ],
    "line": "    signature: bytes[96],\n"
  },
  {
    "typ": "NAME",
    "string": "index",
    "start": [
      14,
      4
    ],
    "end": [
      14,
      9
    ],
    "line": "    index: bytes[8],\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      14,
      9
    ],
    "end": [
      14,
      10
    ],
    "line": "    index: bytes[8],\n"
  },
  {
    "typ": "NAME",
    "string": "bytes",
    "start": [
      14,
      11
    ],
    "end": [
      14,
      16
    ],
    "line": "    index: bytes[8],\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      14,
      16
    ],
    "end": [
      14,
      17
    ],
    "line": "    index: bytes[8],\n"
  },
  {
    "typ": "NUMBER",
    "string": "8",
    "start": [
      14,
      17
    ],
    "end": [
      14,
      18
    ],
    "line": "    index: bytes[8],\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      14,
      18
    ],
    "end": [
      14,
      19
    ],
    "line": "    index: bytes[8],\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      14,
      19
    ],
    "end": [
      14,
      20
    ],
    "line": "    index: bytes[8],\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      14,
      20
    ],
    "end": [
      15,
      0
    ],
    "line": "    index: bytes[8],\n"
  },
  {
    "typ": "OP",
    "string": "}",
    "start": [
      15,
      0
    ],
    "end": [
      15,
      1
    ],
    "line": "})\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      15,
      1
    ],
    "end": [
      15,
      2
    ],
    "line": "})\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      15,
      2
    ],
    "end": [
      16,
      0
    ],
    "line": "})\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      16,
      0
    ],
    "end": [
      17,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "NAME",
    "string": "branch",
    "start": [
      17,
      0
    ],
    "end": [
      17,
      6
    ],
    "line": "branch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      17,
      6
    ],
    "end": [
      17,
      7
    ],
    "line": "branch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "NAME",
    "string": "bytes32",
    "start": [
      17,
      8
    ],
    "end": [
      17,
      15
    ],
    "line": "branch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      17,
      15
    ],
    "end": [
      17,
      16
    ],
    "line": "branch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "NAME",
    "string": "DEPOSIT_CONTRACT_TREE_DEPTH",
    "start": [
      17,
      16
    ],
    "end": [
      17,
      43
    ],
    "line": "branch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      17,
      43
    ],
    "end": [
      17,
      44
    ],
    "line": "branch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      17,
      44
    ],
    "end": [
      18,
      0
    ],
    "line": "branch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "NAME",
    "string": "deposit_count",
    "start": [
      18,
      0
    ],
    "end": [
      18,
      13
    ],
    "line": "deposit_count: u256\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      18,
      13
    ],
    "end": [
      18,
      14
    ],
    "line": "deposit_count: u256\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      18,
      15
    ],
    "end": [
      18,
      19
    ],
    "line": "deposit_count: u256\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      18,
      19
    ],
    "end": [
      19,
      0
    ],
    "line": "deposit_count: u256\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      19,
      0
    ],
    "end": [
      20,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "COMMENT",
    "string": "# Compute hashes in empty sparse Merkle tree",
    "start": [
      20,
      0
    ],
    "end": [
      20,
      44
    ],
    "line": "# Compute hashes in empty sparse Merkle tree\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      20,
      44
    ],
    "end": [
      21,
      0
    ],
    "line": "# Compute hashes in empty sparse Merkle tree\n"
  },
  {
    "typ": "NAME",
    "string": "zero_hashes",
    "start": [
      21,
      0
    ],
    "end": [
      21,
      11
    ],
    "line": "zero_hashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      21,
      11
    ],
    "end": [
      21,
      12
    ],
    "line": "zero_hashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "NAME",
    "string": "bytes32",
    "start": [
      21,
      13
    ],
    "end": [
      21,
      20
    ],
    "line": "zero_hashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      21,
      20
    ],
    "end": [
      21,
      21
    ],
    "line": "zero_hashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "NAME",
    "string": "DEPOSIT_CONTRACT_TREE_DEPTH",
    "start": [
      21,
      21
    ],
    "end": [
      21,
      48
    ],
    "line": "zero_hashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      21,
      48
    ],
    "end": [
      21,
      49
    ],
    "line": "zero_hashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      21,
      49
    ],
    "end": [
      22,
      0
    ],
    "line": "zero_hashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\n"
  },
  {
    "typ": "OP",
    "string": "@",
    "start": [
      22,
      0
    ],
    "end": [
      22,
      1
    ],
    "line": "@public\n"
  },
  {
    "typ": "NAME",
    "string": "public",
    "start": [
      22,
      1
    ],
    "end": [
      22,
      7
    ],
    "line": "@public\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      22,
      7
    ],
    "end": [
      23,
      0
    ],
    "line": "@public\n"
  },
  {
    "typ": "NAME",
    "string": "def",
    "start": [
      23,
      0
    ],
    "end": [
      23,
      3
    ],
    "line": "def __init__():\n"
  },
  {
    "typ": "NAME",
    "string": "__init__",
    "start": [
      23,
      4
    ],
    "end": [
      23,
      12
    ],
    "line": "def __init__():\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      23,
      12
    ],
    "end": [
      23,
      13
    ],
    "line": "def __init__():\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      23,
      13
    ],
    "end": [
      23,
      14
    ],
    "line": "def __init__():\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      23,
      14
    ],
    "end": [
      23,
      15
    ],
    "line": "def __init__():\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      23,
      15
    ],
    "end": [
      24,
      0
    ],
    "line": "def __init__():\n"
  },
  {
    "typ": "INDENT",
    "string": "    ",
    "start": [
      24,
      0
    ],
    "end": [
      24,
      4
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "NAME",
    "string": "for",
    "start": [
      24,
      4
    ],
    "end": [
      24,
      7
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "NAME",
    "string": "i",
    "start": [
      24,
      8
    ],
    "end": [
      24,
      9
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "NAME",
    "string": "in",
    "start": [
      24,
      10
    ],
    "end": [
      24,
      12
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "NAME",
    "string": "range",
    "start": [
      24,
      13
    ],
    "end": [
      24,
      18
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      24,
      18
    ],
    "end": [
      24,
      19
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "NAME",
    "string": "DEPOSIT_CONTRACT_TREE_DEPTH",
    "start": [
      24,
      19
    ],
    "end": [
      24,
      46
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "OP",
    "string": "-",
    "start": [
      24,
      47
    ],
    "end": [
      24,
      48
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "NUMBER",
    "string": "1",
    "start": [
      24,
      49
    ],
    "end": [
      24,
      50
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      24,
      50
    ],
    "end": [
      24,
      51
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      24,
      51
    ],
    "end": [
      24,
      52
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      24,
      52
    ],
    "end": [
      25,
      0
    ],
    "line": "    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\n"
  },
  {
    "typ": "INDENT",
    "string": "        ",
    "start": [
      25,
      0
    ],
    "end": [
      25,
      8
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      25,
      8
    ],
    "end": [
      25,
      12
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      25,
      12
    ],
    "end": [
      25,
      13
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NAME",
    "string": "zero_hashes",
    "start": [
      25,
      13
    ],
    "end": [
      25,
      24
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      25,
      24
    ],
    "end": [
      25,
      25
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NAME",
    "string": "i",
    "start": [
      25,
      25
    ],
    "end": [
      25,
      26
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": "+",
    "start": [
      25,
      27
    ],
    "end": [
      25,
      28
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NUMBER",
    "string": "1",
    "start": [
      25,
      29
    ],
    "end": [
      25,
      30
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      25,
      30
    ],
    "end": [
      25,
      31
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      25,
      32
    ],
    "end": [
      25,
      33
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      25,
      34
    ],
    "end": [
      25,
      40
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      25,
      40
    ],
    "end": [
      25,
      41
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NAME",
    "string": "concat",
    "start": [
      25,
      41
    ],
    "end": [
      25,
      47
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      25,
      47
    ],
    "end": [
      25,
      48
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      25,
      48
    ],
    "end": [
      25,
      52
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      25,
      52
    ],
    "end": [
      25,
      53
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NAME",
    "string": "zero_hashes",
    "start": [
      25,
      53
    ],
    "end": [
      25,
      64
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      25,
      64
    ],
    "end": [
      25,
      65
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NAME",
    "string": "i",
    "start": [
      25,
      65
    ],
    "end": [
      25,
      66
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      25,
      66
    ],
    "end": [
      25,
      67
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      25,
      67
    ],
    "end": [
      25,
      68
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      25,
      69
    ],
    "end": [
      25,
      73
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      25,
      73
    ],
    "end": [
      25,
      74
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NAME",
    "string": "zero_hashes",
    "start": [
      25,
      74
    ],
    "end": [
      25,
      85
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      25,
      85
    ],
    "end": [
      25,
      86
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NAME",
    "string": "i",
    "start": [
      25,
      86
    ],
    "end": [
      25,
      87
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      25,
      87
    ],
    "end": [
      25,
      88
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      25,
      88
    ],
    "end": [
      25,
      89
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      25,
      89
    ],
    "end": [
      25,
      90
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      25,
      90
    ],
    "end": [
      26,
      0
    ],
    "line": "        self.zero_hashes[i + 1] = sha256(concat(self.zero_hashes[i], self.zero_hashes[i]))\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      26,
      0
    ],
    "end": [
      27,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      27,
      0
    ],
    "end": [
      28,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      28,
      0
    ],
    "end": [
      28,
      0
    ],
    "line": "@private\n"
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      28,
      0
    ],
    "end": [
      28,
      0
    ],
    "line": "@private\n"
  },
  {
    "typ": "OP",
    "string": "@",
    "start": [
      28,
      0
    ],
    "end": [
      28,
      1
    ],
    "line": "@private\n"
  },
  {
    "typ": "NAME",
    "string": "private",
    "start": [
      28,
      1
    ],
    "end": [
      28,
      8
    ],
    "line": "@private\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      28,
      8
    ],
    "end": [
      29,
      0
    ],
    "line": "@private\n"
  },
  {
    "typ": "OP",
    "string": "@",
    "start": [
      29,
      0
    ],
    "end": [
      29,
      1
    ],
    "line": "@constant\n"
  },
  {
    "typ": "NAME",
    "string": "constant",
    "start": [
      29,
      1
    ],
    "end": [
      29,
      9
    ],
    "line": "@constant\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      29,
      9
    ],
    "end": [
      30,
      0
    ],
    "line": "@constant\n"
  },
  {
    "typ": "NAME",
    "string": "def",
    "start": [
      30,
      0
    ],
    "end": [
      30,
      3
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "NAME",
    "string": "to_little_endian_64",
    "start": [
      30,
      4
    ],
    "end": [
      30,
      23
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      30,
      23
    ],
    "end": [
      30,
      24
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "NAME",
    "string": "value",
    "start": [
      30,
      24
    ],
    "end": [
      30,
      29
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      30,
      29
    ],
    "end": [
      30,
      30
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      30,
      31
    ],
    "end": [
      30,
      35
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      30,
      35
    ],
    "end": [
      30,
      36
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": "->",
    "start": [
      30,
      37
    ],
    "end": [
      30,
      39
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "NAME",
    "string": "bytes",
    "start": [
      30,
      40
    ],
    "end": [
      30,
      45
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      30,
      45
    ],
    "end": [
      30,
      46
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "NUMBER",
    "string": "8",
    "start": [
      30,
      46
    ],
    "end": [
      30,
      47
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      30,
      47
    ],
    "end": [
      30,
      48
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      30,
      48
    ],
    "end": [
      30,
      49
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      30,
      49
    ],
    "end": [
      31,
      0
    ],
    "line": "def to_little_endian_64(value: u256) -> bytes[8]:\n"
  },
  {
    "typ": "COMMENT",
    "string": "# Reversing bytes using bitwise u256 manipulations",
    "start": [
      31,
      4
    ],
    "end": [
      31,
      54
    ],
    "line": "    # Reversing bytes using bitwise u256 manipulations\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      31,
      54
    ],
    "end": [
      32,
      0
    ],
    "line": "    # Reversing bytes using bitwise u256 manipulations\n"
  },
  {
    "typ": "COMMENT",
    "string": "# Note: array accesses of bytes[] are not currently supported in Vyper",
    "start": [
      32,
      4
    ],
    "end": [
      32,
      74
    ],
    "line": "    # Note: array accesses of bytes[] are not currently supported in Vyper\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      32,
      74
    ],
    "end": [
      33,
      0
    ],
    "line": "    # Note: array accesses of bytes[] are not currently supported in Vyper\n"
  },
  {
    "typ": "COMMENT",
    "string": "# Note: this function is only called when `value < 2**64`",
    "start": [
      33,
      4
    ],
    "end": [
      33,
      61
    ],
    "line": "    # Note: this function is only called when `value < 2**64`\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      33,
      61
    ],
    "end": [
      34,
      0
    ],
    "line": "    # Note: this function is only called when `value < 2**64`\n"
  },
  {
    "typ": "INDENT",
    "string": "    ",
    "start": [
      34,
      0
    ],
    "end": [
      34,
      4
    ],
    "line": "    y: u256 = 0\n"
  },
  {
    "typ": "NAME",
    "string": "y",
    "start": [
      34,
      4
    ],
    "end": [
      34,
      5
    ],
    "line": "    y: u256 = 0\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      34,
      5
    ],
    "end": [
      34,
      6
    ],
    "line": "    y: u256 = 0\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      34,
      7
    ],
    "end": [
      34,
      11
    ],
    "line": "    y: u256 = 0\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      34,
      12
    ],
    "end": [
      34,
      13
    ],
    "line": "    y: u256 = 0\n"
  },
  {
    "typ": "NUMBER",
    "string": "0",
    "start": [
      34,
      14
    ],
    "end": [
      34,
      15
    ],
    "line": "    y: u256 = 0\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      34,
      15
    ],
    "end": [
      35,
      0
    ],
    "line": "    y: u256 = 0\n"
  },
  {
    "typ": "NAME",
    "string": "x",
    "start": [
      35,
      4
    ],
    "end": [
      35,
      5
    ],
    "line": "    x: u256 = value\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      35,
      5
    ],
    "end": [
      35,
      6
    ],
    "line": "    x: u256 = value\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      35,
      7
    ],
    "end": [
      35,
      11
    ],
    "line": "    x: u256 = value\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      35,
      12
    ],
    "end": [
      35,
      13
    ],
    "line": "    x: u256 = value\n"
  },
  {
    "typ": "NAME",
    "string": "value",
    "start": [
      35,
      14
    ],
    "end": [
      35,
      19
    ],
    "line": "    x: u256 = value\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      35,
      19
    ],
    "end": [
      36,
      0
    ],
    "line": "    x: u256 = value\n"
  },
  {
    "typ": "NAME",
    "string": "for",
    "start": [
      36,
      4
    ],
    "end": [
      36,
      7
    ],
    "line": "    for _ in range(8):\n"
  },
  {
    "typ": "NAME",
    "string": "_",
    "start": [
      36,
      8
    ],
    "end": [
      36,
      9
    ],
    "line": "    for _ in range(8):\n"
  },
  {
    "typ": "NAME",
    "string": "in",
    "start": [
      36,
      10
    ],
    "end": [
      36,
      12
    ],
    "line": "    for _ in range(8):\n"
  },
  {
    "typ": "NAME",
    "string": "range",
    "start": [
      36,
      13
    ],
    "end": [
      36,
      18
    ],
    "line": "    for _ in range(8):\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      36,
      18
    ],
    "end": [
      36,
      19
    ],
    "line": "    for _ in range(8):\n"
  },
  {
    "typ": "NUMBER",
    "string": "8",
    "start": [
      36,
      19
    ],
    "end": [
      36,
      20
    ],
    "line": "    for _ in range(8):\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      36,
      20
    ],
    "end": [
      36,
      21
    ],
    "line": "    for _ in range(8):\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      36,
      21
    ],
    "end": [
      36,
      22
    ],
    "line": "    for _ in range(8):\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      36,
      22
    ],
    "end": [
      37,
      0
    ],
    "line": "    for _ in range(8):\n"
  },
  {
    "typ": "INDENT",
    "string": "        ",
    "start": [
      37,
      0
    ],
    "end": [
      37,
      8
    ],
    "line": "        y = shift(y, 8)\n"
  },
  {
    "typ": "NAME",
    "string": "y",
    "start": [
      37,
      8
    ],
    "end": [
      37,
      9
    ],
    "line": "        y = shift(y, 8)\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      37,
      10
    ],
    "end": [
      37,
      11
    ],
    "line": "        y = shift(y, 8)\n"
  },
  {
    "typ": "NAME",
    "string": "shift",
    "start": [
      37,
      12
    ],
    "end": [
      37,
      17
    ],
    "line": "        y = shift(y, 8)\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      37,
      17
    ],
    "end": [
      37,
      18
    ],
    "line": "        y = shift(y, 8)\n"
  },
  {
    "typ": "NAME",
    "string": "y",
    "start": [
      37,
      18
    ],
    "end": [
      37,
      19
    ],
    "line": "        y = shift(y, 8)\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      37,
      19
    ],
    "end": [
      37,
      20
    ],
    "line": "        y = shift(y, 8)\n"
  },
  {
    "typ": "NUMBER",
    "string": "8",
    "start": [
      37,
      21
    ],
    "end": [
      37,
      22
    ],
    "line": "        y = shift(y, 8)\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      37,
      22
    ],
    "end": [
      37,
      23
    ],
    "line": "        y = shift(y, 8)\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      37,
      23
    ],
    "end": [
      38,
      0
    ],
    "line": "        y = shift(y, 8)\n"
  },
  {
    "typ": "NAME",
    "string": "y",
    "start": [
      38,
      8
    ],
    "end": [
      38,
      9
    ],
    "line": "        y = y + bitwise_and(x, 255)\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      38,
      10
    ],
    "end": [
      38,
      11
    ],
    "line": "        y = y + bitwise_and(x, 255)\n"
  },
  {
    "typ": "NAME",
    "string": "y",
    "start": [
      38,
      12
    ],
    "end": [
      38,
      13
    ],
    "line": "        y = y + bitwise_and(x, 255)\n"
  },
  {
    "typ": "OP",
    "string": "+",
    "start": [
      38,
      14
    ],
    "end": [
      38,
      15
    ],
    "line": "        y = y + bitwise_and(x, 255)\n"
  },
  {
    "typ": "NAME",
    "string": "bitwise_and",
    "start": [
      38,
      16
    ],
    "end": [
      38,
      27
    ],
    "line": "        y = y + bitwise_and(x, 255)\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      38,
      27
    ],
    "end": [
      38,
      28
    ],
    "line": "        y = y + bitwise_and(x, 255)\n"
  },
  {
    "typ": "NAME",
    "string": "x",
    "start": [
      38,
      28
    ],
    "end": [
      38,
      29
    ],
    "line": "        y = y + bitwise_and(x, 255)\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      38,
      29
    ],
    "end": [
      38,
      30
    ],
    "line": "        y = y + bitwise_and(x, 255)\n"
  },
  {
    "typ": "NUMBER",
    "string": "255",
    "start": [
      38,
      31
    ],
    "end": [
      38,
      34
    ],
    "line": "        y = y + bitwise_and(x, 255)\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      38,
      34
    ],
    "end": [
      38,
      35
    ],
    "line": "        y = y + bitwise_and(x, 255)\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      38,
      35
    ],
    "end": [
      39,
      0
    ],
    "line": "        y = y + bitwise_and(x, 255)\n"
  },
  {
    "typ": "NAME",
    "string": "x",
    "start": [
      39,
      8
    ],
    "end": [
      39,
      9
    ],
    "line": "        x = shift(x, -8)\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      39,
      10
    ],
    "end": [
      39,
      11
    ],
    "line": "        x = shift(x, -8)\n"
  },
  {
    "typ": "NAME",
    "string": "shift",
    "start": [
      39,
      12
    ],
    "end": [
      39,
      17
    ],
    "line": "        x = shift(x, -8)\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      39,
      17
    ],
    "end": [
      39,
      18
    ],
    "line": "        x = shift(x, -8)\n"
  },
  {
    "typ": "NAME",
    "string": "x",
    "start": [
      39,
      18
    ],
    "end": [
      39,
      19
    ],
    "line": "        x = shift(x, -8)\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      39,
      19
    ],
    "end": [
      39,
      20
    ],
    "line": "        x = shift(x, -8)\n"
  },
  {
    "typ": "OP",
    "string": "-",
    "start": [
      39,
      21
    ],
    "end": [
      39,
      22
    ],
    "line": "        x = shift(x, -8)\n"
  },
  {
    "typ": "NUMBER",
    "string": "8",
    "start": [
      39,
      22
    ],
    "end": [
      39,
      23
    ],
    "line": "        x = shift(x, -8)\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      39,
      23
    ],
    "end": [
      39,
      24
    ],
    "line": "        x = shift(x, -8)\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      39,
      24
    ],
    "end": [
      40,
      0
    ],
    "line": "        x = shift(x, -8)\n"
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      40,
      4
    ],
    "end": [
      40,
      4
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "NAME",
    "string": "return",
    "start": [
      40,
      4
    ],
    "end": [
      40,
      10
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "NAME",
    "string": "slice",
    "start": [
      40,
      11
    ],
    "end": [
      40,
      16
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      40,
      16
    ],
    "end": [
      40,
      17
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "NAME",
    "string": "convert",
    "start": [
      40,
      17
    ],
    "end": [
      40,
      24
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      40,
      24
    ],
    "end": [
      40,
      25
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "NAME",
    "string": "y",
    "start": [
      40,
      25
    ],
    "end": [
      40,
      26
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      40,
      26
    ],
    "end": [
      40,
      27
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "NAME",
    "string": "bytes32",
    "start": [
      40,
      28
    ],
    "end": [
      40,
      35
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      40,
      35
    ],
    "end": [
      40,
      36
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      40,
      36
    ],
    "end": [
      40,
      37
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "NAME",
    "string": "start",
    "start": [
      40,
      38
    ],
    "end": [
      40,
      43
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      40,
      43
    ],
    "end": [
      40,
      44
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "NUMBER",
    "string": "24",
    "start": [
      40,
      44
    ],
    "end": [
      40,
      46
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      40,
      46
    ],
    "end": [
      40,
      47
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "NAME",
    "string": "len",
    "start": [
      40,
      48
    ],
    "end": [
      40,
      51
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      40,
      51
    ],
    "end": [
      40,
      52
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "NUMBER",
    "string": "8",
    "start": [
      40,
      52
    ],
    "end": [
      40,
      53
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      40,
      53
    ],
    "end": [
      40,
      54
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      40,
      54
    ],
    "end": [
      41,
      0
    ],
    "line": "    return slice(convert(y, bytes32), start=24, len=8)\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      41,
      0
    ],
    "end": [
      42,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      42,
      0
    ],
    "end": [
      43,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      43,
      0
    ],
    "end": [
      43,
      0
    ],
    "line": "@public\n"
  },
  {
    "typ": "OP",
    "string": "@",
    "start": [
      43,
      0
    ],
    "end": [
      43,
      1
    ],
    "line": "@public\n"
  },
  {
    "typ": "NAME",
    "string": "public",
    "start": [
      43,
      1
    ],
    "end": [
      43,
      7
    ],
    "line": "@public\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      43,
      7
    ],
    "end": [
      44,
      0
    ],
    "line": "@public\n"
  },
  {
    "typ": "OP",
    "string": "@",
    "start": [
      44,
      0
    ],
    "end": [
      44,
      1
    ],
    "line": "@constant\n"
  },
  {
    "typ": "NAME",
    "string": "constant",
    "start": [
      44,
      1
    ],
    "end": [
      44,
      9
    ],
    "line": "@constant\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      44,
      9
    ],
    "end": [
      45,
      0
    ],
    "line": "@constant\n"
  },
  {
    "typ": "NAME",
    "string": "def",
    "start": [
      45,
      0
    ],
    "end": [
      45,
      3
    ],
    "line": "def get_hash_tree_root() -> bytes32:\n"
  },
  {
    "typ": "NAME",
    "string": "get_hash_tree_root",
    "start": [
      45,
      4
    ],
    "end": [
      45,
      22
    ],
    "line": "def get_hash_tree_root() -> bytes32:\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      45,
      22
    ],
    "end": [
      45,
      23
    ],
    "line": "def get_hash_tree_root() -> bytes32:\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      45,
      23
    ],
    "end": [
      45,
      24
    ],
    "line": "def get_hash_tree_root() -> bytes32:\n"
  },
  {
    "typ": "OP",
    "string": "->",
    "start": [
      45,
      25
    ],
    "end": [
      45,
      27
    ],
    "line": "def get_hash_tree_root() -> bytes32:\n"
  },
  {
    "typ": "NAME",
    "string": "bytes32",
    "start": [
      45,
      28
    ],
    "end": [
      45,
      35
    ],
    "line": "def get_hash_tree_root() -> bytes32:\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      45,
      35
    ],
    "end": [
      45,
      36
    ],
    "line": "def get_hash_tree_root() -> bytes32:\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      45,
      36
    ],
    "end": [
      46,
      0
    ],
    "line": "def get_hash_tree_root() -> bytes32:\n"
  },
  {
    "typ": "INDENT",
    "string": "    ",
    "start": [
      46,
      0
    ],
    "end": [
      46,
      4
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "NAME",
    "string": "zero_bytes32",
    "start": [
      46,
      4
    ],
    "end": [
      46,
      16
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      46,
      16
    ],
    "end": [
      46,
      17
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "NAME",
    "string": "bytes32",
    "start": [
      46,
      18
    ],
    "end": [
      46,
      25
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      46,
      26
    ],
    "end": [
      46,
      27
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "NUMBER",
    "string": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "start": [
      46,
      28
    ],
    "end": [
      46,
      94
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      46,
      94
    ],
    "end": [
      47,
      0
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "NAME",
    "string": "node",
    "start": [
      47,
      4
    ],
    "end": [
      47,
      8
    ],
    "line": "    node: bytes32 = zero_bytes32\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      47,
      8
    ],
    "end": [
      47,
      9
    ],
    "line": "    node: bytes32 = zero_bytes32\n"
  },
  {
    "typ": "NAME",
    "string": "bytes32",
    "start": [
      47,
      10
    ],
    "end": [
      47,
      17
    ],
    "line": "    node: bytes32 = zero_bytes32\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      47,
      18
    ],
    "end": [
      47,
      19
    ],
    "line": "    node: bytes32 = zero_bytes32\n"
  },
  {
    "typ": "NAME",
    "string": "zero_bytes32",
    "start": [
      47,
      20
    ],
    "end": [
      47,
      32
    ],
    "line": "    node: bytes32 = zero_bytes32\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      47,
      32
    ],
    "end": [
      48,
      0
    ],
    "line": "    node: bytes32 = zero_bytes32\n"
  },
  {
    "typ": "NAME",
    "string": "size",
    "start": [
      48,
      4
    ],
    "end": [
      48,
      8
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      48,
      8
    ],
    "end": [
      48,
      9
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      48,
      10
    ],
    "end": [
      48,
      14
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      48,
      15
    ],
    "end": [
      48,
      16
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      48,
      17
    ],
    "end": [
      48,
      21
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      48,
      21
    ],
    "end": [
      48,
      22
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "NAME",
    "string": "deposit_count",
    "start": [
      48,
      22
    ],
    "end": [
      48,
      35
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      48,
      35
    ],
    "end": [
      49,
      0
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "NAME",
    "string": "for",
    "start": [
      49,
      4
    ],
    "end": [
      49,
      7
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "NAME",
    "string": "height",
    "start": [
      49,
      8
    ],
    "end": [
      49,
      14
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "NAME",
    "string": "in",
    "start": [
      49,
      15
    ],
    "end": [
      49,
      17
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "NAME",
    "string": "range",
    "start": [
      49,
      18
    ],
    "end": [
      49,
      23
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      49,
      23
    ],
    "end": [
      49,
      24
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "NAME",
    "string": "DEPOSIT_CONTRACT_TREE_DEPTH",
    "start": [
      49,
      24
    ],
    "end": [
      49,
      51
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      49,
      51
    ],
    "end": [
      49,
      52
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      49,
      52
    ],
    "end": [
      49,
      53
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      49,
      53
    ],
    "end": [
      50,
      0
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "INDENT",
    "string": "        ",
    "start": [
      50,
      0
    ],
    "end": [
      50,
      8
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NAME",
    "string": "if",
    "start": [
      50,
      8
    ],
    "end": [
      50,
      10
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NAME",
    "string": "bitwise_and",
    "start": [
      50,
      11
    ],
    "end": [
      50,
      22
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      50,
      22
    ],
    "end": [
      50,
      23
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NAME",
    "string": "size",
    "start": [
      50,
      23
    ],
    "end": [
      50,
      27
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      50,
      27
    ],
    "end": [
      50,
      28
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NUMBER",
    "string": "1",
    "start": [
      50,
      29
    ],
    "end": [
      50,
      30
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      50,
      30
    ],
    "end": [
      50,
      31
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "OP",
    "string": "==",
    "start": [
      50,
      32
    ],
    "end": [
      50,
      34
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NUMBER",
    "string": "1",
    "start": [
      50,
      35
    ],
    "end": [
      50,
      36
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      50,
      36
    ],
    "end": [
      50,
      37
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "COMMENT",
    "string": "# More gas efficient than `size % 2 == 1`",
    "start": [
      50,
      39
    ],
    "end": [
      50,
      80
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      50,
      80
    ],
    "end": [
      51,
      0
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "INDENT",
    "string": "            ",
    "start": [
      51,
      0
    ],
    "end": [
      51,
      12
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "node",
    "start": [
      51,
      12
    ],
    "end": [
      51,
      16
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      51,
      17
    ],
    "end": [
      51,
      18
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      51,
      19
    ],
    "end": [
      51,
      25
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      51,
      25
    ],
    "end": [
      51,
      26
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "concat",
    "start": [
      51,
      26
    ],
    "end": [
      51,
      32
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      51,
      32
    ],
    "end": [
      51,
      33
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      51,
      33
    ],
    "end": [
      51,
      37
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      51,
      37
    ],
    "end": [
      51,
      38
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "branch",
    "start": [
      51,
      38
    ],
    "end": [
      51,
      44
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      51,
      44
    ],
    "end": [
      51,
      45
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "height",
    "start": [
      51,
      45
    ],
    "end": [
      51,
      51
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      51,
      51
    ],
    "end": [
      51,
      52
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      51,
      52
    ],
    "end": [
      51,
      53
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "node",
    "start": [
      51,
      54
    ],
    "end": [
      51,
      58
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      51,
      58
    ],
    "end": [
      51,
      59
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      51,
      59
    ],
    "end": [
      51,
      60
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      51,
      60
    ],
    "end": [
      52,
      0
    ],
    "line": "            node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      52,
      8
    ],
    "end": [
      52,
      8
    ],
    "line": "        else:\n"
  },
  {
    "typ": "NAME",
    "string": "else",
    "start": [
      52,
      8
    ],
    "end": [
      52,
      12
    ],
    "line": "        else:\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      52,
      12
    ],
    "end": [
      52,
      13
    ],
    "line": "        else:\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      52,
      13
    ],
    "end": [
      53,
      0
    ],
    "line": "        else:\n"
  },
  {
    "typ": "INDENT",
    "string": "            ",
    "start": [
      53,
      0
    ],
    "end": [
      53,
      12
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "NAME",
    "string": "node",
    "start": [
      53,
      12
    ],
    "end": [
      53,
      16
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      53,
      17
    ],
    "end": [
      53,
      18
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      53,
      19
    ],
    "end": [
      53,
      25
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      53,
      25
    ],
    "end": [
      53,
      26
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "NAME",
    "string": "concat",
    "start": [
      53,
      26
    ],
    "end": [
      53,
      32
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      53,
      32
    ],
    "end": [
      53,
      33
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "NAME",
    "string": "node",
    "start": [
      53,
      33
    ],
    "end": [
      53,
      37
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      53,
      37
    ],
    "end": [
      53,
      38
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      53,
      39
    ],
    "end": [
      53,
      43
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      53,
      43
    ],
    "end": [
      53,
      44
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "NAME",
    "string": "zero_hashes",
    "start": [
      53,
      44
    ],
    "end": [
      53,
      55
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      53,
      55
    ],
    "end": [
      53,
      56
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "NAME",
    "string": "height",
    "start": [
      53,
      56
    ],
    "end": [
      53,
      62
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      53,
      62
    ],
    "end": [
      53,
      63
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      53,
      63
    ],
    "end": [
      53,
      64
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      53,
      64
    ],
    "end": [
      53,
      65
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      53,
      65
    ],
    "end": [
      54,
      0
    ],
    "line": "            node = sha256(concat(node, self.zero_hashes[height]))\n"
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      54,
      8
    ],
    "end": [
      54,
      8
    ],
    "line": "        size /= 2\n"
  },
  {
    "typ": "NAME",
    "string": "size",
    "start": [
      54,
      8
    ],
    "end": [
      54,
      12
    ],
    "line": "        size /= 2\n"
  },
  {
    "typ": "OP",
    "string": "/=",
    "start": [
      54,
      13
    ],
    "end": [
      54,
      15
    ],
    "line": "        size /= 2\n"
  },
  {
    "typ": "NUMBER",
    "string": "2",
    "start": [
      54,
      16
    ],
    "end": [
      54,
      17
    ],
    "line": "        size /= 2\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      54,
      17
    ],
    "end": [
      55,
      0
    ],
    "line": "        size /= 2\n"
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      55,
      4
    ],
    "end": [
      55,
      4
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "return",
    "start": [
      55,
      4
    ],
    "end": [
      55,
      10
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      55,
      11
    ],
    "end": [
      55,
      17
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      55,
      17
    ],
    "end": [
      55,
      18
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "concat",
    "start": [
      55,
      18
    ],
    "end": [
      55,
      24
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      55,
      24
    ],
    "end": [
      55,
      25
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "node",
    "start": [
      55,
      25
    ],
    "end": [
      55,
      29
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      55,
      29
    ],
    "end": [
      55,
      30
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      55,
      31
    ],
    "end": [
      55,
      35
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      55,
      35
    ],
    "end": [
      55,
      36
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "to_little_endian_64",
    "start": [
      55,
      36
    ],
    "end": [
      55,
      55
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      55,
      55
    ],
    "end": [
      55,
      56
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      55,
      56
    ],
    "end": [
      55,
      60
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      55,
      60
    ],
    "end": [
      55,
      61
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "deposit_count",
    "start": [
      55,
      61
    ],
    "end": [
      55,
      74
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      55,
      74
    ],
    "end": [
      55,
      75
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      55,
      75
    ],
    "end": [
      55,
      76
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "slice",
    "start": [
      55,
      77
    ],
    "end": [
      55,
      82
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      55,
      82
    ],
    "end": [
      55,
      83
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "zero_bytes32",
    "start": [
      55,
      83
    ],
    "end": [
      55,
      95
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      55,
      95
    ],
    "end": [
      55,
      96
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "start",
    "start": [
      55,
      97
    ],
    "end": [
      55,
      102
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      55,
      102
    ],
    "end": [
      55,
      103
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NUMBER",
    "string": "0",
    "start": [
      55,
      103
    ],
    "end": [
      55,
      104
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      55,
      104
    ],
    "end": [
      55,
      105
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NAME",
    "string": "len",
    "start": [
      55,
      106
    ],
    "end": [
      55,
      109
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      55,
      109
    ],
    "end": [
      55,
      110
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NUMBER",
    "string": "24",
    "start": [
      55,
      110
    ],
    "end": [
      55,
      112
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      55,
      112
    ],
    "end": [
      55,
      113
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      55,
      113
    ],
    "end": [
      55,
      114
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      55,
      114
    ],
    "end": [
      55,
      115
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      55,
      115
    ],
    "end": [
      56,
      0
    ],
    "line": "    return sha256(concat(node, self.to_little_endian_64(self.deposit_count), slice(zero_bytes32, start=0, len=24)))\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      56,
      0
    ],
    "end": [
      57,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      57,
      0
    ],
    "end": [
      58,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      58,
      0
    ],
    "end": [
      58,
      0
    ],
    "line": "@public\n"
  },
  {
    "typ": "OP",
    "string": "@",
    "start": [
      58,
      0
    ],
    "end": [
      58,
      1
    ],
    "line": "@public\n"
  },
  {
    "typ": "NAME",
    "string": "public",
    "start": [
      58,
      1
    ],
    "end": [
      58,
      7
    ],
    "line": "@public\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      58,
      7
    ],
    "end": [
      59,
      0
    ],
    "line": "@public\n"
  },
  {
    "typ": "OP",
    "string": "@",
    "start": [
      59,
      0
    ],
    "end": [
      59,
      1
    ],
    "line": "@constant\n"
  },
  {
    "typ": "NAME",
    "string": "constant",
    "start": [
      59,
      1
    ],
    "end": [
      59,
      9
    ],
    "line": "@constant\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      59,
      9
    ],
    "end": [
      60,
      0
    ],
    "line": "@constant\n"
  },
  {
    "typ": "NAME",
    "string": "def",
    "start": [
      60,
      0
    ],
    "end": [
      60,
      3
    ],
    "line": "def get_deposit_count() -> bytes[8]:\n"
  },
  {
    "typ": "NAME",
    "string": "get_deposit_count",
    "start": [
      60,
      4
    ],
    "end": [
      60,
      21
    ],
    "line": "def get_deposit_count() -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      60,
      21
    ],
    "end": [
      60,
      22
    ],
    "line": "def get_deposit_count() -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      60,
      22
    ],
    "end": [
      60,
      23
    ],
    "line": "def get_deposit_count() -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": "->",
    "start": [
      60,
      24
    ],
    "end": [
      60,
      26
    ],
    "line": "def get_deposit_count() -> bytes[8]:\n"
  },
  {
    "typ": "NAME",
    "string": "bytes",
    "start": [
      60,
      27
    ],
    "end": [
      60,
      32
    ],
    "line": "def get_deposit_count() -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      60,
      32
    ],
    "end": [
      60,
      33
    ],
    "line": "def get_deposit_count() -> bytes[8]:\n"
  },
  {
    "typ": "NUMBER",
    "string": "8",
    "start": [
      60,
      33
    ],
    "end": [
      60,
      34
    ],
    "line": "def get_deposit_count() -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      60,
      34
    ],
    "end": [
      60,
      35
    ],
    "line": "def get_deposit_count() -> bytes[8]:\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      60,
      35
    ],
    "end": [
      60,
      36
    ],
    "line": "def get_deposit_count() -> bytes[8]:\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      60,
      36
    ],
    "end": [
      61,
      0
    ],
    "line": "def get_deposit_count() -> bytes[8]:\n"
  },
  {
    "typ": "INDENT",
    "string": "    ",
    "start": [
      61,
      0
    ],
    "end": [
      61,
      4
    ],
    "line": "    return self.to_little_endian_64(self.deposit_count)\n"
  },
  {
    "typ": "NAME",
    "string": "return",
    "start": [
      61,
      4
    ],
    "end": [
      61,
      10
    ],
    "line": "    return self.to_little_endian_64(self.deposit_count)\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      61,
      11
    ],
    "end": [
      61,
      15
    ],
    "line": "    return self.to_little_endian_64(self.deposit_count)\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      61,
      15
    ],
    "end": [
      61,
      16
    ],
    "line": "    return self.to_little_endian_64(self.deposit_count)\n"
  },
  {
    "typ": "NAME",
    "string": "to_little_endian_64",
    "start": [
      61,
      16
    ],
    "end": [
      61,
      35
    ],
    "line": "    return self.to_little_endian_64(self.deposit_count)\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      61,
      35
    ],
    "end": [
      61,
      36
    ],
    "line": "    return self.to_little_endian_64(self.deposit_count)\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      61,
      36
    ],
    "end": [
      61,
      40
    ],
    "line": "    return self.to_little_endian_64(self.deposit_count)\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      61,
      40
    ],
    "end": [
      61,
      41
    ],
    "line": "    return self.to_little_endian_64(self.deposit_count)\n"
  },
  {
    "typ": "NAME",
    "string": "deposit_count",
    "start": [
      61,
      41
    ],
    "end": [
      61,
      54
    ],
    "line": "    return self.to_little_endian_64(self.deposit_count)\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      61,
      54
    ],
    "end": [
      61,
      55
    ],
    "line": "    return self.to_little_endian_64(self.deposit_count)\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      61,
      55
    ],
    "end": [
      62,
      0
    ],
    "line": "    return self.to_little_endian_64(self.deposit_count)\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      62,
      0
    ],
    "end": [
      63,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      63,
      0
    ],
    "end": [
      64,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      64,
      0
    ],
    "end": [
      64,
      0
    ],
    "line": "@payable\n"
  },
  {
    "typ": "OP",
    "string": "@",
    "start": [
      64,
      0
    ],
    "end": [
      64,
      1
    ],
    "line": "@payable\n"
  },
  {
    "typ": "NAME",
    "string": "payable",
    "start": [
      64,
      1
    ],
    "end": [
      64,
      8
    ],
    "line": "@payable\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      64,
      8
    ],
    "end": [
      65,
      0
    ],
    "line": "@payable\n"
  },
  {
    "typ": "OP",
    "string": "@",
    "start": [
      65,
      0
    ],
    "end": [
      65,
      1
    ],
    "line": "@public\n"
  },
  {
    "typ": "NAME",
    "string": "public",
    "start": [
      65,
      1
    ],
    "end": [
      65,
      7
    ],
    "line": "@public\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      65,
      7
    ],
    "end": [
      66,
      0
    ],
    "line": "@public\n"
  },
  {
    "typ": "NAME",
    "string": "def",
    "start": [
      66,
      0
    ],
    "end": [
      66,
      3
    ],
    "line": "def deposit(pubkey: bytes[PUBKEY_LENGTH],\n"
  },
  {
    "typ": "NAME",
    "string": "deposit",
    "start": [
      66,
      4
    ],
    "end": [
      66,
      11
    ],
    "line": "def deposit(pubkey: bytes[PUBKEY_LENGTH],\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      66,
      11
    ],
    "end": [
      66,
      12
    ],
    "line": "def deposit(pubkey: bytes[PUBKEY_LENGTH],\n"
  },
  {
    "typ": "NAME",
    "string": "pubkey",
    "start": [
      66,
      12
    ],
    "end": [
      66,
      18
    ],
    "line": "def deposit(pubkey: bytes[PUBKEY_LENGTH],\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      66,
      18
    ],
    "end": [
      66,
      19
    ],
    "line": "def deposit(pubkey: bytes[PUBKEY_LENGTH],\n"
  },
  {
    "typ": "NAME",
    "string": "bytes",
    "start": [
      66,
      20
    ],
    "end": [
      66,
      25
    ],
    "line": "def deposit(pubkey: bytes[PUBKEY_LENGTH],\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      66,
      25
    ],
    "end": [
      66,
      26
    ],
    "line": "def deposit(pubkey: bytes[PUBKEY_LENGTH],\n"
  },
  {
    "typ": "NAME",
    "string": "PUBKEY_LENGTH",
    "start": [
      66,
      26
    ],
    "end": [
      66,
      39
    ],
    "line": "def deposit(pubkey: bytes[PUBKEY_LENGTH],\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      66,
      39
    ],
    "end": [
      66,
      40
    ],
    "line": "def deposit(pubkey: bytes[PUBKEY_LENGTH],\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      66,
      40
    ],
    "end": [
      66,
      41
    ],
    "line": "def deposit(pubkey: bytes[PUBKEY_LENGTH],\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      66,
      41
    ],
    "end": [
      67,
      0
    ],
    "line": "def deposit(pubkey: bytes[PUBKEY_LENGTH],\n"
  },
  {
    "typ": "NAME",
    "string": "withdrawal_credentials",
    "start": [
      67,
      12
    ],
    "end": [
      67,
      34
    ],
    "line": "            withdrawal_credentials: bytes[WITHDRAWAL_CREDENTIALS_LENGTH],\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      67,
      34
    ],
    "end": [
      67,
      35
    ],
    "line": "            withdrawal_credentials: bytes[WITHDRAWAL_CREDENTIALS_LENGTH],\n"
  },
  {
    "typ": "NAME",
    "string": "bytes",
    "start": [
      67,
      36
    ],
    "end": [
      67,
      41
    ],
    "line": "            withdrawal_credentials: bytes[WITHDRAWAL_CREDENTIALS_LENGTH],\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      67,
      41
    ],
    "end": [
      67,
      42
    ],
    "line": "            withdrawal_credentials: bytes[WITHDRAWAL_CREDENTIALS_LENGTH],\n"
  },
  {
    "typ": "NAME",
    "string": "WITHDRAWAL_CREDENTIALS_LENGTH",
    "start": [
      67,
      42
    ],
    "end": [
      67,
      71
    ],
    "line": "            withdrawal_credentials: bytes[WITHDRAWAL_CREDENTIALS_LENGTH],\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      67,
      71
    ],
    "end": [
      67,
      72
    ],
    "line": "            withdrawal_credentials: bytes[WITHDRAWAL_CREDENTIALS_LENGTH],\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      67,
      72
    ],
    "end": [
      67,
      73
    ],
    "line": "            withdrawal_credentials: bytes[WITHDRAWAL_CREDENTIALS_LENGTH],\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      67,
      73
    ],
    "end": [
      68,
      0
    ],
    "line": "            withdrawal_credentials: bytes[WITHDRAWAL_CREDENTIALS_LENGTH],\n"
  },
  {
    "typ": "NAME",
    "string": "signature",
    "start": [
      68,
      12
    ],
    "end": [
      68,
      21
    ],
    "line": "            signature: bytes[SIGNATURE_LENGTH]):\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      68,
      21
    ],
    "end": [
      68,
      22
    ],
    "line": "            signature: bytes[SIGNATURE_LENGTH]):\n"
  },
  {
    "typ": "NAME",
    "string": "bytes",
    "start": [
      68,
      23
    ],
    "end": [
      68,
      28
    ],
    "line": "            signature: bytes[SIGNATURE_LENGTH]):\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      68,
      28
    ],
    "end": [
      68,
      29
    ],
    "line": "            signature: bytes[SIGNATURE_LENGTH]):\n"
  },
  {
    "typ": "NAME",
    "string": "SIGNATURE_LENGTH",
    "start": [
      68,
      29
    ],
    "end": [
      68,
      45
    ],
    "line": "            signature: bytes[SIGNATURE_LENGTH]):\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      68,
      45
    ],
    "end": [
      68,
      46
    ],
    "line": "            signature: bytes[SIGNATURE_LENGTH]):\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      68,
      46
    ],
    "end": [
      68,
      47
    ],
    "line": "            signature: bytes[SIGNATURE_LENGTH]):\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      68,
      47
    ],
    "end": [
      68,
      48
    ],
    "line": "            signature: bytes[SIGNATURE_LENGTH]):\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      68,
      48
    ],
    "end": [
      69,
      0
    ],
    "line": "            signature: bytes[SIGNATURE_LENGTH]):\n"
  },
  {
    "typ": "COMMENT",
    "string": "# Avoid overflowing the Merkle tree (and prevent edge case in computing `self.branch`)",
    "start": [
      69,
      4
    ],
    "end": [
      69,
      90
    ],
    "line": "    # Avoid overflowing the Merkle tree (and prevent edge case in computing `self.branch`)\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      69,
      90
    ],
    "end": [
      70,
      0
    ],
    "line": "    # Avoid overflowing the Merkle tree (and prevent edge case in computing `self.branch`)\n"
  },
  {
    "typ": "INDENT",
    "string": "    ",
    "start": [
      70,
      0
    ],
    "end": [
      70,
      4
    ],
    "line": "    assert self.deposit_count < MAX_DEPOSIT_COUNT\n"
  },
  {
    "typ": "NAME",
    "string": "assert",
    "start": [
      70,
      4
    ],
    "end": [
      70,
      10
    ],
    "line": "    assert self.deposit_count < MAX_DEPOSIT_COUNT\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      70,
      11
    ],
    "end": [
      70,
      15
    ],
    "line": "    assert self.deposit_count < MAX_DEPOSIT_COUNT\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      70,
      15
    ],
    "end": [
      70,
      16
    ],
    "line": "    assert self.deposit_count < MAX_DEPOSIT_COUNT\n"
  },
  {
    "typ": "NAME",
    "string": "deposit_count",
    "start": [
      70,
      16
    ],
    "end": [
      70,
      29
    ],
    "line": "    assert self.deposit_count < MAX_DEPOSIT_COUNT\n"
  },
  {
    "typ": "OP",
    "string": "<",
    "start": [
      70,
      30
    ],
    "end": [
      70,
      31
    ],
    "line": "    assert self.deposit_count < MAX_DEPOSIT_COUNT\n"
  },
  {
    "typ": "NAME",
    "string": "MAX_DEPOSIT_COUNT",
    "start": [
      70,
      32
    ],
    "end": [
      70,
      49
    ],
    "line": "    assert self.deposit_count < MAX_DEPOSIT_COUNT\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      70,
      49
    ],
    "end": [
      71,
      0
    ],
    "line": "    assert self.deposit_count < MAX_DEPOSIT_COUNT\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      71,
      0
    ],
    "end": [
      72,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "COMMENT",
    "string": "# Validate deposit data",
    "start": [
      72,
      4
    ],
    "end": [
      72,
      27
    ],
    "line": "    # Validate deposit data\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      72,
      27
    ],
    "end": [
      73,
      0
    ],
    "line": "    # Validate deposit data\n"
  },
  {
    "typ": "NAME",
    "string": "deposit_amount",
    "start": [
      73,
      4
    ],
    "end": [
      73,
      18
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      73,
      18
    ],
    "end": [
      73,
      19
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      73,
      20
    ],
    "end": [
      73,
      24
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      73,
      25
    ],
    "end": [
      73,
      26
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "NAME",
    "string": "msg",
    "start": [
      73,
      27
    ],
    "end": [
      73,
      30
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      73,
      30
    ],
    "end": [
      73,
      31
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "NAME",
    "string": "value",
    "start": [
      73,
      31
    ],
    "end": [
      73,
      36
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "OP",
    "string": "/",
    "start": [
      73,
      37
    ],
    "end": [
      73,
      38
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "NAME",
    "string": "as_wei_value",
    "start": [
      73,
      39
    ],
    "end": [
      73,
      51
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      73,
      51
    ],
    "end": [
      73,
      52
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "NUMBER",
    "string": "1",
    "start": [
      73,
      52
    ],
    "end": [
      73,
      53
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      73,
      53
    ],
    "end": [
      73,
      54
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "STRING",
    "string": "\"gwei\"",
    "start": [
      73,
      55
    ],
    "end": [
      73,
      61
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      73,
      61
    ],
    "end": [
      73,
      62
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      73,
      62
    ],
    "end": [
      74,
      0
    ],
    "line": "    deposit_amount: u256 = msg.value / as_wei_value(1, \"gwei\")\n"
  },
  {
    "typ": "NAME",
    "string": "assert",
    "start": [
      74,
      4
    ],
    "end": [
      74,
      10
    ],
    "line": "    assert deposit_amount >= MIN_DEPOSIT_AMOUNT\n"
  },
  {
    "typ": "NAME",
    "string": "deposit_amount",
    "start": [
      74,
      11
    ],
    "end": [
      74,
      25
    ],
    "line": "    assert deposit_amount >= MIN_DEPOSIT_AMOUNT\n"
  },
  {
    "typ": "OP",
    "string": ">=",
    "start": [
      74,
      26
    ],
    "end": [
      74,
      28
    ],
    "line": "    assert deposit_amount >= MIN_DEPOSIT_AMOUNT\n"
  },
  {
    "typ": "NAME",
    "string": "MIN_DEPOSIT_AMOUNT",
    "start": [
      74,
      29
    ],
    "end": [
      74,
      47
    ],
    "line": "    assert deposit_amount >= MIN_DEPOSIT_AMOUNT\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      74,
      47
    ],
    "end": [
      75,
      0
    ],
    "line": "    assert deposit_amount >= MIN_DEPOSIT_AMOUNT\n"
  },
  {
    "typ": "NAME",
    "string": "assert",
    "start": [
      75,
      4
    ],
    "end": [
      75,
      10
    ],
    "line": "    assert len(pubkey) == PUBKEY_LENGTH\n"
  },
  {
    "typ": "NAME",
    "string": "len",
    "start": [
      75,
      11
    ],
    "end": [
      75,
      14
    ],
    "line": "    assert len(pubkey) == PUBKEY_LENGTH\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      75,
      14
    ],
    "end": [
      75,
      15
    ],
    "line": "    assert len(pubkey) == PUBKEY_LENGTH\n"
  },
  {
    "typ": "NAME",
    "string": "pubkey",
    "start": [
      75,
      15
    ],
    "end": [
      75,
      21
    ],
    "line": "    assert len(pubkey) == PUBKEY_LENGTH\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      75,
      21
    ],
    "end": [
      75,
      22
    ],
    "line": "    assert len(pubkey) == PUBKEY_LENGTH\n"
  },
  {
    "typ": "OP",
    "string": "==",
    "start": [
      75,
      23
    ],
    "end": [
      75,
      25
    ],
    "line": "    assert len(pubkey) == PUBKEY_LENGTH\n"
  },
  {
    "typ": "NAME",
    "string": "PUBKEY_LENGTH",
    "start": [
      75,
      26
    ],
    "end": [
      75,
      39
    ],
    "line": "    assert len(pubkey) == PUBKEY_LENGTH\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      75,
      39
    ],
    "end": [
      76,
      0
    ],
    "line": "    assert len(pubkey) == PUBKEY_LENGTH\n"
  },
  {
    "typ": "NAME",
    "string": "assert",
    "start": [
      76,
      4
    ],
    "end": [
      76,
      10
    ],
    "line": "    assert len(withdrawal_credentials) == WITHDRAWAL_CREDENTIALS_LENGTH\n"
  },
  {
    "typ": "NAME",
    "string": "len",
    "start": [
      76,
      11
    ],
    "end": [
      76,
      14
    ],
    "line": "    assert len(withdrawal_credentials) == WITHDRAWAL_CREDENTIALS_LENGTH\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      76,
      14
    ],
    "end": [
      76,
      15
    ],
    "line": "    assert len(withdrawal_credentials) == WITHDRAWAL_CREDENTIALS_LENGTH\n"
  },
  {
    "typ": "NAME",
    "string": "withdrawal_credentials",
    "start": [
      76,
      15
    ],
    "end": [
      76,
      37
    ],
    "line": "    assert len(withdrawal_credentials) == WITHDRAWAL_CREDENTIALS_LENGTH\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      76,
      37
    ],
    "end": [
      76,
      38
    ],
    "line": "    assert len(withdrawal_credentials) == WITHDRAWAL_CREDENTIALS_LENGTH\n"
  },
  {
    "typ": "OP",
    "string": "==",
    "start": [
      76,
      39
    ],
    "end": [
      76,
      41
    ],
    "line": "    assert len(withdrawal_credentials) == WITHDRAWAL_CREDENTIALS_LENGTH\n"
  },
  {
    "typ": "NAME",
    "string": "WITHDRAWAL_CREDENTIALS_LENGTH",
    "start": [
      76,
      42
    ],
    "end": [
      76,
      71
    ],
    "line": "    assert len(withdrawal_credentials) == WITHDRAWAL_CREDENTIALS_LENGTH\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      76,
      71
    ],
    "end": [
      77,
      0
    ],
    "line": "    assert len(withdrawal_credentials) == WITHDRAWAL_CREDENTIALS_LENGTH\n"
  },
  {
    "typ": "NAME",
    "string": "assert",
    "start": [
      77,
      4
    ],
    "end": [
      77,
      10
    ],
    "line": "    assert len(signature) == SIGNATURE_LENGTH\n"
  },
  {
    "typ": "NAME",
    "string": "len",
    "start": [
      77,
      11
    ],
    "end": [
      77,
      14
    ],
    "line": "    assert len(signature) == SIGNATURE_LENGTH\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      77,
      14
    ],
    "end": [
      77,
      15
    ],
    "line": "    assert len(signature) == SIGNATURE_LENGTH\n"
  },
  {
    "typ": "NAME",
    "string": "signature",
    "start": [
      77,
      15
    ],
    "end": [
      77,
      24
    ],
    "line": "    assert len(signature) == SIGNATURE_LENGTH\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      77,
      24
    ],
    "end": [
      77,
      25
    ],
    "line": "    assert len(signature) == SIGNATURE_LENGTH\n"
  },
  {
    "typ": "OP",
    "string": "==",
    "start": [
      77,
      26
    ],
    "end": [
      77,
      28
    ],
    "line": "    assert len(signature) == SIGNATURE_LENGTH\n"
  },
  {
    "typ": "NAME",
    "string": "SIGNATURE_LENGTH",
    "start": [
      77,
      29
    ],
    "end": [
      77,
      45
    ],
    "line": "    assert len(signature) == SIGNATURE_LENGTH\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      77,
      45
    ],
    "end": [
      78,
      0
    ],
    "line": "    assert len(signature) == SIGNATURE_LENGTH\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      78,
      0
    ],
    "end": [
      79,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "COMMENT",
    "string": "# Emit `DepositEvent` log",
    "start": [
      79,
      4
    ],
    "end": [
      79,
      29
    ],
    "line": "    # Emit `DepositEvent` log\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      79,
      29
    ],
    "end": [
      80,
      0
    ],
    "line": "    # Emit `DepositEvent` log\n"
  },
  {
    "typ": "NAME",
    "string": "amount",
    "start": [
      80,
      4
    ],
    "end": [
      80,
      10
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      80,
      10
    ],
    "end": [
      80,
      11
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "NAME",
    "string": "bytes",
    "start": [
      80,
      12
    ],
    "end": [
      80,
      17
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      80,
      17
    ],
    "end": [
      80,
      18
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "NUMBER",
    "string": "8",
    "start": [
      80,
      18
    ],
    "end": [
      80,
      19
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      80,
      19
    ],
    "end": [
      80,
      20
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      80,
      21
    ],
    "end": [
      80,
      22
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      80,
      23
    ],
    "end": [
      80,
      27
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      80,
      27
    ],
    "end": [
      80,
      28
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "NAME",
    "string": "to_little_endian_64",
    "start": [
      80,
      28
    ],
    "end": [
      80,
      47
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      80,
      47
    ],
    "end": [
      80,
      48
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "NAME",
    "string": "deposit_amount",
    "start": [
      80,
      48
    ],
    "end": [
      80,
      62
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      80,
      62
    ],
    "end": [
      80,
      63
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      80,
      63
    ],
    "end": [
      81,
      0
    ],
    "line": "    amount: bytes[8] = self.to_little_endian_64(deposit_amount)\n"
  },
  {
    "typ": "NAME",
    "string": "log",
    "start": [
      81,
      4
    ],
    "end": [
      81,
      7
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      81,
      7
    ],
    "end": [
      81,
      8
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "NAME",
    "string": "DepositEvent",
    "start": [
      81,
      8
    ],
    "end": [
      81,
      20
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      81,
      20
    ],
    "end": [
      81,
      21
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "NAME",
    "string": "pubkey",
    "start": [
      81,
      21
    ],
    "end": [
      81,
      27
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      81,
      27
    ],
    "end": [
      81,
      28
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "NAME",
    "string": "withdrawal_credentials",
    "start": [
      81,
      29
    ],
    "end": [
      81,
      51
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      81,
      51
    ],
    "end": [
      81,
      52
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "NAME",
    "string": "amount",
    "start": [
      81,
      53
    ],
    "end": [
      81,
      59
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      81,
      59
    ],
    "end": [
      81,
      60
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "NAME",
    "string": "signature",
    "start": [
      81,
      61
    ],
    "end": [
      81,
      70
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      81,
      70
    ],
    "end": [
      81,
      71
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      81,
      72
    ],
    "end": [
      81,
      76
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      81,
      76
    ],
    "end": [
      81,
      77
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "NAME",
    "string": "to_little_endian_64",
    "start": [
      81,
      77
    ],
    "end": [
      81,
      96
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      81,
      96
    ],
    "end": [
      81,
      97
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      81,
      97
    ],
    "end": [
      81,
      101
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      81,
      101
    ],
    "end": [
      81,
      102
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "NAME",
    "string": "deposit_count",
    "start": [
      81,
      102
    ],
    "end": [
      81,
      115
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      81,
      115
    ],
    "end": [
      81,
      116
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      81,
      116
    ],
    "end": [
      81,
      117
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      81,
      117
    ],
    "end": [
      82,
      0
    ],
    "line": "    log.DepositEvent(pubkey, withdrawal_credentials, amount, signature, self.to_little_endian_64(self.deposit_count))\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      82,
      0
    ],
    "end": [
      83,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "COMMENT",
    "string": "# Compute `DepositData` hash tree root",
    "start": [
      83,
      4
    ],
    "end": [
      83,
      42
    ],
    "line": "    # Compute `DepositData` hash tree root\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      83,
      42
    ],
    "end": [
      84,
      0
    ],
    "line": "    # Compute `DepositData` hash tree root\n"
  },
  {
    "typ": "NAME",
    "string": "zero_bytes32",
    "start": [
      84,
      4
    ],
    "end": [
      84,
      16
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      84,
      16
    ],
    "end": [
      84,
      17
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "NAME",
    "string": "bytes32",
    "start": [
      84,
      18
    ],
    "end": [
      84,
      25
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      84,
      26
    ],
    "end": [
      84,
      27
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "NUMBER",
    "string": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "start": [
      84,
      28
    ],
    "end": [
      84,
      94
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      84,
      94
    ],
    "end": [
      85,
      0
    ],
    "line": "    zero_bytes32: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\n"
  },
  {
    "typ": "NAME",
    "string": "pubkey_root",
    "start": [
      85,
      4
    ],
    "end": [
      85,
      15
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      85,
      15
    ],
    "end": [
      85,
      16
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NAME",
    "string": "bytes32",
    "start": [
      85,
      17
    ],
    "end": [
      85,
      24
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      85,
      25
    ],
    "end": [
      85,
      26
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      85,
      27
    ],
    "end": [
      85,
      33
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      85,
      33
    ],
    "end": [
      85,
      34
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NAME",
    "string": "concat",
    "start": [
      85,
      34
    ],
    "end": [
      85,
      40
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      85,
      40
    ],
    "end": [
      85,
      41
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NAME",
    "string": "pubkey",
    "start": [
      85,
      41
    ],
    "end": [
      85,
      47
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      85,
      47
    ],
    "end": [
      85,
      48
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NAME",
    "string": "slice",
    "start": [
      85,
      49
    ],
    "end": [
      85,
      54
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      85,
      54
    ],
    "end": [
      85,
      55
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NAME",
    "string": "zero_bytes32",
    "start": [
      85,
      55
    ],
    "end": [
      85,
      67
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      85,
      67
    ],
    "end": [
      85,
      68
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NAME",
    "string": "start",
    "start": [
      85,
      69
    ],
    "end": [
      85,
      74
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      85,
      74
    ],
    "end": [
      85,
      75
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NUMBER",
    "string": "0",
    "start": [
      85,
      75
    ],
    "end": [
      85,
      76
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      85,
      76
    ],
    "end": [
      85,
      77
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NAME",
    "string": "len",
    "start": [
      85,
      78
    ],
    "end": [
      85,
      81
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      85,
      81
    ],
    "end": [
      85,
      82
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NUMBER",
    "string": "64",
    "start": [
      85,
      82
    ],
    "end": [
      85,
      84
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": "-",
    "start": [
      85,
      85
    ],
    "end": [
      85,
      86
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NAME",
    "string": "PUBKEY_LENGTH",
    "start": [
      85,
      87
    ],
    "end": [
      85,
      100
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      85,
      100
    ],
    "end": [
      85,
      101
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      85,
      101
    ],
    "end": [
      85,
      102
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      85,
      102
    ],
    "end": [
      85,
      103
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      85,
      103
    ],
    "end": [
      86,
      0
    ],
    "line": "    pubkey_root: bytes32 = sha256(concat(pubkey, slice(zero_bytes32, start=0, len=64 - PUBKEY_LENGTH)))\n"
  },
  {
    "typ": "NAME",
    "string": "signature_root",
    "start": [
      86,
      4
    ],
    "end": [
      86,
      18
    ],
    "line": "    signature_root: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      86,
      18
    ],
    "end": [
      86,
      19
    ],
    "line": "    signature_root: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "NAME",
    "string": "bytes32",
    "start": [
      86,
      20
    ],
    "end": [
      86,
      27
    ],
    "line": "    signature_root: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      86,
      28
    ],
    "end": [
      86,
      29
    ],
    "line": "    signature_root: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      86,
      30
    ],
    "end": [
      86,
      36
    ],
    "line": "    signature_root: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      86,
      36
    ],
    "end": [
      86,
      37
    ],
    "line": "    signature_root: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "NAME",
    "string": "concat",
    "start": [
      86,
      37
    ],
    "end": [
      86,
      43
    ],
    "line": "    signature_root: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      86,
      43
    ],
    "end": [
      86,
      44
    ],
    "line": "    signature_root: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      86,
      44
    ],
    "end": [
      87,
      0
    ],
    "line": "    signature_root: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      87,
      8
    ],
    "end": [
      87,
      14
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      87,
      14
    ],
    "end": [
      87,
      15
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "NAME",
    "string": "slice",
    "start": [
      87,
      15
    ],
    "end": [
      87,
      20
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      87,
      20
    ],
    "end": [
      87,
      21
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "NAME",
    "string": "signature",
    "start": [
      87,
      21
    ],
    "end": [
      87,
      30
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      87,
      30
    ],
    "end": [
      87,
      31
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "NAME",
    "string": "start",
    "start": [
      87,
      32
    ],
    "end": [
      87,
      37
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      87,
      37
    ],
    "end": [
      87,
      38
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "NUMBER",
    "string": "0",
    "start": [
      87,
      38
    ],
    "end": [
      87,
      39
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      87,
      39
    ],
    "end": [
      87,
      40
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "NAME",
    "string": "len",
    "start": [
      87,
      41
    ],
    "end": [
      87,
      44
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      87,
      44
    ],
    "end": [
      87,
      45
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "NUMBER",
    "string": "64",
    "start": [
      87,
      45
    ],
    "end": [
      87,
      47
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      87,
      47
    ],
    "end": [
      87,
      48
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      87,
      48
    ],
    "end": [
      87,
      49
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      87,
      49
    ],
    "end": [
      87,
      50
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      87,
      50
    ],
    "end": [
      88,
      0
    ],
    "line": "        sha256(slice(signature, start=0, len=64)),\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      88,
      8
    ],
    "end": [
      88,
      14
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      88,
      14
    ],
    "end": [
      88,
      15
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "NAME",
    "string": "concat",
    "start": [
      88,
      15
    ],
    "end": [
      88,
      21
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      88,
      21
    ],
    "end": [
      88,
      22
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "NAME",
    "string": "slice",
    "start": [
      88,
      22
    ],
    "end": [
      88,
      27
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      88,
      27
    ],
    "end": [
      88,
      28
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "NAME",
    "string": "signature",
    "start": [
      88,
      28
    ],
    "end": [
      88,
      37
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      88,
      37
    ],
    "end": [
      88,
      38
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "NAME",
    "string": "start",
    "start": [
      88,
      39
    ],
    "end": [
      88,
      44
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      88,
      44
    ],
    "end": [
      88,
      45
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "NUMBER",
    "string": "64",
    "start": [
      88,
      45
    ],
    "end": [
      88,
      47
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      88,
      47
    ],
    "end": [
      88,
      48
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "NAME",
    "string": "len",
    "start": [
      88,
      49
    ],
    "end": [
      88,
      52
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      88,
      52
    ],
    "end": [
      88,
      53
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "NAME",
    "string": "SIGNATURE_LENGTH",
    "start": [
      88,
      53
    ],
    "end": [
      88,
      69
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": "-",
    "start": [
      88,
      70
    ],
    "end": [
      88,
      71
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "NUMBER",
    "string": "64",
    "start": [
      88,
      72
    ],
    "end": [
      88,
      74
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      88,
      74
    ],
    "end": [
      88,
      75
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      88,
      75
    ],
    "end": [
      88,
      76
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "NAME",
    "string": "zero_bytes32",
    "start": [
      88,
      77
    ],
    "end": [
      88,
      89
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      88,
      89
    ],
    "end": [
      88,
      90
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      88,
      90
    ],
    "end": [
      88,
      91
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      88,
      91
    ],
    "end": [
      88,
      92
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      88,
      92
    ],
    "end": [
      89,
      0
    ],
    "line": "        sha256(concat(slice(signature, start=64, len=SIGNATURE_LENGTH - 64), zero_bytes32)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      89,
      4
    ],
    "end": [
      89,
      5
    ],
    "line": "    ))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      89,
      5
    ],
    "end": [
      89,
      6
    ],
    "line": "    ))\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      89,
      6
    ],
    "end": [
      90,
      0
    ],
    "line": "    ))\n"
  },
  {
    "typ": "NAME",
    "string": "node",
    "start": [
      90,
      4
    ],
    "end": [
      90,
      8
    ],
    "line": "    node: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      90,
      8
    ],
    "end": [
      90,
      9
    ],
    "line": "    node: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "NAME",
    "string": "bytes32",
    "start": [
      90,
      10
    ],
    "end": [
      90,
      17
    ],
    "line": "    node: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      90,
      18
    ],
    "end": [
      90,
      19
    ],
    "line": "    node: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      90,
      20
    ],
    "end": [
      90,
      26
    ],
    "line": "    node: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      90,
      26
    ],
    "end": [
      90,
      27
    ],
    "line": "    node: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "NAME",
    "string": "concat",
    "start": [
      90,
      27
    ],
    "end": [
      90,
      33
    ],
    "line": "    node: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      90,
      33
    ],
    "end": [
      90,
      34
    ],
    "line": "    node: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      90,
      34
    ],
    "end": [
      91,
      0
    ],
    "line": "    node: bytes32 = sha256(concat(\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      91,
      8
    ],
    "end": [
      91,
      14
    ],
    "line": "        sha256(concat(pubkey_root, withdrawal_credentials)),\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      91,
      14
    ],
    "end": [
      91,
      15
    ],
    "line": "        sha256(concat(pubkey_root, withdrawal_credentials)),\n"
  },
  {
    "typ": "NAME",
    "string": "concat",
    "start": [
      91,
      15
    ],
    "end": [
      91,
      21
    ],
    "line": "        sha256(concat(pubkey_root, withdrawal_credentials)),\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      91,
      21
    ],
    "end": [
      91,
      22
    ],
    "line": "        sha256(concat(pubkey_root, withdrawal_credentials)),\n"
  },
  {
    "typ": "NAME",
    "string": "pubkey_root",
    "start": [
      91,
      22
    ],
    "end": [
      91,
      33
    ],
    "line": "        sha256(concat(pubkey_root, withdrawal_credentials)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      91,
      33
    ],
    "end": [
      91,
      34
    ],
    "line": "        sha256(concat(pubkey_root, withdrawal_credentials)),\n"
  },
  {
    "typ": "NAME",
    "string": "withdrawal_credentials",
    "start": [
      91,
      35
    ],
    "end": [
      91,
      57
    ],
    "line": "        sha256(concat(pubkey_root, withdrawal_credentials)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      91,
      57
    ],
    "end": [
      91,
      58
    ],
    "line": "        sha256(concat(pubkey_root, withdrawal_credentials)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      91,
      58
    ],
    "end": [
      91,
      59
    ],
    "line": "        sha256(concat(pubkey_root, withdrawal_credentials)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      91,
      59
    ],
    "end": [
      91,
      60
    ],
    "line": "        sha256(concat(pubkey_root, withdrawal_credentials)),\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      91,
      60
    ],
    "end": [
      92,
      0
    ],
    "line": "        sha256(concat(pubkey_root, withdrawal_credentials)),\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      92,
      8
    ],
    "end": [
      92,
      14
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      92,
      14
    ],
    "end": [
      92,
      15
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "NAME",
    "string": "concat",
    "start": [
      92,
      15
    ],
    "end": [
      92,
      21
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      92,
      21
    ],
    "end": [
      92,
      22
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "NAME",
    "string": "amount",
    "start": [
      92,
      22
    ],
    "end": [
      92,
      28
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      92,
      28
    ],
    "end": [
      92,
      29
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "NAME",
    "string": "slice",
    "start": [
      92,
      30
    ],
    "end": [
      92,
      35
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      92,
      35
    ],
    "end": [
      92,
      36
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "NAME",
    "string": "zero_bytes32",
    "start": [
      92,
      36
    ],
    "end": [
      92,
      48
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      92,
      48
    ],
    "end": [
      92,
      49
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "NAME",
    "string": "start",
    "start": [
      92,
      50
    ],
    "end": [
      92,
      55
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      92,
      55
    ],
    "end": [
      92,
      56
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "NUMBER",
    "string": "0",
    "start": [
      92,
      56
    ],
    "end": [
      92,
      57
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      92,
      57
    ],
    "end": [
      92,
      58
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "NAME",
    "string": "len",
    "start": [
      92,
      59
    ],
    "end": [
      92,
      62
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      92,
      62
    ],
    "end": [
      92,
      63
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "NUMBER",
    "string": "32",
    "start": [
      92,
      63
    ],
    "end": [
      92,
      65
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": "-",
    "start": [
      92,
      66
    ],
    "end": [
      92,
      67
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "NAME",
    "string": "AMOUNT_LENGTH",
    "start": [
      92,
      68
    ],
    "end": [
      92,
      81
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      92,
      81
    ],
    "end": [
      92,
      82
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      92,
      82
    ],
    "end": [
      92,
      83
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "NAME",
    "string": "signature_root",
    "start": [
      92,
      84
    ],
    "end": [
      92,
      98
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      92,
      98
    ],
    "end": [
      92,
      99
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      92,
      99
    ],
    "end": [
      92,
      100
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      92,
      100
    ],
    "end": [
      92,
      101
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      92,
      101
    ],
    "end": [
      93,
      0
    ],
    "line": "        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      93,
      4
    ],
    "end": [
      93,
      5
    ],
    "line": "    ))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      93,
      5
    ],
    "end": [
      93,
      6
    ],
    "line": "    ))\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      93,
      6
    ],
    "end": [
      94,
      0
    ],
    "line": "    ))\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      94,
      0
    ],
    "end": [
      95,
      0
    ],
    "line": "\n"
  },
  {
    "typ": "COMMENT",
    "string": "# Add `DepositData` hash tree root to Merkle tree (update a single `branch` node)",
    "start": [
      95,
      4
    ],
    "end": [
      95,
      85
    ],
    "line": "    # Add `DepositData` hash tree root to Merkle tree (update a single `branch` node)\n"
  },
  {
    "typ": "NL",
    "string": "\n",
    "start": [
      95,
      85
    ],
    "end": [
      96,
      0
    ],
    "line": "    # Add `DepositData` hash tree root to Merkle tree (update a single `branch` node)\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      96,
      4
    ],
    "end": [
      96,
      8
    ],
    "line": "    self.deposit_count += 1\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      96,
      8
    ],
    "end": [
      96,
      9
    ],
    "line": "    self.deposit_count += 1\n"
  },
  {
    "typ": "NAME",
    "string": "deposit_count",
    "start": [
      96,
      9
    ],
    "end": [
      96,
      22
    ],
    "line": "    self.deposit_count += 1\n"
  },
  {
    "typ": "OP",
    "string": "+=",
    "start": [
      96,
      23
    ],
    "end": [
      96,
      25
    ],
    "line": "    self.deposit_count += 1\n"
  },
  {
    "typ": "NUMBER",
    "string": "1",
    "start": [
      96,
      26
    ],
    "end": [
      96,
      27
    ],
    "line": "    self.deposit_count += 1\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      96,
      27
    ],
    "end": [
      97,
      0
    ],
    "line": "    self.deposit_count += 1\n"
  },
  {
    "typ": "NAME",
    "string": "size",
    "start": [
      97,
      4
    ],
    "end": [
      97,
      8
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      97,
      8
    ],
    "end": [
      97,
      9
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "NAME",
    "string": "u256",
    "start": [
      97,
      10
    ],
    "end": [
      97,
      14
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      97,
      15
    ],
    "end": [
      97,
      16
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      97,
      17
    ],
    "end": [
      97,
      21
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      97,
      21
    ],
    "end": [
      97,
      22
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "NAME",
    "string": "deposit_count",
    "start": [
      97,
      22
    ],
    "end": [
      97,
      35
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      97,
      35
    ],
    "end": [
      98,
      0
    ],
    "line": "    size: u256 = self.deposit_count\n"
  },
  {
    "typ": "NAME",
    "string": "for",
    "start": [
      98,
      4
    ],
    "end": [
      98,
      7
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "NAME",
    "string": "height",
    "start": [
      98,
      8
    ],
    "end": [
      98,
      14
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "NAME",
    "string": "in",
    "start": [
      98,
      15
    ],
    "end": [
      98,
      17
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "NAME",
    "string": "range",
    "start": [
      98,
      18
    ],
    "end": [
      98,
      23
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      98,
      23
    ],
    "end": [
      98,
      24
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "NAME",
    "string": "DEPOSIT_CONTRACT_TREE_DEPTH",
    "start": [
      98,
      24
    ],
    "end": [
      98,
      51
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      98,
      51
    ],
    "end": [
      98,
      52
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      98,
      52
    ],
    "end": [
      98,
      53
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      98,
      53
    ],
    "end": [
      99,
      0
    ],
    "line": "    for height in range(DEPOSIT_CONTRACT_TREE_DEPTH):\n"
  },
  {
    "typ": "INDENT",
    "string": "        ",
    "start": [
      99,
      0
    ],
    "end": [
      99,
      8
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NAME",
    "string": "if",
    "start": [
      99,
      8
    ],
    "end": [
      99,
      10
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NAME",
    "string": "bitwise_and",
    "start": [
      99,
      11
    ],
    "end": [
      99,
      22
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      99,
      22
    ],
    "end": [
      99,
      23
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NAME",
    "string": "size",
    "start": [
      99,
      23
    ],
    "end": [
      99,
      27
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      99,
      27
    ],
    "end": [
      99,
      28
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NUMBER",
    "string": "1",
    "start": [
      99,
      29
    ],
    "end": [
      99,
      30
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      99,
      30
    ],
    "end": [
      99,
      31
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "OP",
    "string": "==",
    "start": [
      99,
      32
    ],
    "end": [
      99,
      34
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NUMBER",
    "string": "1",
    "start": [
      99,
      35
    ],
    "end": [
      99,
      36
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "OP",
    "string": ":",
    "start": [
      99,
      36
    ],
    "end": [
      99,
      37
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "COMMENT",
    "string": "# More gas efficient than `size % 2 == 1`",
    "start": [
      99,
      39
    ],
    "end": [
      99,
      80
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      99,
      80
    ],
    "end": [
      100,
      0
    ],
    "line": "        if bitwise_and(size, 1) == 1:  # More gas efficient than `size % 2 == 1`\n"
  },
  {
    "typ": "INDENT",
    "string": "            ",
    "start": [
      100,
      0
    ],
    "end": [
      100,
      12
    ],
    "line": "            self.branch[height] = node\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      100,
      12
    ],
    "end": [
      100,
      16
    ],
    "line": "            self.branch[height] = node\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      100,
      16
    ],
    "end": [
      100,
      17
    ],
    "line": "            self.branch[height] = node\n"
  },
  {
    "typ": "NAME",
    "string": "branch",
    "start": [
      100,
      17
    ],
    "end": [
      100,
      23
    ],
    "line": "            self.branch[height] = node\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      100,
      23
    ],
    "end": [
      100,
      24
    ],
    "line": "            self.branch[height] = node\n"
  },
  {
    "typ": "NAME",
    "string": "height",
    "start": [
      100,
      24
    ],
    "end": [
      100,
      30
    ],
    "line": "            self.branch[height] = node\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      100,
      30
    ],
    "end": [
      100,
      31
    ],
    "line": "            self.branch[height] = node\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      100,
      32
    ],
    "end": [
      100,
      33
    ],
    "line": "            self.branch[height] = node\n"
  },
  {
    "typ": "NAME",
    "string": "node",
    "start": [
      100,
      34
    ],
    "end": [
      100,
      38
    ],
    "line": "            self.branch[height] = node\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      100,
      38
    ],
    "end": [
      101,
      0
    ],
    "line": "            self.branch[height] = node\n"
  },
  {
    "typ": "NAME",
    "string": "break",
    "start": [
      101,
      12
    ],
    "end": [
      101,
      17
    ],
    "line": "            break\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      101,
      17
    ],
    "end": [
      102,
      0
    ],
    "line": "            break\n"
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      102,
      8
    ],
    "end": [
      102,
      8
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "node",
    "start": [
      102,
      8
    ],
    "end": [
      102,
      12
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": "=",
    "start": [
      102,
      13
    ],
    "end": [
      102,
      14
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "sha256",
    "start": [
      102,
      15
    ],
    "end": [
      102,
      21
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      102,
      21
    ],
    "end": [
      102,
      22
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "concat",
    "start": [
      102,
      22
    ],
    "end": [
      102,
      28
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": "(",
    "start": [
      102,
      28
    ],
    "end": [
      102,
      29
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "self",
    "start": [
      102,
      29
    ],
    "end": [
      102,
      33
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": ".",
    "start": [
      102,
      33
    ],
    "end": [
      102,
      34
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "branch",
    "start": [
      102,
      34
    ],
    "end": [
      102,
      40
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": "[",
    "start": [
      102,
      40
    ],
    "end": [
      102,
      41
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "height",
    "start": [
      102,
      41
    ],
    "end": [
      102,
      47
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": "]",
    "start": [
      102,
      47
    ],
    "end": [
      102,
      48
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": ",",
    "start": [
      102,
      48
    ],
    "end": [
      102,
      49
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "node",
    "start": [
      102,
      50
    ],
    "end": [
      102,
      54
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      102,
      54
    ],
    "end": [
      102,
      55
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "OP",
    "string": ")",
    "start": [
      102,
      55
    ],
    "end": [
      102,
      56
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NEWLINE",
    "string": "\n",
    "start": [
      102,
      56
    ],
    "end": [
      103,
      0
    ],
    "line": "        node = sha256(concat(self.branch[height], node))\n"
  },
  {
    "typ": "NAME",
    "string": "size",
    "start": [
      103,
      8
    ],
    "end": [
      103,
      12
    ],
    "line": "        size /= 2"
  },
  {
    "typ": "OP",
    "string": "/=",
    "start": [
      103,
      13
    ],
    "end": [
      103,
      15
    ],
    "line": "        size /= 2"
  },
  {
    "typ": "NUMBER",
    "string": "2",
    "start": [
      103,
      16
    ],
    "end": [
      103,
      17
    ],
    "line": "        size /= 2"
  },
  {
    "typ": "NEWLINE",
    "string": "",
    "start": [
      103,
      17
    ],
    "end": [
      103,
      17
    ],
    "line": ""
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      103,
      17
    ],
    "end": [
      103,
      17
    ],
    "line": ""
  },
  {
    "typ": "DEDENT",
    "string": "",
    "start": [
      103,
      17
    ],
    "end": [
      103,
      17
    ],
    "line": ""
  },
  {
    "typ": "ENDMARKER",
    "string": "",
    "start": [
      103,
      17
    ],
    "end": [
      103,
      17
    ],
    "line": ""
  }
]

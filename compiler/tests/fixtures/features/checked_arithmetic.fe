contract CheckedArithmetic:

    pub def add_u256(left: u256, right: u256) -> u256:
        return left + right

    pub def add_u128(left: u128, right: u128) -> u128:
        return left + right

    pub def add_u64(left: u64, right: u64) -> u64:
        return left + right

    pub def add_u32(left: u32, right: u32) -> u32:
        return left + right

    pub def add_u16(left: u16, right: u16) -> u16:
        return left + right

    pub def add_u8(left: u8, right: u8) -> u8:
        return left + right

    pub def add_i256(left: i256, right: i256) -> i256:
        return left + right

    pub def add_i128(left: i128, right: i128) -> i128:
        return left + right

    pub def add_i64(left: i64, right: i64) -> i64:
        return left + right

    pub def add_i32(left: i32, right: i32) -> i32:
        return left + right

    pub def add_i16(left: i16, right: i16) -> i16:
        return left + right

    pub def add_i8(left: i8, right: i8) -> i8:
        return left + right

    pub def sub_u256(left: u256, right: u256) -> u256:
        return left - right

    pub def sub_u128(left: u128, right: u128) -> u128:
        return left - right

    pub def sub_u64(left: u64, right: u64) -> u64:
        return left - right

    pub def sub_u32(left: u32, right: u32) -> u32:
        return left - right

    pub def sub_u16(left: u16, right: u16) -> u16:
        return left - right

    pub def sub_u8(left: u8, right: u8) -> u8:
        return left - right

    pub def sub_i256(left: i256, right: i256) -> i256:
        return left - right

    pub def sub_i128(left: i128, right: i128) -> i128:
        return left - right

    pub def sub_i64(left: i64, right: i64) -> i64:
        return left - right

    pub def sub_i32(left: i32, right: i32) -> i32:
        return left - right

    pub def sub_i16(left: i16, right: i16) -> i16:
        return left - right

    pub def sub_i8(left: i8, right: i8) -> i8:
        return left - right

    pub def div_u256(left: u256, right: u256) -> u256:
        return left / right

    pub def div_u128(left: u128, right: u128) -> u128:
        return left / right

    pub def div_u64(left: u64, right: u64) -> u64:
        return left / right

    pub def div_u32(left: u32, right: u32) -> u32:
        return left / right

    pub def div_u16(left: u16, right: u16) -> u16:
        return left / right

    pub def div_u8(left: u8, right: u8) -> u8:
        return left / right

    pub def div_i256(left: i256, right: i256) -> i256:
        return left / right

    pub def div_i128(left: i128, right: i128) -> i128:
        return left / right

    pub def div_i64(left: i64, right: i64) -> i64:
        return left / right

    pub def div_i32(left: i32, right: i32) -> i32:
        return left / right

    pub def div_i16(left: i16, right: i16) -> i16:
        return left / right

    pub def div_i8(left: i8, right: i8) -> i8:
        return left / right

    pub def mul_u256(left: u256, right: u256) -> u256:
        return left * right

    pub def mul_u128(left: u128, right: u128) -> u128:
        return left * right

    pub def mul_u64(left: u64, right: u64) -> u64:
        return left * right

    pub def mul_u32(left: u32, right: u32) -> u32:
        return left * right

    pub def mul_u16(left: u16, right: u16) -> u16:
        return left * right

    pub def mul_u8(left: u8, right: u8) -> u8:
        return left * right

    pub def mul_i256(left: i256, right: i256) -> i256:
        return left * right

    pub def mul_i128(left: i128, right: i128) -> i128:
        return left * right

    pub def mul_i64(left: i64, right: i64) -> i64:
        return left * right

    pub def mul_i32(left: i32, right: i32) -> i32:
        return left * right

    pub def mul_i16(left: i16, right: i16) -> i16:
        return left * right

    pub def mul_i8(left: i8, right: i8) -> i8:
        return left * right

    pub def mod_u256(left: u256, right: u256) -> u256:
        return left % right

    pub def mod_u128(left: u128, right: u128) -> u128:
        return left % right

    pub def mod_u64(left: u64, right: u64) -> u64:
        return left % right

    pub def mod_u32(left: u32, right: u32) -> u32:
        return left % right

    pub def mod_u16(left: u16, right: u16) -> u16:
        return left % right

    pub def mod_u8(left: u8, right: u8) -> u8:
        return left % right

    pub def mod_i256(left: i256, right: i256) -> i256:
        return left % right

    pub def mod_i128(left: i128, right: i128) -> i128:
        return left % right

    pub def mod_i64(left: i64, right: i64) -> i64:
        return left % right

    pub def mod_i32(left: i32, right: i32) -> i32:
        return left % right

    pub def mod_i16(left: i16, right: i16) -> i16:
        return left % right

    pub def mod_i8(left: i8, right: i8) -> i8:
        return left % right

    pub def pow_u256(left: u256, right: u256) -> u256:
        return left ** right

    pub def pow_u128(left: u128, right: u128) -> u128:
        return left ** right

    pub def pow_u64(left: u64, right: u64) -> u64:
        return left ** right

    pub def pow_u32(left: u32, right: u32) -> u32:
        return left ** right

    pub def pow_u16(left: u16, right: u16) -> u16:
        return left ** right

    pub def pow_u8(left: u8, right: u8) -> u8:
        return left ** right

    pub def pow_i256(left: i256, right: u256) -> i256:
        return left ** right

    pub def pow_i128(left: i128, right: u128) -> i128:
        return left ** right

    pub def pow_i64(left: i64, right: u64) -> i64:
        return left ** right

    pub def pow_i32(left: i32, right: u32) -> i32:
        return left ** right

    pub def pow_i16(left: i16, right: u16) -> i16:
        return left ** right

    pub def pow_i8(left: i8, right: u8) -> i8:
        return left ** right
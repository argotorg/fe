contract ERC20:
    _balances: Map<address, u256>
    _allowances: Map<address, Map<address, u256>>

    _total_supply: u256

    _name: String<100>
    _symbol: String<100>
    _decimals: u8

    event Approval:
        idx owner: address
        idx spender: address
        value: u256

    event Transfer:
        idx from: address
        idx to: address
        value: u256

    pub fn __init__(name: String<100>, symbol: String<100>):
        self._name = name
        self._symbol = symbol
        self._decimals = u8(18)
        self._mint(msg.sender, 1000000000000000000000000)

    pub fn name() -> String<100>:
        return self._name.to_mem()

    pub fn symbol() -> String<100>:
        return self._symbol.to_mem()

    pub fn decimals() -> u8:
        return self._decimals

    pub fn totalSupply() -> u256:
        return self._total_supply

    pub fn balanceOf(account: address) -> u256:
        return self._balances[account]

    pub fn transfer(recipient: address, value: u256) -> bool:
        self._transfer(msg.sender, recipient, value)
        return true

    pub fn allowance(owner: address, spender: address) -> u256:
        return self._allowances[owner][spender]

    pub fn approve(spender: address, value: u256) -> bool:
        self._approve(msg.sender, spender, value)
        return true

    pub fn transferFrom(sender: address, recipient: address, value: u256) -> bool:
        assert self._allowances[sender][msg.sender] >= value

        self._transfer(sender, recipient, value)
        self._approve(sender, msg.sender, self._allowances[sender][msg.sender] - value)
        return true

    pub fn increaseAllowance(spender: address, addedValue: u256) -> bool:
        self._approve(msg.sender, spender, self._allowances[msg.sender][spender] + addedValue)
        return true

    pub fn decreaseAllowance(spender: address, subtractedValue: u256) -> bool:
        self._approve(msg.sender, spender, self._allowances[msg.sender][spender] - subtractedValue)
        return true

    fn _transfer(sender: address, recipient: address, value: u256):
        assert sender != address(0)
        assert recipient != address(0)

        self._before_token_transfer(sender, recipient, value)

        self._balances[sender] = self._balances[sender] - value
        self._balances[recipient] = self._balances[recipient] + value
        emit Transfer(from: sender, to: recipient, value: value)

    fn _mint(account: address, value: u256):
        assert account != address(0)

        self._before_token_transfer(address(0), account, value)

        self._total_supply = self._total_supply + value
        self._balances[account] = self._balances[account] + value
        emit Transfer(from: address(0), to: account, value: value)

    fn _burn(account: address, value: u256):
        assert account != address(0)

        self._before_token_transfer(account, address(0), value)

        self._balances[account] = self._balances[account] - value
        self._total_supply = self._total_supply - value
        emit Transfer(from: account, to: address(0), value)

    fn _approve(owner: address, spender: address, value: u256):
        assert owner != address(0)
        assert spender != address(0)

        self._allowances[owner][spender] = value
        emit Approval(owner, spender, value)

    fn _setup_decimals(decimals_: u8):
        self._decimals = decimals_

    fn _before_token_transfer(from: address, to: address, value: u256):
        pass

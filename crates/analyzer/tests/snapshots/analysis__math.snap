---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
   ┌─ math.fe:4:5
   │  
 4 │ ╭     pub fn sqrt(val: u256) -> u256:
 5 │ │         let z: u256
 6 │ │         if (val > 3):
 7 │ │             z = val
   · │
13 │ │             z = 1
14 │ │         return z
   │ ╰────────────────^ attributes hash: 12367727332255217641
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 label: None,
                 name: "val",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
  ┌─ math.fe:5:16
  │
5 │         let z: u256
  │                ^^^^ u256
  ·
8 │             let x: u256 = val / 2 + 1
  │                    ^^^^ u256

note: 
  ┌─ math.fe:6:13
  │
6 │         if (val > 3):
  │             ^^^   ^ u256: Value
  │             │      
  │             u256: Value

note: 
  ┌─ math.fe:6:12
  │
6 │         if (val > 3):
  │            ^^^^^^^^^ bool: Value
7 │             z = val
  │             ^   ^^^ u256: Value
  │             │    
  │             u256: Value
8 │             let x: u256 = val / 2 + 1
  │                           ^^^   ^ u256: Value
  │                           │      
  │                           u256: Value

note: 
  ┌─ math.fe:8:27
  │
8 │             let x: u256 = val / 2 + 1
  │                           ^^^^^^^   ^ u256: Value
  │                           │          
  │                           u256: Value

note: 
  ┌─ math.fe:8:27
  │
8 │             let x: u256 = val / 2 + 1
  │                           ^^^^^^^^^^^ u256: Value
9 │             while (x < z):
  │                    ^   ^ u256: Value
  │                    │    
  │                    u256: Value

note: 
   ┌─ math.fe:9:19
   │
 9 │             while (x < z):
   │                   ^^^^^^^ bool: Value
10 │                 z = x
   │                 ^   ^ u256: Value
   │                 │    
   │                 u256: Value
11 │                 x = (val / x + x) / 2
   │                 ^    ^^^   ^ u256: Value
   │                 │    │      
   │                 │    u256: Value
   │                 u256: Value

note: 
   ┌─ math.fe:11:22
   │
11 │                 x = (val / x + x) / 2
   │                      ^^^^^^^   ^ u256: Value
   │                      │          
   │                      u256: Value

note: 
   ┌─ math.fe:11:21
   │
11 │                 x = (val / x + x) / 2
   │                     ^^^^^^^^^^^^^   ^ u256: Value
   │                     │                
   │                     u256: Value

note: 
   ┌─ math.fe:11:21
   │
11 │                 x = (val / x + x) / 2
   │                     ^^^^^^^^^^^^^^^^^ u256: Value
12 │         elif (val != 0):
   │               ^^^    ^ u256: Value
   │               │       
   │               u256: Value

note: 
   ┌─ math.fe:12:14
   │
12 │         elif (val != 0):
   │              ^^^^^^^^^^ bool: Value
13 │             z = 1
   │             ^   ^ u256: Value
   │             │    
   │             u256: Value
14 │         return z
   │                ^ u256: Value

note: 
   ┌─ math.fe:16:5
   │  
16 │ ╭     pub fn min(x: u256, y: u256) -> u256:
17 │ │         return x if x < y else y
   │ ╰────────────────────────────────^ attributes hash: 6847926207878778580
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 label: None,
                 name: "x",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "y",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ math.fe:17:21
   │
17 │         return x if x < y else y
   │                     ^   ^ u256: Value
   │                     │    
   │                     u256: Value

note: 
   ┌─ math.fe:17:16
   │
17 │         return x if x < y else y
   │                ^    ^^^^^      ^ u256: Value
   │                │    │           
   │                │    bool: Value
   │                u256: Value

note: 
   ┌─ math.fe:17:16
   │
17 │         return x if x < y else y
   │                ^^^^^^^^^^^^^^^^^ u256: Value



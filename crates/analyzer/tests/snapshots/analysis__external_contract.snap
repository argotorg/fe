---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ external_contract.fe:3:9
  │
3 │         my_num: u256
  │         ^^^^^^^^^^^^ u256
4 │         my_addrs: Array<address, 5>
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 5>
5 │         my_string: String<11>
  │         ^^^^^^^^^^^^^^^^^^^^^ String<11>

note: 
   ┌─ external_contract.fe:8:5
   │  
 8 │ ╭     pub fn emit_event(self, ctx: Context, my_num: u256, my_addrs: Array<address, 5>, my_string: String<11>) {
 9 │ │         emit MyEvent(ctx, my_num, my_addrs, my_string)
10 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: my_num, typ: u256 }, { label: None, name: my_addrs, typ: Array<address, 5> }, { label: None, name: my_string, typ: String<11> }] -> ()

note: 
  ┌─ external_contract.fe:9:22
  │
9 │         emit MyEvent(ctx, my_num, my_addrs, my_string)
  │                      ^^^  ^^^^^^  ^^^^^^^^  ^^^^^^^^^ String<11>
  │                      │    │       │          
  │                      │    │       Array<address, 5>
  │                      │    u256
  │                      Context

note: 
   ┌─ external_contract.fe:12:5
   │  
12 │ ╭     pub fn build_array(self, a: u256, b: u256) -> Array<u256, 3> {
13 │ │         let my_array: Array<u256, 3> = [0; 3]
14 │ │         my_array[0] = a
15 │ │         my_array[1] = a * b
16 │ │         my_array[2] = b
17 │ │         return my_array
18 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> Array<u256, 3>

note: 
   ┌─ external_contract.fe:13:13
   │
13 │         let my_array: Array<u256, 3> = [0; 3]
   │             ^^^^^^^^ Array<u256, 3>

note: 
   ┌─ external_contract.fe:13:41
   │
13 │         let my_array: Array<u256, 3> = [0; 3]
   │                                         ^  ^ u256
   │                                         │   
   │                                         u256

note: 
   ┌─ external_contract.fe:13:40
   │
13 │         let my_array: Array<u256, 3> = [0; 3]
   │                                        ^^^^^^ Array<u256, 3>
14 │         my_array[0] = a
   │         ^^^^^^^^ ^ u256
   │         │         
   │         Array<u256, 3>

note: 
   ┌─ external_contract.fe:14:9
   │
14 │         my_array[0] = a
   │         ^^^^^^^^^^^   ^ u256
   │         │              
   │         u256
15 │         my_array[1] = a * b
   │         ^^^^^^^^ ^ u256
   │         │         
   │         Array<u256, 3>

note: 
   ┌─ external_contract.fe:15:9
   │
15 │         my_array[1] = a * b
   │         ^^^^^^^^^^^   ^   ^ u256
   │         │             │    
   │         │             u256
   │         u256

note: 
   ┌─ external_contract.fe:15:23
   │
15 │         my_array[1] = a * b
   │                       ^^^^^ u256
16 │         my_array[2] = b
   │         ^^^^^^^^ ^ u256
   │         │         
   │         Array<u256, 3>

note: 
   ┌─ external_contract.fe:16:9
   │
16 │         my_array[2] = b
   │         ^^^^^^^^^^^   ^ u256
   │         │              
   │         u256
17 │         return my_array
   │                ^^^^^^^^ Array<u256, 3>

note: 
   ┌─ external_contract.fe:20:5
   │  
20 │ ╭     pub fn pure_add(_ x: u256, _ y: u256) -> u256 {
21 │ │         return x + y
22 │ │     }
   │ ╰─────^ self: None, params: [{ label: Some("_"), name: x, typ: u256 }, { label: Some("_"), name: y, typ: u256 }] -> u256

note: 
   ┌─ external_contract.fe:21:16
   │
21 │         return x + y
   │                ^   ^ u256
   │                │    
   │                u256

note: 
   ┌─ external_contract.fe:21:16
   │
21 │         return x + y
   │                ^^^^^ u256

note: 
   ┌─ external_contract.fe:26:5
   │  
26 │ ╭     pub fn call_emit_event(ctx: Context, foo_address: address, my_num: u256, my_addrs: Array<address, 5>, my_string: String<11>) {
27 │ │         let foo: Foo = Foo(foo_address)
28 │ │         foo.emit_event(ctx, my_num, my_addrs, my_string)
29 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: ctx, typ: Context }, { label: None, name: foo_address, typ: address }, { label: None, name: my_num, typ: u256 }, { label: None, name: my_addrs, typ: Array<address, 5> }, { label: None, name: my_string, typ: String<11> }] -> ()

note: 
   ┌─ external_contract.fe:27:13
   │
27 │         let foo: Foo = Foo(foo_address)
   │             ^^^ Foo

note: 
   ┌─ external_contract.fe:27:28
   │
27 │         let foo: Foo = Foo(foo_address)
   │                            ^^^^^^^^^^^ address

note: 
   ┌─ external_contract.fe:27:24
   │
27 │         let foo: Foo = Foo(foo_address)
   │                        ^^^^^^^^^^^^^^^^ Foo
28 │         foo.emit_event(ctx, my_num, my_addrs, my_string)
   │         ^^^            ^^^  ^^^^^^  ^^^^^^^^  ^^^^^^^^^ String<11>
   │         │              │    │       │          
   │         │              │    │       Array<address, 5>
   │         │              │    u256
   │         │              Context
   │         Foo

note: 
   ┌─ external_contract.fe:28:9
   │
28 │         foo.emit_event(ctx, my_num, my_addrs, my_string)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ external_contract.fe:31:5
   │  
31 │ ╭     pub fn call_build_array(foo_address: address, a: u256, b: u256) -> Array<u256, 3> {
32 │ │         let foo: Foo = Foo(foo_address)
33 │ │         return foo.build_array(a, b)
34 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: foo_address, typ: address }, { label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> Array<u256, 3>

note: 
   ┌─ external_contract.fe:32:13
   │
32 │         let foo: Foo = Foo(foo_address)
   │             ^^^ Foo

note: 
   ┌─ external_contract.fe:32:28
   │
32 │         let foo: Foo = Foo(foo_address)
   │                            ^^^^^^^^^^^ address

note: 
   ┌─ external_contract.fe:32:24
   │
32 │         let foo: Foo = Foo(foo_address)
   │                        ^^^^^^^^^^^^^^^^ Foo
33 │         return foo.build_array(a, b)
   │                ^^^             ^  ^ u256
   │                │               │   
   │                │               u256
   │                Foo

note: 
   ┌─ external_contract.fe:33:16
   │
33 │         return foo.build_array(a, b)
   │                ^^^^^^^^^^^^^^^^^^^^^ Array<u256, 3>

note: 
   ┌─ external_contract.fe:36:5
   │  
36 │ ╭     pub fn add(_ x: u256, _ y: u256) -> u256 {
37 │ │         return Foo::pure_add(x, y)
38 │ │     }
   │ ╰─────^ self: None, params: [{ label: Some("_"), name: x, typ: u256 }, { label: Some("_"), name: y, typ: u256 }] -> u256

note: 
   ┌─ external_contract.fe:37:30
   │
37 │         return Foo::pure_add(x, y)
   │                              ^  ^ u256
   │                              │   
   │                              u256

note: 
   ┌─ external_contract.fe:37:16
   │
37 │         return Foo::pure_add(x, y)
   │                ^^^^^^^^^^^^^^^^^^^ u256



---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ external_contract.fe:5:9
  │
5 │         my_num: u256
  │         ^^^^^^^^^^^^ u256
6 │         my_addrs: Array<address, 5>
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 5>
7 │         my_string: String<11>
  │         ^^^^^^^^^^^^^^^^^^^^^ String<11>

note: 
   ┌─ external_contract.fe:10:5
   │  
10 │ ╭     pub fn emit_event(ctx: Context, my_num: u256, my_addrs: Array<address, 5>, my_string: String<11>) {
11 │ │         emit MyEvent(ctx, my_num, my_addrs, my_string)
12 │ │     }
   │ ╰─────^ attributes hash: 14584319691445179306
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 label: None,
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "my_num",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "my_addrs",
                 typ: Ok(
                     Array(
                         Array {
                             size: 5,
                             inner: Address,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "my_string",
                 typ: Ok(
                     String(
                         FeString {
                             max_size: 11,
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ external_contract.fe:11:22
   │
11 │         emit MyEvent(ctx, my_num, my_addrs, my_string)
   │                      ^^^  ^^^^^^  ^^^^^^^^  ^^^^^^^^^ String<11>: Memory
   │                      │    │       │          
   │                      │    │       Array<address, 5>: Memory
   │                      │    u256: Value
   │                      Context: Memory

note: 
   ┌─ external_contract.fe:11:9
   │
11 │         emit MyEvent(ctx, my_num, my_addrs, my_string)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 3872046667435269452
   │
   = Event {
         name: "MyEvent",
         fields: [
             EventField {
                 name: "my_num",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
             EventField {
                 name: "my_addrs",
                 typ: Ok(
                     Array(
                         Array {
                             size: 5,
                             inner: Address,
                         },
                     ),
                 ),
                 is_indexed: false,
             },
             EventField {
                 name: "my_string",
                 typ: Ok(
                     String(
                         FeString {
                             max_size: 11,
                         },
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ external_contract.fe:14:5
   │  
14 │ ╭     pub fn build_array(a: u256, b: u256) -> Array<u256, 3> {
15 │ │         let my_array: Array<u256, 3>
16 │ │         my_array[0] = a
17 │ │         my_array[1] = a * b
18 │ │         my_array[2] = b
19 │ │         return my_array
20 │ │     }
   │ ╰─────^ attributes hash: 14276910879408601208
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 label: None,
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Array(
                 Array {
                     size: 3,
                     inner: Numeric(
                         U256,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ external_contract.fe:15:23
   │
15 │         let my_array: Array<u256, 3>
   │                       ^^^^^^^^^^^^^^ Array<u256, 3>

note: 
   ┌─ external_contract.fe:16:9
   │
16 │         my_array[0] = a
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 3>: Memory

note: 
   ┌─ external_contract.fe:16:9
   │
16 │         my_array[0] = a
   │         ^^^^^^^^^^^   ^ u256: Value
   │         │              
   │         u256: Memory
17 │         my_array[1] = a * b
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 3>: Memory

note: 
   ┌─ external_contract.fe:17:9
   │
17 │         my_array[1] = a * b
   │         ^^^^^^^^^^^   ^   ^ u256: Value
   │         │             │    
   │         │             u256: Value
   │         u256: Memory

note: 
   ┌─ external_contract.fe:17:23
   │
17 │         my_array[1] = a * b
   │                       ^^^^^ u256: Value
18 │         my_array[2] = b
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 3>: Memory

note: 
   ┌─ external_contract.fe:18:9
   │
18 │         my_array[2] = b
   │         ^^^^^^^^^^^   ^ u256: Value
   │         │              
   │         u256: Memory
19 │         return my_array
   │                ^^^^^^^^ Array<u256, 3>: Memory

note: 
   ┌─ external_contract.fe:24:5
   │  
24 │ ╭     pub fn call_emit_event(ctx: Context, foo_address: address, my_num: u256, my_addrs: Array<address, 5>, my_string: String<11>) {
25 │ │         let foo: Foo = Foo(ctx, foo_address)
26 │ │         foo.emit_event(my_num, my_addrs, my_string)
27 │ │     }
   │ ╰─────^ attributes hash: 11744736773867210426
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 label: None,
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "foo_address",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "my_num",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "my_addrs",
                 typ: Ok(
                     Array(
                         Array {
                             size: 5,
                             inner: Address,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "my_string",
                 typ: Ok(
                     String(
                         FeString {
                             max_size: 11,
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ external_contract.fe:25:18
   │
25 │         let foo: Foo = Foo(ctx, foo_address)
   │                  ^^^ Foo

note: 
   ┌─ external_contract.fe:25:28
   │
25 │         let foo: Foo = Foo(ctx, foo_address)
   │                            ^^^  ^^^^^^^^^^^ address: Value
   │                            │     
   │                            Context: Memory

note: 
   ┌─ external_contract.fe:25:24
   │
25 │         let foo: Foo = Foo(ctx, foo_address)
   │                        ^^^^^^^^^^^^^^^^^^^^^ Foo: Value
26 │         foo.emit_event(my_num, my_addrs, my_string)
   │         ^^^            ^^^^^^  ^^^^^^^^  ^^^^^^^^^ String<11>: Memory
   │         │              │       │          
   │         │              │       Array<address, 5>: Memory
   │         │              u256: Value
   │         Foo: Value

note: 
   ┌─ external_contract.fe:26:9
   │
26 │         foo.emit_event(my_num, my_addrs, my_string)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value

note: 
   ┌─ external_contract.fe:29:5
   │  
29 │ ╭     pub fn call_build_array(ctx: Context, foo_address: address, a: u256, b: u256) -> Array<u256, 3> {
30 │ │         let foo: Foo = Foo(ctx, foo_address)
31 │ │         return foo.build_array(a, b)
32 │ │     }
   │ ╰─────^ attributes hash: 14801245347360386258
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 label: None,
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "foo_address",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Array(
                 Array {
                     size: 3,
                     inner: Numeric(
                         U256,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ external_contract.fe:30:18
   │
30 │         let foo: Foo = Foo(ctx, foo_address)
   │                  ^^^ Foo

note: 
   ┌─ external_contract.fe:30:28
   │
30 │         let foo: Foo = Foo(ctx, foo_address)
   │                            ^^^  ^^^^^^^^^^^ address: Value
   │                            │     
   │                            Context: Memory

note: 
   ┌─ external_contract.fe:30:24
   │
30 │         let foo: Foo = Foo(ctx, foo_address)
   │                        ^^^^^^^^^^^^^^^^^^^^^ Foo: Value
31 │         return foo.build_array(a, b)
   │                ^^^             ^  ^ u256: Value
   │                │               │   
   │                │               u256: Value
   │                Foo: Value

note: 
   ┌─ external_contract.fe:31:16
   │
31 │         return foo.build_array(a, b)
   │                ^^^^^^^^^^^^^^^^^^^^^ Array<u256, 3>: Memory



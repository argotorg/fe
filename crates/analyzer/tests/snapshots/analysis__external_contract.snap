---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ external_contract.fe:5:9
  │
5 │         my_num: u256
  │         ^^^^^^^^^^^^ u256
6 │         my_addrs: Array<address, 5>
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 5>
7 │         my_string: String<11>
  │         ^^^^^^^^^^^^^^^^^^^^^ String<11>

note: 
   ┌─ external_contract.fe:10:5
   │  
10 │ ╭     pub fn emit_event(self, ctx: Context, my_num: u256, my_addrs: Array<address, 5>, my_string: String<11>) {
11 │ │         emit MyEvent(ctx, my_num, my_addrs, my_string)
12 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: my_num, typ: u256 }, { label: None, name: my_addrs, typ: Array<address, 5> }, { label: None, name: my_string, typ: String<11> }] -> ()

note: 
   ┌─ external_contract.fe:11:22
   │
11 │         emit MyEvent(ctx, my_num, my_addrs, my_string)
   │                      ^^^  ^^^^^^  ^^^^^^^^  ^^^^^^^^^ String<11>: Memory
   │                      │    │       │          
   │                      │    │       Array<address, 5>: Memory
   │                      │    u256: Value
   │                      Context: Memory

note: 
   ┌─ external_contract.fe:14:5
   │  
14 │ ╭     pub fn build_array(self, a: u256, b: u256) -> Array<u256, 3> {
15 │ │         let my_array: Array<u256, 3> = [0; 3]
16 │ │         my_array[0] = a
17 │ │         my_array[1] = a * b
18 │ │         my_array[2] = b
19 │ │         return my_array
20 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> Array<u256, 3>

note: 
   ┌─ external_contract.fe:15:13
   │
15 │         let my_array: Array<u256, 3> = [0; 3]
   │             ^^^^^^^^ Array<u256, 3>

note: 
   ┌─ external_contract.fe:15:41
   │
15 │         let my_array: Array<u256, 3> = [0; 3]
   │                                         ^  ^ u256: Value
   │                                         │   
   │                                         u256: Value

note: 
   ┌─ external_contract.fe:15:40
   │
15 │         let my_array: Array<u256, 3> = [0; 3]
   │                                        ^^^^^^ Array<u256, 3>: Memory
16 │         my_array[0] = a
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 3>: Memory

note: 
   ┌─ external_contract.fe:16:9
   │
16 │         my_array[0] = a
   │         ^^^^^^^^^^^   ^ u256: Value
   │         │              
   │         u256: Memory
17 │         my_array[1] = a * b
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 3>: Memory

note: 
   ┌─ external_contract.fe:17:9
   │
17 │         my_array[1] = a * b
   │         ^^^^^^^^^^^   ^   ^ u256: Value
   │         │             │    
   │         │             u256: Value
   │         u256: Memory

note: 
   ┌─ external_contract.fe:17:23
   │
17 │         my_array[1] = a * b
   │                       ^^^^^ u256: Value
18 │         my_array[2] = b
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 3>: Memory

note: 
   ┌─ external_contract.fe:18:9
   │
18 │         my_array[2] = b
   │         ^^^^^^^^^^^   ^ u256: Value
   │         │              
   │         u256: Memory
19 │         return my_array
   │                ^^^^^^^^ Array<u256, 3>: Memory

note: 
   ┌─ external_contract.fe:22:5
   │  
22 │ ╭     pub fn pure_add(_ x: u256, _ y: u256) -> u256 {
23 │ │         return x + y
24 │ │     }
   │ ╰─────^ self: None, params: [{ label: Some("_"), name: x, typ: u256 }, { label: Some("_"), name: y, typ: u256 }] -> u256

note: 
   ┌─ external_contract.fe:23:16
   │
23 │         return x + y
   │                ^   ^ u256: Value
   │                │    
   │                u256: Value

note: 
   ┌─ external_contract.fe:23:16
   │
23 │         return x + y
   │                ^^^^^ u256: Value

note: 
   ┌─ external_contract.fe:28:5
   │  
28 │ ╭     pub fn call_emit_event(ctx: Context, foo_address: address, my_num: u256, my_addrs: Array<address, 5>, my_string: String<11>) {
29 │ │         let foo: Foo = Foo(foo_address)
30 │ │         foo.emit_event(ctx, my_num, my_addrs, my_string)
31 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: ctx, typ: Context }, { label: None, name: foo_address, typ: address }, { label: None, name: my_num, typ: u256 }, { label: None, name: my_addrs, typ: Array<address, 5> }, { label: None, name: my_string, typ: String<11> }] -> ()

note: 
   ┌─ external_contract.fe:29:13
   │
29 │         let foo: Foo = Foo(foo_address)
   │             ^^^ Foo

note: 
   ┌─ external_contract.fe:29:28
   │
29 │         let foo: Foo = Foo(foo_address)
   │                            ^^^^^^^^^^^ address: Value

note: 
   ┌─ external_contract.fe:29:24
   │
29 │         let foo: Foo = Foo(foo_address)
   │                        ^^^^^^^^^^^^^^^^ Foo: Value
30 │         foo.emit_event(ctx, my_num, my_addrs, my_string)
   │         ^^^            ^^^  ^^^^^^  ^^^^^^^^  ^^^^^^^^^ String<11>: Memory
   │         │              │    │       │          
   │         │              │    │       Array<address, 5>: Memory
   │         │              │    u256: Value
   │         │              Context: Memory
   │         Foo: Value

note: 
   ┌─ external_contract.fe:30:9
   │
30 │         foo.emit_event(ctx, my_num, my_addrs, my_string)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value

note: 
   ┌─ external_contract.fe:33:5
   │  
33 │ ╭     pub fn call_build_array(foo_address: address, a: u256, b: u256) -> Array<u256, 3> {
34 │ │         let foo: Foo = Foo(foo_address)
35 │ │         return foo.build_array(a, b)
36 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: foo_address, typ: address }, { label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> Array<u256, 3>

note: 
   ┌─ external_contract.fe:34:13
   │
34 │         let foo: Foo = Foo(foo_address)
   │             ^^^ Foo

note: 
   ┌─ external_contract.fe:34:28
   │
34 │         let foo: Foo = Foo(foo_address)
   │                            ^^^^^^^^^^^ address: Value

note: 
   ┌─ external_contract.fe:34:24
   │
34 │         let foo: Foo = Foo(foo_address)
   │                        ^^^^^^^^^^^^^^^^ Foo: Value
35 │         return foo.build_array(a, b)
   │                ^^^             ^  ^ u256: Value
   │                │               │   
   │                │               u256: Value
   │                Foo: Value

note: 
   ┌─ external_contract.fe:35:16
   │
35 │         return foo.build_array(a, b)
   │                ^^^^^^^^^^^^^^^^^^^^^ Array<u256, 3>: Memory

note: 
   ┌─ external_contract.fe:38:5
   │  
38 │ ╭     pub fn add(_ x: u256, _ y: u256) -> u256 {
39 │ │         return Foo::pure_add(x, y)
40 │ │     }
   │ ╰─────^ self: None, params: [{ label: Some("_"), name: x, typ: u256 }, { label: Some("_"), name: y, typ: u256 }] -> u256

note: 
   ┌─ external_contract.fe:39:30
   │
39 │         return Foo::pure_add(x, y)
   │                              ^  ^ u256: Value
   │                              │   
   │                              u256: Value

note: 
   ┌─ external_contract.fe:39:16
   │
39 │         return Foo::pure_add(x, y)
   │                ^^^^^^^^^^^^^^^^^^^ u256: Value



---
source: crates/analyzer/tests/errors.rs
expression: "error_string(&path, test_files::fixture(path))"

---
error: cannot modify `self.x`, as it is not mutable
  ┌─ compile_errors/mut_mistakes.fe:6:9
  │
5 │     pub fn non_mut_self(self) {
  │                         ---- consider changing this to be mutable: `mut self`
6 │         self.x = 10 // self not mut
  │         ^^^^^^ not mutable

error: cannot modify `self.m[1]`, as it is not mutable
  ┌─ compile_errors/mut_mistakes.fe:7:9
  │
5 │     pub fn non_mut_self(self) {
  │                         ---- consider changing this to be mutable: `mut self`
6 │         self.x = 10 // self not mut
7 │         self.m[1] = 1
  │         ^^^^^^^^^ not mutable

error: cannot modify `x`, as it is not mutable
   ┌─ compile_errors/mut_mistakes.fe:13:4
   │
12 │    let x: u8 // TODO: suggest mut or init value
   │        - consider changing this to be mutable: `mut x`
13 │    x = 10
   │    ^ not mutable

error: `set_x` takes `mut self`
   ┌─ compile_errors/mut_mistakes.fe:18:4
   │
18 │    p.set_x(10) // ERROR
   │    ^ this is not mutable

error: cannot modify `p.x`, as it is not mutable
   ┌─ compile_errors/mut_mistakes.fe:19:4
   │
17 │    let p: Point = Point(x: 1, y: 2)
   │        - consider changing this to be mutable: `mut p`
18 │    p.set_x(10) // ERROR
19 │    p.x = 10
   │    ^^^ not mutable

error: cannot modify `p.y`, as it is not mutable
   ┌─ compile_errors/mut_mistakes.fe:20:4
   │
17 │    let p: Point = Point(x: 1, y: 2)
   │        - consider changing this to be mutable: `mut p`
   ·
20 │    p.y = 20
   │    ^^^ not mutable

error: cannot modify `t.item0`, as it is not mutable
   ┌─ compile_errors/mut_mistakes.fe:25:4
   │
24 │    let t: (u8, u8, u8) = (1, 2, 3)
   │        - consider changing this to be mutable: `mut t`
25 │    t.item0 = 10
   │    ^^^^^^^ not mutable

error: cannot modify `a[0]`, as it is not mutable
   ┌─ compile_errors/mut_mistakes.fe:30:4
   │
29 │    let a: Array<u8, 3> = [1, 2, 3]
   │        - consider changing this to be mutable: `mut a`
30 │    a[0] = 10
   │    ^^^^ not mutable

error: primitive type function parameters cannot be `mut`
   ┌─ compile_errors/mut_mistakes.fe:38:12
   │
38 │ fn add_one(mut _ x: u256) {
   │            ^^^^^^^^^^^^^ `u256` type can't be used as a `mut` function parameter

error: cannot modify `self.x`, as it is not mutable
   ┌─ compile_errors/mut_mistakes.fe:47:9
   │
46 │     pub fn non_mut_self(self) {
   │                         ---- consider changing this to be mutable: `mut self`
47 │         self.x *= 2
   │         ^^^^^^ not mutable

error: `move_stuff` argument `b` must be mutable
   ┌─ compile_errors/mut_mistakes.fe:70:18
   │
70 │    move_stuff(a, b) // ERROR
   │                  ^ is not `mut`



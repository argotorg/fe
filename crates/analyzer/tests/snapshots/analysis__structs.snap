---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ structs.fe:2:5
  │
2 │     pub x: u256
  │     ^^^^^^^^^^^ u256
3 │     pub y: u256
  │     ^^^^^^^^^^^ u256

note: 
  ┌─ structs.fe:6:5
  │
6 │     pub name: String<3>
  │     ^^^^^^^^^^^^^^^^^^^ String<3>
7 │     pub numbers: Array<u256, 2>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<u256, 2>
8 │     pub point: Point
  │     ^^^^^^^^^^^^^^^^ Point
9 │     pub something: (u256, bool)
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool)

note: 
   ┌─ structs.fe:12:5
   │
12 │     pub foo: u256
   │     ^^^^^^^^^^^^^ u256
13 │     bar: bool
   │     ^^^^^^^^^ bool

note: 
   ┌─ structs.fe:15:5
   │  
15 │ ╭     pub fn new(val: u256) -> Mixed:
16 │ │         return Mixed(foo: val, bar: false)
   │ ╰──────────────────────────────────────────^ attributes hash: 2524938698704972422
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 label: None,
                 name: "val",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Struct(
                 Struct {
                     name: "Mixed",
                     field_count: 2,
                 },
             ),
         ),
     }

note: 
   ┌─ structs.fe:16:27
   │
16 │         return Mixed(foo: val, bar: false)
   │                           ^^^       ^^^^^ bool: Value
   │                           │          
   │                           u256: Value

note: 
   ┌─ structs.fe:16:16
   │
16 │         return Mixed(foo: val, bar: false)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Mixed: Memory

note: 
   ┌─ structs.fe:19:5
   │
19 │     pub price: u256
   │     ^^^^^^^^^^^^^^^ u256
20 │     pub size: u256
   │     ^^^^^^^^^^^^^^ u256
21 │     pub rooms: u8
   │     ^^^^^^^^^^^^^ u8
22 │     pub vacant: bool
   │     ^^^^^^^^^^^^^^^^ bool

note: 
   ┌─ structs.fe:24:5
   │  
24 │ ╭     pub fn encode(self) -> Array<u8, 128>:
25 │ │         return self.abi_encode()
   │ ╰────────────────────────────────^ attributes hash: 2052929893622941907
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Array(
                 Array {
                     size: 128,
                     inner: Numeric(
                         U8,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ structs.fe:25:16
   │
25 │         return self.abi_encode()
   │                ^^^^ House: Memory

note: 
   ┌─ structs.fe:25:16
   │
25 │         return self.abi_encode()
   │                ^^^^^^^^^^^^^^^^^ Array<u8, 128>: Memory

note: 
   ┌─ structs.fe:27:5
   │  
27 │ ╭     pub fn hash(self) -> u256:
28 │ │         return keccak256(self.encode())
   │ ╰───────────────────────────────────────^ attributes hash: 11773348765973600208
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ structs.fe:28:26
   │
28 │         return keccak256(self.encode())
   │                          ^^^^ House: Memory

note: 
   ┌─ structs.fe:28:26
   │
28 │         return keccak256(self.encode())
   │                          ^^^^^^^^^^^^^ Array<u8, 128>: Memory

note: 
   ┌─ structs.fe:28:16
   │
28 │         return keccak256(self.encode())
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ structs.fe:30:5
   │  
30 │ ╭     pub fn price_per_sqft(self) -> u256:
31 │ │         return self.price / self.size
   │ ╰─────────────────────────────────────^ attributes hash: 11773348765973600208
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ structs.fe:31:16
   │
31 │         return self.price / self.size
   │                ^^^^ House: Memory

note: 
   ┌─ structs.fe:31:16
   │
31 │         return self.price / self.size
   │                ^^^^^^^^^^   ^^^^ House: Memory
   │                │             
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:31:29
   │
31 │         return self.price / self.size
   │                             ^^^^^^^^^ u256: Memory => Value

note: 
   ┌─ structs.fe:31:16
   │
31 │         return self.price / self.size
   │                ^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ structs.fe:33:5
   │  
33 │ ╭     pub fn expand(self):
34 │ │         self.rooms += 1
35 │ │         self.size += 100
   │ ╰────────────────────────^ attributes hash: 18235041182630809162
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ structs.fe:34:9
   │
34 │         self.rooms += 1
   │         ^^^^ House: Memory

note: 
   ┌─ structs.fe:34:9
   │
34 │         self.rooms += 1
   │         ^^^^^^^^^^    ^ u8: Value
   │         │              
   │         u8: Memory
35 │         self.size += 100
   │         ^^^^ House: Memory

note: 
   ┌─ structs.fe:35:9
   │
35 │         self.size += 100
   │         ^^^^^^^^^    ^^^ u256: Value
   │         │             
   │         u256: Memory

note: 
   ┌─ structs.fe:38:5
   │
38 │     my_house: House
   │     ^^^^^^^^^^^^^^^ House
39 │     my_bar: Bar
   │     ^^^^^^^^^^^ Bar

note: 
   ┌─ structs.fe:41:5
   │  
41 │ ╭     pub fn complex_struct_in_storage(self) -> String<3>:
42 │ │         self.my_bar = Bar(
43 │ │             name: "foo",
44 │ │             numbers: [1, 2],
   · │
86 │ │ 
87 │ │         return self.my_bar.name.to_mem()
   │ ╰────────────────────────────────────────^ attributes hash: 7100809906483982919
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             String(
                 FeString {
                     max_size: 3,
                 },
             ),
         ),
     }

note: 
   ┌─ structs.fe:42:9
   │
42 │         self.my_bar = Bar(
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:42:9
   │
42 │         self.my_bar = Bar(
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }
43 │             name: "foo",
   │                   ^^^^^ String<3>: Memory
44 │             numbers: [1, 2],
   │                       ^  ^ u256: Value
   │                       │   
   │                       u256: Value

note: 
   ┌─ structs.fe:44:22
   │
44 │             numbers: [1, 2],
   │                      ^^^^^^ Array<u256, 2>: Memory
45 │             point: Point(x: 100, y: 200),
   │                             ^^^     ^^^ u256: Value
   │                             │        
   │                             u256: Value

note: 
   ┌─ structs.fe:45:20
   │
45 │             point: Point(x: 100, y: 200),
   │                    ^^^^^^^^^^^^^^^^^^^^^ Point: Memory
46 │             something: (1, true),
   │                         ^  ^^^^ bool: Value
   │                         │   
   │                         u256: Value

note: 
   ┌─ structs.fe:46:24
   │
46 │             something: (1, true),
   │                        ^^^^^^^^^ (u256, bool): Memory

note: 
   ┌─ structs.fe:42:23
   │  
42 │           self.my_bar = Bar(
   │ ╭───────────────────────^
43 │ │             name: "foo",
44 │ │             numbers: [1, 2],
45 │ │             point: Point(x: 100, y: 200),
46 │ │             something: (1, true),
47 │ │         )
   │ ╰─────────^ Bar: Memory
   · │
50 │           assert self.my_bar.numbers[0] == 1
   │                  ^^^^ Foo: Value

note: 
   ┌─ structs.fe:50:16
   │
50 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:50:16
   │
50 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:50:16
   │
50 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:50:16
   │
50 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
51 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:51:16
   │
51 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:51:16
   │
51 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:51:16
   │
51 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:51:16
   │
51 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
52 │         assert self.my_bar.point.x == 100
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:52:16
   │
52 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:52:16
   │
52 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:52:16
   │
52 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^^^    ^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:52:16
   │
52 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
53 │         assert self.my_bar.point.y == 200
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:53:16
   │
53 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:53:16
   │
53 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:53:16
   │
53 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^^^    ^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:53:16
   │
53 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
54 │         assert self.my_bar.something.item0 == 1
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:54:16
   │
54 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:54:16
   │
54 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:54:16
   │
54 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                               
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:54:16
   │
54 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
55 │         assert self.my_bar.something.item1
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:55:16
   │
55 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:55:16
   │
55 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:55:16
   │
55 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(1) } => Value
   ·
58 │         self.my_bar.numbers[0] = 10
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:58:9
   │
58 │         self.my_bar.numbers[0] = 10
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:58:9
   │
58 │         self.my_bar.numbers[0] = 10
   │         ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │         │                    
   │         Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:58:9
   │
58 │         self.my_bar.numbers[0] = 10
   │         ^^^^^^^^^^^^^^^^^^^^^^   ^^ u256: Value
   │         │                         
   │         u256: Storage { nonce: None }
59 │         self.my_bar.numbers[1] = 20
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:59:9
   │
59 │         self.my_bar.numbers[1] = 20
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:59:9
   │
59 │         self.my_bar.numbers[1] = 20
   │         ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │         │                    
   │         Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:59:9
   │
59 │         self.my_bar.numbers[1] = 20
   │         ^^^^^^^^^^^^^^^^^^^^^^   ^^ u256: Value
   │         │                         
   │         u256: Storage { nonce: None }
60 │         assert self.my_bar.numbers[0] == 10
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:60:16
   │
60 │         assert self.my_bar.numbers[0] == 10
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:60:16
   │
60 │         assert self.my_bar.numbers[0] == 10
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:60:16
   │
60 │         assert self.my_bar.numbers[0] == 10
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:60:16
   │
60 │         assert self.my_bar.numbers[0] == 10
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
61 │         assert self.my_bar.numbers[1] == 20
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:61:16
   │
61 │         assert self.my_bar.numbers[1] == 20
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:61:16
   │
61 │         assert self.my_bar.numbers[1] == 20
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:61:16
   │
61 │         assert self.my_bar.numbers[1] == 20
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:61:16
   │
61 │         assert self.my_bar.numbers[1] == 20
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
62 │         # We can set the array itself
63 │         self.my_bar.numbers = [1, 2]
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:63:9
   │
63 │         self.my_bar.numbers = [1, 2]
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:63:9
   │
63 │         self.my_bar.numbers = [1, 2]
   │         ^^^^^^^^^^^^^^^^^^^    ^  ^ u256: Value
   │         │                      │   
   │         │                      u256: Value
   │         Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:63:31
   │
63 │         self.my_bar.numbers = [1, 2]
   │                               ^^^^^^ Array<u256, 2>: Memory
64 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:64:16
   │
64 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:64:16
   │
64 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:64:16
   │
64 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:64:16
   │
64 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
65 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:65:16
   │
65 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:65:16
   │
65 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:65:16
   │
65 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:65:16
   │
65 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
   ·
68 │         self.my_bar.point.x = 1000
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:68:9
   │
68 │         self.my_bar.point.x = 1000
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:68:9
   │
68 │         self.my_bar.point.x = 1000
   │         ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:68:9
   │
68 │         self.my_bar.point.x = 1000
   │         ^^^^^^^^^^^^^^^^^^^   ^^^^ u256: Value
   │         │                      
   │         u256: Storage { nonce: Some(1) }
69 │         self.my_bar.point.y = 2000
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:69:9
   │
69 │         self.my_bar.point.y = 2000
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:69:9
   │
69 │         self.my_bar.point.y = 2000
   │         ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:69:9
   │
69 │         self.my_bar.point.y = 2000
   │         ^^^^^^^^^^^^^^^^^^^   ^^^^ u256: Value
   │         │                      
   │         u256: Storage { nonce: Some(1) }
70 │         assert self.my_bar.point.x == 1000
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:70:16
   │
70 │         assert self.my_bar.point.x == 1000
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:70:16
   │
70 │         assert self.my_bar.point.x == 1000
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:70:16
   │
70 │         assert self.my_bar.point.x == 1000
   │                ^^^^^^^^^^^^^^^^^^^    ^^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:70:16
   │
70 │         assert self.my_bar.point.x == 1000
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
71 │         assert self.my_bar.point.y == 2000
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:71:16
   │
71 │         assert self.my_bar.point.y == 2000
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:71:16
   │
71 │         assert self.my_bar.point.y == 2000
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:71:16
   │
71 │         assert self.my_bar.point.y == 2000
   │                ^^^^^^^^^^^^^^^^^^^    ^^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:71:16
   │
71 │         assert self.my_bar.point.y == 2000
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
72 │         # We can set the point itself
73 │         self.my_bar.point = Point(x: 100, y: 200)
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:73:9
   │
73 │         self.my_bar.point = Point(x: 100, y: 200)
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:73:9
   │
73 │         self.my_bar.point = Point(x: 100, y: 200)
   │         ^^^^^^^^^^^^^^^^^            ^^^     ^^^ u256: Value
   │         │                            │        
   │         │                            u256: Value
   │         Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:73:29
   │
73 │         self.my_bar.point = Point(x: 100, y: 200)
   │                             ^^^^^^^^^^^^^^^^^^^^^ Point: Memory
74 │         assert self.my_bar.point.x == 100
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:74:16
   │
74 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:74:16
   │
74 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:74:16
   │
74 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^^^    ^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:74:16
   │
74 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
75 │         assert self.my_bar.point.y == 200
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:75:16
   │
75 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:75:16
   │
75 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:75:16
   │
75 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^^^    ^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:75:16
   │
75 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
   ·
78 │         self.my_bar.something.item0 = 10
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:78:9
   │
78 │         self.my_bar.something.item0 = 10
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:78:9
   │
78 │         self.my_bar.something.item0 = 10
   │         ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:78:9
   │
78 │         self.my_bar.something.item0 = 10
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^ u256: Value
   │         │                              
   │         u256: Storage { nonce: Some(1) }
79 │         self.my_bar.something.item1 = false
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:79:9
   │
79 │         self.my_bar.something.item1 = false
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:79:9
   │
79 │         self.my_bar.something.item1 = false
   │         ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:79:9
   │
79 │         self.my_bar.something.item1 = false
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ bool: Value
   │         │                              
   │         bool: Storage { nonce: Some(1) }
80 │         assert self.my_bar.something.item0 == 10
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:80:16
   │
80 │         assert self.my_bar.something.item0 == 10
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:80:16
   │
80 │         assert self.my_bar.something.item0 == 10
   │                ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:80:16
   │
80 │         assert self.my_bar.something.item0 == 10
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^ u256: Value
   │                │                               
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:80:16
   │
80 │         assert self.my_bar.something.item0 == 10
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
81 │         assert not self.my_bar.something.item1
   │                    ^^^^ Foo: Value

note: 
   ┌─ structs.fe:81:20
   │
81 │         assert not self.my_bar.something.item1
   │                    ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:81:20
   │
81 │         assert not self.my_bar.something.item1
   │                    ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:81:20
   │
81 │         assert not self.my_bar.something.item1
   │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:81:16
   │
81 │         assert not self.my_bar.something.item1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
82 │         # We can set the tuple itself
83 │         self.my_bar.something = (1, true)
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:83:9
   │
83 │         self.my_bar.something = (1, true)
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:83:9
   │
83 │         self.my_bar.something = (1, true)
   │         ^^^^^^^^^^^^^^^^^^^^^    ^  ^^^^ bool: Value
   │         │                        │   
   │         │                        u256: Value
   │         (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:83:33
   │
83 │         self.my_bar.something = (1, true)
   │                                 ^^^^^^^^^ (u256, bool): Memory
84 │         assert self.my_bar.something.item0 == 1
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:84:16
   │
84 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:84:16
   │
84 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:84:16
   │
84 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                               
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:84:16
   │
84 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
85 │         assert self.my_bar.something.item1
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:85:16
   │
85 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:85:16
   │
85 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:85:16
   │
85 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(1) } => Value
86 │ 
87 │         return self.my_bar.name.to_mem()
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:87:16
   │
87 │         return self.my_bar.name.to_mem()
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:87:16
   │
87 │         return self.my_bar.name.to_mem()
   │                ^^^^^^^^^^^^^^^^ String<3>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:87:16
   │
87 │         return self.my_bar.name.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^ String<3>: Storage { nonce: Some(1) } => Memory

note: 
    ┌─ structs.fe:89:5
    │  
 89 │ ╭     pub fn complex_struct_in_memory(self) -> String<3>:
 90 │ │         let val: Bar = Bar(
 91 │ │             name: "foo",
 92 │ │             numbers: [1, 2],
    · │
134 │ │ 
135 │ │         return val.name
    │ ╰───────────────────────^ attributes hash: 7100809906483982919
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: None,
          params: [],
          return_type: Ok(
              String(
                  FeString {
                      max_size: 3,
                  },
              ),
          ),
      }

note: 
   ┌─ structs.fe:90:18
   │
90 │         let val: Bar = Bar(
   │                  ^^^ Bar

note: 
   ┌─ structs.fe:91:19
   │
91 │             name: "foo",
   │                   ^^^^^ String<3>: Memory
92 │             numbers: [1, 2],
   │                       ^  ^ u256: Value
   │                       │   
   │                       u256: Value

note: 
   ┌─ structs.fe:92:22
   │
92 │             numbers: [1, 2],
   │                      ^^^^^^ Array<u256, 2>: Memory
93 │             point: Point(x: 100, y: 200),
   │                             ^^^     ^^^ u256: Value
   │                             │        
   │                             u256: Value

note: 
   ┌─ structs.fe:93:20
   │
93 │             point: Point(x: 100, y: 200),
   │                    ^^^^^^^^^^^^^^^^^^^^^ Point: Memory
94 │             something: (1, true),
   │                         ^  ^^^^ bool: Value
   │                         │   
   │                         u256: Value

note: 
   ┌─ structs.fe:94:24
   │
94 │             something: (1, true),
   │                        ^^^^^^^^^ (u256, bool): Memory

note: 
   ┌─ structs.fe:90:24
   │  
90 │           let val: Bar = Bar(
   │ ╭────────────────────────^
91 │ │             name: "foo",
92 │ │             numbers: [1, 2],
93 │ │             point: Point(x: 100, y: 200),
94 │ │             something: (1, true),
95 │ │         )
   │ ╰─────────^ Bar: Memory
   · │
98 │           assert val.numbers[0] == 1
   │                  ^^^ Bar: Memory

note: 
   ┌─ structs.fe:98:16
   │
98 │         assert val.numbers[0] == 1
   │                ^^^^^^^^^^^ ^ u256: Value
   │                │            
   │                Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:98:16
   │
98 │         assert val.numbers[0] == 1
   │                ^^^^^^^^^^^^^^    ^ u256: Value
   │                │                  
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:98:16
   │
98 │         assert val.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^ bool: Value
99 │         assert val.numbers[1] == 2
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:99:16
   │
99 │         assert val.numbers[1] == 2
   │                ^^^^^^^^^^^ ^ u256: Value
   │                │            
   │                Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:99:16
   │
99 │         assert val.numbers[1] == 2
   │                ^^^^^^^^^^^^^^    ^ u256: Value
   │                │                  
   │                u256: Memory => Value

note: 
    ┌─ structs.fe:99:16
    │
 99 │         assert val.numbers[1] == 2
    │                ^^^^^^^^^^^^^^^^^^^ bool: Value
100 │         assert val.point.x == 100
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:100:16
    │
100 │         assert val.point.x == 100
    │                ^^^^^^^^^ Point: Memory

note: 
    ┌─ structs.fe:100:16
    │
100 │         assert val.point.x == 100
    │                ^^^^^^^^^^^    ^^^ u256: Value
    │                │               
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:100:16
    │
100 │         assert val.point.x == 100
    │                ^^^^^^^^^^^^^^^^^^ bool: Value
101 │         assert val.point.y == 200
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:101:16
    │
101 │         assert val.point.y == 200
    │                ^^^^^^^^^ Point: Memory

note: 
    ┌─ structs.fe:101:16
    │
101 │         assert val.point.y == 200
    │                ^^^^^^^^^^^    ^^^ u256: Value
    │                │               
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:101:16
    │
101 │         assert val.point.y == 200
    │                ^^^^^^^^^^^^^^^^^^ bool: Value
102 │         assert val.something.item0 == 1
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:102:16
    │
102 │         assert val.something.item0 == 1
    │                ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:102:16
    │
102 │         assert val.something.item0 == 1
    │                ^^^^^^^^^^^^^^^^^^^    ^ u256: Value
    │                │                       
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:102:16
    │
102 │         assert val.something.item0 == 1
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
103 │         assert val.something.item1
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:103:16
    │
103 │         assert val.something.item1
    │                ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:103:16
    │
103 │         assert val.something.item1
    │                ^^^^^^^^^^^^^^^^^^^ bool: Memory => Value
    ·
106 │         val.numbers[0] = 10
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:106:9
    │
106 │         val.numbers[0] = 10
    │         ^^^^^^^^^^^ ^ u256: Value
    │         │            
    │         Array<u256, 2>: Memory

note: 
    ┌─ structs.fe:106:9
    │
106 │         val.numbers[0] = 10
    │         ^^^^^^^^^^^^^^   ^^ u256: Value
    │         │                 
    │         u256: Memory
107 │         val.numbers[1] = 20
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:107:9
    │
107 │         val.numbers[1] = 20
    │         ^^^^^^^^^^^ ^ u256: Value
    │         │            
    │         Array<u256, 2>: Memory

note: 
    ┌─ structs.fe:107:9
    │
107 │         val.numbers[1] = 20
    │         ^^^^^^^^^^^^^^   ^^ u256: Value
    │         │                 
    │         u256: Memory
108 │         assert val.numbers[0] == 10
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:108:16
    │
108 │         assert val.numbers[0] == 10
    │                ^^^^^^^^^^^ ^ u256: Value
    │                │            
    │                Array<u256, 2>: Memory

note: 
    ┌─ structs.fe:108:16
    │
108 │         assert val.numbers[0] == 10
    │                ^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                  
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:108:16
    │
108 │         assert val.numbers[0] == 10
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
109 │         assert val.numbers[1] == 20
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:109:16
    │
109 │         assert val.numbers[1] == 20
    │                ^^^^^^^^^^^ ^ u256: Value
    │                │            
    │                Array<u256, 2>: Memory

note: 
    ┌─ structs.fe:109:16
    │
109 │         assert val.numbers[1] == 20
    │                ^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                  
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:109:16
    │
109 │         assert val.numbers[1] == 20
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
110 │         # We can set the array itself
111 │         val.numbers = [1, 2]
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:111:9
    │
111 │         val.numbers = [1, 2]
    │         ^^^^^^^^^^^    ^  ^ u256: Value
    │         │              │   
    │         │              u256: Value
    │         Array<u256, 2>: Memory

note: 
    ┌─ structs.fe:111:23
    │
111 │         val.numbers = [1, 2]
    │                       ^^^^^^ Array<u256, 2>: Memory
112 │         assert val.numbers[0] == 1
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:112:16
    │
112 │         assert val.numbers[0] == 1
    │                ^^^^^^^^^^^ ^ u256: Value
    │                │            
    │                Array<u256, 2>: Memory

note: 
    ┌─ structs.fe:112:16
    │
112 │         assert val.numbers[0] == 1
    │                ^^^^^^^^^^^^^^    ^ u256: Value
    │                │                  
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:112:16
    │
112 │         assert val.numbers[0] == 1
    │                ^^^^^^^^^^^^^^^^^^^ bool: Value
113 │         assert val.numbers[1] == 2
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:113:16
    │
113 │         assert val.numbers[1] == 2
    │                ^^^^^^^^^^^ ^ u256: Value
    │                │            
    │                Array<u256, 2>: Memory

note: 
    ┌─ structs.fe:113:16
    │
113 │         assert val.numbers[1] == 2
    │                ^^^^^^^^^^^^^^    ^ u256: Value
    │                │                  
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:113:16
    │
113 │         assert val.numbers[1] == 2
    │                ^^^^^^^^^^^^^^^^^^^ bool: Value
    ·
116 │         val.point.x = 1000
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:116:9
    │
116 │         val.point.x = 1000
    │         ^^^^^^^^^ Point: Memory

note: 
    ┌─ structs.fe:116:9
    │
116 │         val.point.x = 1000
    │         ^^^^^^^^^^^   ^^^^ u256: Value
    │         │              
    │         u256: Memory
117 │         val.point.y = 2000
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:117:9
    │
117 │         val.point.y = 2000
    │         ^^^^^^^^^ Point: Memory

note: 
    ┌─ structs.fe:117:9
    │
117 │         val.point.y = 2000
    │         ^^^^^^^^^^^   ^^^^ u256: Value
    │         │              
    │         u256: Memory
118 │         assert val.point.x == 1000
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:118:16
    │
118 │         assert val.point.x == 1000
    │                ^^^^^^^^^ Point: Memory

note: 
    ┌─ structs.fe:118:16
    │
118 │         assert val.point.x == 1000
    │                ^^^^^^^^^^^    ^^^^ u256: Value
    │                │               
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:118:16
    │
118 │         assert val.point.x == 1000
    │                ^^^^^^^^^^^^^^^^^^^ bool: Value
119 │         assert val.point.y == 2000
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:119:16
    │
119 │         assert val.point.y == 2000
    │                ^^^^^^^^^ Point: Memory

note: 
    ┌─ structs.fe:119:16
    │
119 │         assert val.point.y == 2000
    │                ^^^^^^^^^^^    ^^^^ u256: Value
    │                │               
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:119:16
    │
119 │         assert val.point.y == 2000
    │                ^^^^^^^^^^^^^^^^^^^ bool: Value
120 │         # We can set the point itself
121 │         val.point = Point(x: 100, y: 200)
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:121:9
    │
121 │         val.point = Point(x: 100, y: 200)
    │         ^^^^^^^^^            ^^^     ^^^ u256: Value
    │         │                    │        
    │         │                    u256: Value
    │         Point: Memory

note: 
    ┌─ structs.fe:121:21
    │
121 │         val.point = Point(x: 100, y: 200)
    │                     ^^^^^^^^^^^^^^^^^^^^^ Point: Memory
122 │         assert val.point.x == 100
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:122:16
    │
122 │         assert val.point.x == 100
    │                ^^^^^^^^^ Point: Memory

note: 
    ┌─ structs.fe:122:16
    │
122 │         assert val.point.x == 100
    │                ^^^^^^^^^^^    ^^^ u256: Value
    │                │               
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:122:16
    │
122 │         assert val.point.x == 100
    │                ^^^^^^^^^^^^^^^^^^ bool: Value
123 │         assert val.point.y == 200
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:123:16
    │
123 │         assert val.point.y == 200
    │                ^^^^^^^^^ Point: Memory

note: 
    ┌─ structs.fe:123:16
    │
123 │         assert val.point.y == 200
    │                ^^^^^^^^^^^    ^^^ u256: Value
    │                │               
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:123:16
    │
123 │         assert val.point.y == 200
    │                ^^^^^^^^^^^^^^^^^^ bool: Value
    ·
126 │         val.something.item0 = 10
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:126:9
    │
126 │         val.something.item0 = 10
    │         ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:126:9
    │
126 │         val.something.item0 = 10
    │         ^^^^^^^^^^^^^^^^^^^   ^^ u256: Value
    │         │                      
    │         u256: Memory
127 │         val.something.item1 = false
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:127:9
    │
127 │         val.something.item1 = false
    │         ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:127:9
    │
127 │         val.something.item1 = false
    │         ^^^^^^^^^^^^^^^^^^^   ^^^^^ bool: Value
    │         │                      
    │         bool: Memory
128 │         assert val.something.item0 == 10
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:128:16
    │
128 │         assert val.something.item0 == 10
    │                ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:128:16
    │
128 │         assert val.something.item0 == 10
    │                ^^^^^^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                       
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:128:16
    │
128 │         assert val.something.item0 == 10
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
129 │         assert not val.something.item1
    │                    ^^^ Bar: Memory

note: 
    ┌─ structs.fe:129:20
    │
129 │         assert not val.something.item1
    │                    ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:129:20
    │
129 │         assert not val.something.item1
    │                    ^^^^^^^^^^^^^^^^^^^ bool: Memory => Value

note: 
    ┌─ structs.fe:129:16
    │
129 │         assert not val.something.item1
    │                ^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
130 │         # We can set the tuple itself
131 │         val.something = (1, true)
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:131:9
    │
131 │         val.something = (1, true)
    │         ^^^^^^^^^^^^^    ^  ^^^^ bool: Value
    │         │                │   
    │         │                u256: Value
    │         (u256, bool): Memory

note: 
    ┌─ structs.fe:131:25
    │
131 │         val.something = (1, true)
    │                         ^^^^^^^^^ (u256, bool): Memory
132 │         assert val.something.item0 == 1
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:132:16
    │
132 │         assert val.something.item0 == 1
    │                ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:132:16
    │
132 │         assert val.something.item0 == 1
    │                ^^^^^^^^^^^^^^^^^^^    ^ u256: Value
    │                │                       
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:132:16
    │
132 │         assert val.something.item0 == 1
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
133 │         assert val.something.item1
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:133:16
    │
133 │         assert val.something.item1
    │                ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:133:16
    │
133 │         assert val.something.item1
    │                ^^^^^^^^^^^^^^^^^^^ bool: Memory => Value
134 │ 
135 │         return val.name
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:135:16
    │
135 │         return val.name
    │                ^^^^^^^^ String<3>: Memory

note: 
    ┌─ structs.fe:137:5
    │  
137 │ ╭     pub fn create_mixed(self) -> u256:
138 │ │         let mixed: Mixed = Mixed::new(val:1)
139 │ │         return mixed.foo
    │ ╰────────────────────────^ attributes hash: 11773348765973600208
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: None,
          params: [],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ structs.fe:138:20
    │
138 │         let mixed: Mixed = Mixed::new(val:1)
    │                    ^^^^^ Mixed

note: 
    ┌─ structs.fe:138:43
    │
138 │         let mixed: Mixed = Mixed::new(val:1)
    │                                           ^ u256: Value

note: 
    ┌─ structs.fe:138:28
    │
138 │         let mixed: Mixed = Mixed::new(val:1)
    │                            ^^^^^^^^^^^^^^^^^ Mixed: Memory
139 │         return mixed.foo
    │                ^^^^^ Mixed: Memory

note: 
    ┌─ structs.fe:139:16
    │
139 │         return mixed.foo
    │                ^^^^^^^^^ u256: Memory => Value

note: 
    ┌─ structs.fe:141:5
    │  
141 │ ╭     pub fn set_house(self, data: House):
142 │ │         self.my_house = data
    │ ╰────────────────────────────^ attributes hash: 571714015924720006
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: None,
          params: [
              FunctionParam {
                  label: None,
                  name: "data",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "House",
                              field_count: 4,
                          },
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ structs.fe:142:9
    │
142 │         self.my_house = data
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:142:9
    │
142 │         self.my_house = data
    │         ^^^^^^^^^^^^^   ^^^^ House: Memory
    │         │                
    │         House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:144:5
    │  
144 │ ╭     pub fn get_house(self) -> House:
145 │ │         return self.my_house.to_mem()
    │ ╰─────────────────────────────────────^ attributes hash: 18226871377775469920
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: None,
          params: [],
          return_type: Ok(
              Struct(
                  Struct {
                      name: "House",
                      field_count: 4,
                  },
              ),
          ),
      }

note: 
    ┌─ structs.fe:145:16
    │
145 │         return self.my_house.to_mem()
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:145:16
    │
145 │         return self.my_house.to_mem()
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:145:16
    │
145 │         return self.my_house.to_mem()
    │                ^^^^^^^^^^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => Memory

note: 
    ┌─ structs.fe:147:5
    │  
147 │ ╭     pub fn create_house(self):
148 │ │         self.my_house = House(
149 │ │             price: 1,
150 │ │             size: 2,
    · │
178 │ │         assert self.my_house.rooms == u8(100)
179 │ │         assert self.my_house.vacant
    │ ╰───────────────────────────────────^ attributes hash: 18235041182630809162
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: None,
          params: [],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ structs.fe:148:9
    │
148 │         self.my_house = House(
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:148:9
    │
148 │         self.my_house = House(
    │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }
149 │             price: 1,
    │                    ^ u256: Value
150 │             size: 2,
    │                   ^ u256: Value
151 │             rooms: u8(5),
    │                       ^ u8: Value

note: 
    ┌─ structs.fe:151:20
    │
151 │             rooms: u8(5),
    │                    ^^^^^ u8: Value
152 │             vacant: false,
    │                     ^^^^^ bool: Value

note: 
    ┌─ structs.fe:148:25
    │  
148 │           self.my_house = House(
    │ ╭─────────────────────────^
149 │ │             price: 1,
150 │ │             size: 2,
151 │ │             rooms: u8(5),
152 │ │             vacant: false,
153 │ │         )
    │ ╰─────────^ House: Memory
154 │           assert self.my_house.price == 1
    │                  ^^^^ Foo: Value

note: 
    ┌─ structs.fe:154:16
    │
154 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:154:16
    │
154 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^^^^^^^    ^ u256: Value
    │                │                       
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:154:16
    │
154 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
155 │         assert self.my_house.size == 2
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:155:16
    │
155 │         assert self.my_house.size == 2
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:155:16
    │
155 │         assert self.my_house.size == 2
    │                ^^^^^^^^^^^^^^^^^^    ^ u256: Value
    │                │                      
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:155:16
    │
155 │         assert self.my_house.size == 2
    │                ^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
156 │         assert self.my_house.rooms == u8(5)
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:156:16
    │
156 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:156:16
    │
156 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^       ^ u8: Value
    │                │                          
    │                u8: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:156:39
    │
156 │         assert self.my_house.rooms == u8(5)
    │                                       ^^^^^ u8: Value

note: 
    ┌─ structs.fe:156:16
    │
156 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
157 │         assert self.my_house.vacant == false
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:157:16
    │
157 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:157:16
    │
157 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^    ^^^^^ bool: Value
    │                │                        
    │                bool: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:157:16
    │
157 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
158 │         # We change only the size and check other fields are unchanged
159 │         self.my_house.size = 50
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:159:9
    │
159 │         self.my_house.size = 50
    │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:159:9
    │
159 │         self.my_house.size = 50
    │         ^^^^^^^^^^^^^^^^^^   ^^ u256: Value
    │         │                     
    │         u256: Storage { nonce: Some(0) }
160 │         assert self.my_house.size == 50
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:160:16
    │
160 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:160:16
    │
160 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                      
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:160:16
    │
160 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
161 │         assert self.my_house.price == 1
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:161:16
    │
161 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:161:16
    │
161 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^^^^^^^    ^ u256: Value
    │                │                       
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:161:16
    │
161 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
162 │         assert self.my_house.rooms == u8(5)
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:162:16
    │
162 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:162:16
    │
162 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^       ^ u8: Value
    │                │                          
    │                u8: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:162:39
    │
162 │         assert self.my_house.rooms == u8(5)
    │                                       ^^^^^ u8: Value

note: 
    ┌─ structs.fe:162:16
    │
162 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
163 │         assert self.my_house.vacant == false
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:163:16
    │
163 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:163:16
    │
163 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^    ^^^^^ bool: Value
    │                │                        
    │                bool: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:163:16
    │
163 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
164 │         # We change only the price and check other fields are unchanged
165 │         self.my_house.price = 1000
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:165:9
    │
165 │         self.my_house.price = 1000
    │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:165:9
    │
165 │         self.my_house.price = 1000
    │         ^^^^^^^^^^^^^^^^^^^   ^^^^ u256: Value
    │         │                      
    │         u256: Storage { nonce: Some(0) }
166 │         assert self.my_house.size == 50
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:166:16
    │
166 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:166:16
    │
166 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                      
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:166:16
    │
166 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
167 │         assert self.my_house.price == 1000
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:167:16
    │
167 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:167:16
    │
167 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^    ^^^^ u256: Value
    │                │                       
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:167:16
    │
167 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
168 │         assert self.my_house.rooms == u8(5)
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:168:16
    │
168 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:168:16
    │
168 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^       ^ u8: Value
    │                │                          
    │                u8: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:168:39
    │
168 │         assert self.my_house.rooms == u8(5)
    │                                       ^^^^^ u8: Value

note: 
    ┌─ structs.fe:168:16
    │
168 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
169 │         assert self.my_house.vacant == false
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:169:16
    │
169 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:169:16
    │
169 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^    ^^^^^ bool: Value
    │                │                        
    │                bool: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:169:16
    │
169 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
170 │         self.my_house.vacant = true
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:170:9
    │
170 │         self.my_house.vacant = true
    │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:170:9
    │
170 │         self.my_house.vacant = true
    │         ^^^^^^^^^^^^^^^^^^^^   ^^^^ bool: Value
    │         │                       
    │         bool: Storage { nonce: Some(0) }
171 │         assert self.my_house.size == 50
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:171:16
    │
171 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:171:16
    │
171 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                      
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:171:16
    │
171 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
172 │         assert self.my_house.price == 1000
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:172:16
    │
172 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:172:16
    │
172 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^    ^^^^ u256: Value
    │                │                       
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:172:16
    │
172 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
173 │         assert self.my_house.rooms == u8(5)
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:173:16
    │
173 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:173:16
    │
173 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^       ^ u8: Value
    │                │                          
    │                u8: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:173:39
    │
173 │         assert self.my_house.rooms == u8(5)
    │                                       ^^^^^ u8: Value

note: 
    ┌─ structs.fe:173:16
    │
173 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
174 │         assert self.my_house.vacant
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:174:16
    │
174 │         assert self.my_house.vacant
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:174:16
    │
174 │         assert self.my_house.vacant
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(0) } => Value
175 │         self.my_house.rooms = u8(100)
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:175:9
    │
175 │         self.my_house.rooms = u8(100)
    │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:175:9
    │
175 │         self.my_house.rooms = u8(100)
    │         ^^^^^^^^^^^^^^^^^^^      ^^^ u8: Value
    │         │                         
    │         u8: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:175:31
    │
175 │         self.my_house.rooms = u8(100)
    │                               ^^^^^^^ u8: Value
176 │         assert self.my_house.size == 50
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:176:16
    │
176 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:176:16
    │
176 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                      
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:176:16
    │
176 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
177 │         assert self.my_house.price == 1000
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:177:16
    │
177 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:177:16
    │
177 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^    ^^^^ u256: Value
    │                │                       
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:177:16
    │
177 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
178 │         assert self.my_house.rooms == u8(100)
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:178:16
    │
178 │         assert self.my_house.rooms == u8(100)
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:178:16
    │
178 │         assert self.my_house.rooms == u8(100)
    │                ^^^^^^^^^^^^^^^^^^^       ^^^ u8: Value
    │                │                          
    │                u8: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:178:39
    │
178 │         assert self.my_house.rooms == u8(100)
    │                                       ^^^^^^^ u8: Value

note: 
    ┌─ structs.fe:178:16
    │
178 │         assert self.my_house.rooms == u8(100)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
179 │         assert self.my_house.vacant
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:179:16
    │
179 │         assert self.my_house.vacant
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:179:16
    │
179 │         assert self.my_house.vacant
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:181:5
    │  
181 │ ╭     pub fn bar() -> u256:
182 │ │         let building: House = House(
183 │ │             price: 300,
184 │ │             size: 500,
    · │
206 │ │ 
207 │ │         return building.size
    │ ╰────────────────────────────^ attributes hash: 6115314201970082834
    │  
    = FunctionSignature {
          self_decl: None,
          ctx_decl: None,
          params: [],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ structs.fe:182:23
    │
182 │         let building: House = House(
    │                       ^^^^^ House

note: 
    ┌─ structs.fe:183:20
    │
183 │             price: 300,
    │                    ^^^ u256: Value
184 │             size: 500,
    │                   ^^^ u256: Value
185 │             rooms: u8(20),
    │                       ^^ u8: Value

note: 
    ┌─ structs.fe:185:20
    │
185 │             rooms: u8(20),
    │                    ^^^^^^ u8: Value
186 │             vacant: true,
    │                     ^^^^ bool: Value

note: 
    ┌─ structs.fe:182:31
    │  
182 │           let building: House = House(
    │ ╭───────────────────────────────^
183 │ │             price: 300,
184 │ │             size: 500,
185 │ │             rooms: u8(20),
186 │ │             vacant: true,
187 │ │         )
    │ ╰─────────^ House: Memory
188 │           assert building.size == 500
    │                  ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:188:16
    │
188 │         assert building.size == 500
    │                ^^^^^^^^^^^^^    ^^^ u256: Value
    │                │                 
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:188:16
    │
188 │         assert building.size == 500
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
189 │         assert building.price == 300
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:189:16
    │
189 │         assert building.price == 300
    │                ^^^^^^^^^^^^^^    ^^^ u256: Value
    │                │                  
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:189:16
    │
189 │         assert building.price == 300
    │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value
190 │         assert building.rooms == u8(20)
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:190:16
    │
190 │         assert building.rooms == u8(20)
    │                ^^^^^^^^^^^^^^       ^^ u8: Value
    │                │                     
    │                u8: Memory => Value

note: 
    ┌─ structs.fe:190:34
    │
190 │         assert building.rooms == u8(20)
    │                                  ^^^^^^ u8: Value

note: 
    ┌─ structs.fe:190:16
    │
190 │         assert building.rooms == u8(20)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
191 │         assert building.vacant
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:191:16
    │
191 │         assert building.vacant
    │                ^^^^^^^^^^^^^^^ bool: Memory => Value
192 │ 
193 │         building.vacant = false
    │         ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:193:9
    │
193 │         building.vacant = false
    │         ^^^^^^^^^^^^^^^   ^^^^^ bool: Value
    │         │                  
    │         bool: Memory
194 │         building.price = 1
    │         ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:194:9
    │
194 │         building.price = 1
    │         ^^^^^^^^^^^^^^   ^ u256: Value
    │         │                 
    │         u256: Memory
195 │         building.size = 2
    │         ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:195:9
    │
195 │         building.size = 2
    │         ^^^^^^^^^^^^^   ^ u256: Value
    │         │                
    │         u256: Memory
196 │         building.rooms = u8(10)
    │         ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:196:9
    │
196 │         building.rooms = u8(10)
    │         ^^^^^^^^^^^^^^      ^^ u8: Value
    │         │                    
    │         u8: Memory

note: 
    ┌─ structs.fe:196:26
    │
196 │         building.rooms = u8(10)
    │                          ^^^^^^ u8: Value
197 │ 
198 │         assert building.vacant == false
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:198:16
    │
198 │         assert building.vacant == false
    │                ^^^^^^^^^^^^^^^    ^^^^^ bool: Value
    │                │                   
    │                bool: Memory => Value

note: 
    ┌─ structs.fe:198:16
    │
198 │         assert building.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
199 │         assert building.price == 1
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:199:16
    │
199 │         assert building.price == 1
    │                ^^^^^^^^^^^^^^    ^ u256: Value
    │                │                  
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:199:16
    │
199 │         assert building.price == 1
    │                ^^^^^^^^^^^^^^^^^^^ bool: Value
200 │         assert building.size == 2
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:200:16
    │
200 │         assert building.size == 2
    │                ^^^^^^^^^^^^^    ^ u256: Value
    │                │                 
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:200:16
    │
200 │         assert building.size == 2
    │                ^^^^^^^^^^^^^^^^^^ bool: Value
201 │         assert building.rooms == u8(10)
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:201:16
    │
201 │         assert building.rooms == u8(10)
    │                ^^^^^^^^^^^^^^       ^^ u8: Value
    │                │                     
    │                u8: Memory => Value

note: 
    ┌─ structs.fe:201:34
    │
201 │         assert building.rooms == u8(10)
    │                                  ^^^^^^ u8: Value

note: 
    ┌─ structs.fe:201:16
    │
201 │         assert building.rooms == u8(10)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
202 │ 
203 │         building.expand()
    │         ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:203:9
    │
203 │         building.expand()
    │         ^^^^^^^^^^^^^^^^^ (): Value
204 │         assert building.size == 102
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:204:16
    │
204 │         assert building.size == 102
    │                ^^^^^^^^^^^^^    ^^^ u256: Value
    │                │                 
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:204:16
    │
204 │         assert building.size == 102
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
205 │         assert building.rooms == 11
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:205:16
    │
205 │         assert building.rooms == 11
    │                ^^^^^^^^^^^^^^    ^^ u8: Value
    │                │                  
    │                u8: Memory => Value

note: 
    ┌─ structs.fe:205:16
    │
205 │         assert building.rooms == 11
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
206 │ 
207 │         return building.size
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:207:16
    │
207 │         return building.size
    │                ^^^^^^^^^^^^^ u256: Memory => Value

note: 
    ┌─ structs.fe:209:5
    │  
209 │ ╭     pub fn encode_house() -> Array<u8, 128>:
210 │ │         let house: House = House(
211 │ │             price: 300,
212 │ │             size: 500,
    · │
215 │ │         )
216 │ │         return house.encode()
    │ ╰─────────────────────────────^ attributes hash: 9174136327042912890
    │  
    = FunctionSignature {
          self_decl: None,
          ctx_decl: None,
          params: [],
          return_type: Ok(
              Array(
                  Array {
                      size: 128,
                      inner: Numeric(
                          U8,
                      ),
                  },
              ),
          ),
      }

note: 
    ┌─ structs.fe:210:20
    │
210 │         let house: House = House(
    │                    ^^^^^ House

note: 
    ┌─ structs.fe:211:20
    │
211 │             price: 300,
    │                    ^^^ u256: Value
212 │             size: 500,
    │                   ^^^ u256: Value
213 │             rooms: u8(20),
    │                       ^^ u8: Value

note: 
    ┌─ structs.fe:213:20
    │
213 │             rooms: u8(20),
    │                    ^^^^^^ u8: Value
214 │             vacant: true,
    │                     ^^^^ bool: Value

note: 
    ┌─ structs.fe:210:28
    │  
210 │           let house: House = House(
    │ ╭────────────────────────────^
211 │ │             price: 300,
212 │ │             size: 500,
213 │ │             rooms: u8(20),
214 │ │             vacant: true,
215 │ │         )
    │ ╰─────────^ House: Memory
216 │           return house.encode()
    │                  ^^^^^ House: Memory

note: 
    ┌─ structs.fe:216:16
    │
216 │         return house.encode()
    │                ^^^^^^^^^^^^^^ Array<u8, 128>: Memory

note: 
    ┌─ structs.fe:218:5
    │  
218 │ ╭     pub fn hashed_house() -> u256:
219 │ │         let house: House = House(
220 │ │             price: 300,
221 │ │             size: 500,
    · │
224 │ │         )
225 │ │         return house.hash()
    │ ╰───────────────────────────^ attributes hash: 6115314201970082834
    │  
    = FunctionSignature {
          self_decl: None,
          ctx_decl: None,
          params: [],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ structs.fe:219:20
    │
219 │         let house: House = House(
    │                    ^^^^^ House

note: 
    ┌─ structs.fe:220:20
    │
220 │             price: 300,
    │                    ^^^ u256: Value
221 │             size: 500,
    │                   ^^^ u256: Value
222 │             rooms: u8(20),
    │                       ^^ u8: Value

note: 
    ┌─ structs.fe:222:20
    │
222 │             rooms: u8(20),
    │                    ^^^^^^ u8: Value
223 │             vacant: true,
    │                     ^^^^ bool: Value

note: 
    ┌─ structs.fe:219:28
    │  
219 │           let house: House = House(
    │ ╭────────────────────────────^
220 │ │             price: 300,
221 │ │             size: 500,
222 │ │             rooms: u8(20),
223 │ │             vacant: true,
224 │ │         )
    │ ╰─────────^ House: Memory
225 │           return house.hash()
    │                  ^^^^^ House: Memory

note: 
    ┌─ structs.fe:225:16
    │
225 │         return house.hash()
    │                ^^^^^^^^^^^^ u256: Value



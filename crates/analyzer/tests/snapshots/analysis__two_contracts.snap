---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ two_contracts.fe:2:5
  │
2 │     other: Bar
  │     ^^^^^^^^^^ Bar

note: 
   ┌─ two_contracts.fe:8:5
   │  
 8 │ ╭     pub fn foo(self, ctx: Context) -> u256 {
 9 │ │         self.other.set_foo_addr(ctx.self_address())
10 │ │         return self.other.answer()
11 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> u256

note: 
  ┌─ two_contracts.fe:9:9
  │
9 │         self.other.set_foo_addr(ctx.self_address())
  │         ^^^^ Foo

note: 
  ┌─ two_contracts.fe:9:9
  │
9 │         self.other.set_foo_addr(ctx.self_address())
  │         ^^^^^^^^^^              ^^^ Context
  │         │                        
  │         SPtr<Bar> -> Bar

note: 
  ┌─ two_contracts.fe:9:33
  │
9 │         self.other.set_foo_addr(ctx.self_address())
  │                                 ^^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ two_contracts.fe:9:9
   │
 9 │         self.other.set_foo_addr(ctx.self_address())
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
10 │         return self.other.answer()
   │                ^^^^ Foo

note: 
   ┌─ two_contracts.fe:10:16
   │
10 │         return self.other.answer()
   │                ^^^^^^^^^^ SPtr<Bar> -> Bar

note: 
   ┌─ two_contracts.fe:10:16
   │
10 │         return self.other.answer()
   │                ^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ two_contracts.fe:13:5
   │  
13 │ ╭     pub fn add(self, _ x: u256, _ y: u256) -> u256 {
14 │ │         return x + y
15 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: Some("_"), name: x, typ: u256 }, { label: Some("_"), name: y, typ: u256 }] -> u256

note: 
   ┌─ two_contracts.fe:14:16
   │
14 │         return x + y
   │                ^   ^ u256
   │                │    
   │                u256

note: 
   ┌─ two_contracts.fe:14:16
   │
14 │         return x + y
   │                ^^^^^ u256

note: 
   ┌─ two_contracts.fe:19:5
   │
19 │     other: Foo
   │     ^^^^^^^^^^ Foo

note: 
   ┌─ two_contracts.fe:21:5
   │  
21 │ ╭     pub fn set_foo_addr(self, _ addr: address) {
22 │ │         self.other = Foo(addr)
23 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: Some("_"), name: addr, typ: address }] -> ()

note: 
   ┌─ two_contracts.fe:22:9
   │
22 │         self.other = Foo(addr)
   │         ^^^^ Bar

note: 
   ┌─ two_contracts.fe:22:9
   │
22 │         self.other = Foo(addr)
   │         ^^^^^^^^^^       ^^^^ address
   │         │                 
   │         SPtr<Foo>

note: 
   ┌─ two_contracts.fe:22:22
   │
22 │         self.other = Foo(addr)
   │                      ^^^^^^^^^ Foo

note: 
   ┌─ two_contracts.fe:25:5
   │  
25 │ ╭     pub fn answer(self) -> u256 {
26 │ │         return self.other.add(20, 22)
27 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> u256

note: 
   ┌─ two_contracts.fe:26:16
   │
26 │         return self.other.add(20, 22)
   │                ^^^^ Bar

note: 
   ┌─ two_contracts.fe:26:16
   │
26 │         return self.other.add(20, 22)
   │                ^^^^^^^^^^     ^^  ^^ u256
   │                │              │    
   │                │              u256
   │                SPtr<Foo> -> Foo

note: 
   ┌─ two_contracts.fe:26:16
   │
26 │         return self.other.add(20, 22)
   │                ^^^^^^^^^^^^^^^^^^^^^^ u256



---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ tuple_stress.fe:4:5
  │
4 │     my_sto_tuple: (u256, i32)
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, i32)

note: 
  ┌─ tuple_stress.fe:7:9
  │
7 │         my_tuple: (u256, bool, address)
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address)

note: 
   ┌─ tuple_stress.fe:9:5
   │  
 9 │ ╭     pub fn build_my_tuple(
10 │ │         my_num: u256,
11 │ │         my_bool: bool,
12 │ │         my_address: address
13 │ │     ) -> (u256, bool, address):
14 │ │         return (my_num, my_bool, my_address)
   │ ╰────────────────────────────────────────────^ attributes hash: 10223738621782129186
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 label: None,
                 name: "my_num",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "my_bool",
                 typ: Ok(
                     Base(
                         Bool,
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "my_address",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Tuple(
                 Tuple {
                     items: [
                         Base(
                             Numeric(
                                 U256,
                             ),
                         ),
                         Base(
                             Bool,
                         ),
                         Base(
                             Address,
                         ),
                     ],
                 },
             ),
         ),
     }

note: 
   ┌─ tuple_stress.fe:14:17
   │
14 │         return (my_num, my_bool, my_address)
   │                 ^^^^^^  ^^^^^^^  ^^^^^^^^^^ address: Value
   │                 │       │         
   │                 │       bool: Value
   │                 u256: Value

note: 
   ┌─ tuple_stress.fe:14:16
   │
14 │         return (my_num, my_bool, my_address)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ tuple_stress.fe:16:5
   │  
16 │ ╭     pub fn read_my_tuple_item0(my_tuple: (u256, bool, address)) -> u256:
17 │ │         return my_tuple.item0
   │ ╰─────────────────────────────^ attributes hash: 1005385906871296536
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 label: None,
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ tuple_stress.fe:17:16
   │
17 │         return my_tuple.item0
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ tuple_stress.fe:17:16
   │
17 │         return my_tuple.item0
   │                ^^^^^^^^^^^^^^ u256: Memory => Value

note: 
   ┌─ tuple_stress.fe:19:5
   │  
19 │ ╭     pub fn read_my_tuple_item1(my_tuple: (u256, bool, address)) -> bool:
20 │ │         return my_tuple.item1
   │ ╰─────────────────────────────^ attributes hash: 5615774585289781220
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 label: None,
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ tuple_stress.fe:20:16
   │
20 │         return my_tuple.item1
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ tuple_stress.fe:20:16
   │
20 │         return my_tuple.item1
   │                ^^^^^^^^^^^^^^ bool: Memory => Value

note: 
   ┌─ tuple_stress.fe:22:5
   │  
22 │ ╭     pub fn read_my_tuple_item2(my_tuple: (u256, bool, address)) -> address:
23 │ │         return my_tuple.item2
   │ ╰─────────────────────────────^ attributes hash: 13024428391414866682
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 label: None,
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ tuple_stress.fe:23:16
   │
23 │         return my_tuple.item2
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ tuple_stress.fe:23:16
   │
23 │         return my_tuple.item2
   │                ^^^^^^^^^^^^^^ address: Memory => Value

note: 
   ┌─ tuple_stress.fe:25:5
   │  
25 │ ╭     pub fn read_my_tuple_item10(my_tuple: (u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, address)) -> address:
26 │ │         return my_tuple.item10
   │ ╰──────────────────────────────^ attributes hash: 11830390438544540912
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 label: None,
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ tuple_stress.fe:26:16
   │
26 │         return my_tuple.item10
   │                ^^^^^^^^ (u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, address): Memory

note: 
   ┌─ tuple_stress.fe:26:16
   │
26 │         return my_tuple.item10
   │                ^^^^^^^^^^^^^^^ address: Memory => Value

note: 
   ┌─ tuple_stress.fe:28:5
   │  
28 │ ╭     pub fn emit_my_event(ctx: Context, my_tuple: (u256, bool, address)):
29 │ │         emit MyEvent(ctx, my_tuple)
   │ ╰───────────────────────────────────^ attributes hash: 10535390144430265813
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 label: None,
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ tuple_stress.fe:29:22
   │
29 │         emit MyEvent(ctx, my_tuple)
   │                      ^^^  ^^^^^^^^ (u256, bool, address): Memory
   │                      │     
   │                      Context: Memory

note: 
   ┌─ tuple_stress.fe:29:9
   │
29 │         emit MyEvent(ctx, my_tuple)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 12913536175581177750
   │
   = Event {
         name: "MyEvent",
         fields: [
             EventField {
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ tuple_stress.fe:31:5
   │  
31 │ ╭     pub fn set_my_sto_tuple(self, my_u256: u256, my_i32: i32):
32 │ │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
33 │ │         self.my_sto_tuple = (my_u256, my_i32)
   │ ╰─────────────────────────────────────────────^ attributes hash: 14404502892103280650
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [
             FunctionParam {
                 label: None,
                 name: "my_u256",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "my_i32",
                 typ: Ok(
                     Base(
                         Numeric(
                             I32,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ tuple_stress.fe:32:16
   │
32 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^ Foo: Value

note: 
   ┌─ tuple_stress.fe:32:16
   │
32 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:32:16
   │
32 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^         ^ u256: Value
   │                │                                
   │                u256: Storage { nonce: Some(0) } => Value

note: 
   ┌─ tuple_stress.fe:32:43
   │
32 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                           ^^^^^^^ u256: Value

note: 
   ┌─ tuple_stress.fe:32:16
   │
32 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^ Foo: Value
   │                │                                       
   │                bool: Value

note: 
   ┌─ tuple_stress.fe:32:55
   │
32 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:32:55
   │
32 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^        ^ i32: Value
   │                                                       │                               
   │                                                       i32: Storage { nonce: Some(0) } => Value

note: 
   ┌─ tuple_stress.fe:32:82
   │
32 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                                                  ^^^^^^ i32: Value

note: 
   ┌─ tuple_stress.fe:32:55
   │
32 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value

note: 
   ┌─ tuple_stress.fe:32:16
   │
32 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
33 │         self.my_sto_tuple = (my_u256, my_i32)
   │         ^^^^ Foo: Value

note: 
   ┌─ tuple_stress.fe:33:9
   │
33 │         self.my_sto_tuple = (my_u256, my_i32)
   │         ^^^^^^^^^^^^^^^^^    ^^^^^^^  ^^^^^^ i32: Value
   │         │                    │         
   │         │                    u256: Value
   │         (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:33:29
   │
33 │         self.my_sto_tuple = (my_u256, my_i32)
   │                             ^^^^^^^^^^^^^^^^^ (u256, i32): Memory

note: 
   ┌─ tuple_stress.fe:35:5
   │  
35 │ ╭     pub fn get_my_sto_tuple(self) -> (u256, i32):
36 │ │         return self.my_sto_tuple.to_mem()
   │ ╰─────────────────────────────────────────^ attributes hash: 6833980121040096883
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Tuple(
                 Tuple {
                     items: [
                         Base(
                             Numeric(
                                 U256,
                             ),
                         ),
                         Base(
                             Numeric(
                                 I32,
                             ),
                         ),
                     ],
                 },
             ),
         ),
     }

note: 
   ┌─ tuple_stress.fe:36:16
   │
36 │         return self.my_sto_tuple.to_mem()
   │                ^^^^ Foo: Value

note: 
   ┌─ tuple_stress.fe:36:16
   │
36 │         return self.my_sto_tuple.to_mem()
   │                ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:36:16
   │
36 │         return self.my_sto_tuple.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) } => Memory

note: 
   ┌─ tuple_stress.fe:38:5
   │  
38 │ ╭     pub fn build_tuple_and_emit(self, ctx: Context):
39 │ │         let my_num: u256 = self.my_sto_tuple.item0
40 │ │         let my_tuple: (u256, bool, address) = (
41 │ │             self.my_sto_tuple.item0,
   · │
44 │ │         )
45 │ │         emit_my_event(ctx, my_tuple)
   │ ╰────────────────────────────────────^ attributes hash: 1731341862738941170
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 label: None,
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ tuple_stress.fe:39:21
   │
39 │         let my_num: u256 = self.my_sto_tuple.item0
   │                     ^^^^ u256
40 │         let my_tuple: (u256, bool, address) = (
   │                       ^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address)

note: 
   ┌─ tuple_stress.fe:39:28
   │
39 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^ Foo: Value

note: 
   ┌─ tuple_stress.fe:39:28
   │
39 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:39:28
   │
39 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Value
40 │         let my_tuple: (u256, bool, address) = (
41 │             self.my_sto_tuple.item0,
   │             ^^^^ Foo: Value

note: 
   ┌─ tuple_stress.fe:41:13
   │
41 │             self.my_sto_tuple.item0,
   │             ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:41:13
   │
41 │             self.my_sto_tuple.item0,
   │             ^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Value
42 │             true and false,
   │             ^^^^     ^^^^^ bool: Value
   │             │         
   │             bool: Value

note: 
   ┌─ tuple_stress.fe:42:13
   │
42 │             true and false,
   │             ^^^^^^^^^^^^^^ bool: Value
43 │             address(26)
   │                     ^^ u256: Value

note: 
   ┌─ tuple_stress.fe:43:13
   │
43 │             address(26)
   │             ^^^^^^^^^^^ address: Value

note: 
   ┌─ tuple_stress.fe:40:47
   │  
40 │           let my_tuple: (u256, bool, address) = (
   │ ╭───────────────────────────────────────────────^
41 │ │             self.my_sto_tuple.item0,
42 │ │             true and false,
43 │ │             address(26)
44 │ │         )
   │ ╰─────────^ (u256, bool, address): Memory
45 │           emit_my_event(ctx, my_tuple)
   │                         ^^^  ^^^^^^^^ (u256, bool, address): Memory
   │                         │     
   │                         Context: Memory

note: 
   ┌─ tuple_stress.fe:45:9
   │
45 │         emit_my_event(ctx, my_tuple)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value

note: 
   ┌─ tuple_stress.fe:47:5
   │  
47 │ ╭     pub fn encode_my_tuple(my_tuple: (u256, bool, address)) -> Array<u8, 96>:
48 │ │         return my_tuple.abi_encode()
   │ ╰────────────────────────────────────^ attributes hash: 3539305055628398466
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 label: None,
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Array(
                 Array {
                     size: 96,
                     inner: Numeric(
                         U8,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ tuple_stress.fe:48:16
   │
48 │         return my_tuple.abi_encode()
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ tuple_stress.fe:48:16
   │
48 │         return my_tuple.abi_encode()
   │                ^^^^^^^^^^^^^^^^^^^^^ Array<u8, 96>: Memory



---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ events.fe:3:5
  │
3 │     pub num1: u256
  │     ^^^^^^^^^^^^^^ u256
4 │     pub num2: u256
  │     ^^^^^^^^^^^^^^ u256

note: 
  ┌─ events.fe:8:5
  │
8 │     pub num: u256
  │     ^^^^^^^^^^^^^ u256
9 │     pub addr: address
  │     ^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ events.fe:13:5
   │
13 │     pub num1: u256
   │     ^^^^^^^^^^^^^^ u256
14 │     #indexed
15 │     pub addr: address
   │     ^^^^^^^^^^^^^^^^^ address
16 │     pub num2: u256
   │     ^^^^^^^^^^^^^^ u256
17 │     pub my_bytes: Array<u8, 100>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<u8, 100>

note: 
   ┌─ events.fe:21:5
   │
21 │     pub addrs: Array<address, 2>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 2>

note: 
   ┌─ events.fe:26:5
   │  
26 │ ╭     pub fn emit_nums(ctx: Context) {
27 │ │         ctx.emit(Nums(num1: 26, num2: 42))
28 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: Context }] -> ()

note: 
   ┌─ events.fe:27:9
   │
27 │         ctx.emit(Nums(num1: 26, num2: 42))
   │         ^^^                 ^^        ^^ u256
   │         │                   │          
   │         │                   u256
   │         Context

note: 
   ┌─ events.fe:27:18
   │
27 │         ctx.emit(Nums(num1: 26, num2: 42))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^ Nums

note: 
   ┌─ events.fe:27:9
   │
27 │         ctx.emit(Nums(num1: 26, num2: 42))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ events.fe:30:5
   │  
30 │ ╭     pub fn emit_bases(ctx: Context, addr: address) {
31 │ │         ctx.emit(Bases(num: 26, addr))
32 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: Context }, { label: None, name: addr, typ: address }] -> ()

note: 
   ┌─ events.fe:31:9
   │
31 │         ctx.emit(Bases(num: 26, addr))
   │         ^^^                 ^^  ^^^^ address
   │         │                   │    
   │         │                   u256
   │         Context

note: 
   ┌─ events.fe:31:18
   │
31 │         ctx.emit(Bases(num: 26, addr))
   │                  ^^^^^^^^^^^^^^^^^^^^ Bases

note: 
   ┌─ events.fe:31:9
   │
31 │         ctx.emit(Bases(num: 26, addr))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ events.fe:34:5
   │  
34 │ ╭     pub fn emit_mix(ctx: Context, addr: address, my_bytes: Array<u8, 100>) {
35 │ │         ctx.emit(Mix(num1: 26, addr, num2: 42, my_bytes))
36 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: Context }, { label: None, name: addr, typ: address }, { label: None, name: my_bytes, typ: Array<u8, 100> }] -> ()

note: 
   ┌─ events.fe:35:9
   │
35 │         ctx.emit(Mix(num1: 26, addr, num2: 42, my_bytes))
   │         ^^^                ^^  ^^^^        ^^  ^^^^^^^^ Array<u8, 100> -Copy-> Array<u8, 100>
   │         │                  │   │           │    
   │         │                  │   │           u256
   │         │                  │   address
   │         │                  u256
   │         Context

note: 
   ┌─ events.fe:35:18
   │
35 │         ctx.emit(Mix(num1: 26, addr, num2: 42, my_bytes))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Mix

note: 
   ┌─ events.fe:35:9
   │
35 │         ctx.emit(Mix(num1: 26, addr, num2: 42, my_bytes))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ events.fe:38:5
   │  
38 │ ╭     pub fn emit_addresses(ctx: Context, addr1: address, addr2: address) {
39 │ │         let mut addrs: Array<address, 2> = [address(0); 2]
40 │ │         addrs[0] = addr1
41 │ │         addrs[1] = addr2
42 │ │         ctx.emit(Addresses(addrs))
43 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: Context }, { label: None, name: addr1, typ: address }, { label: None, name: addr2, typ: address }] -> ()

note: 
   ┌─ events.fe:39:17
   │
39 │         let mut addrs: Array<address, 2> = [address(0); 2]
   │                 ^^^^^ mut Array<address, 2>

note: 
   ┌─ events.fe:39:53
   │
39 │         let mut addrs: Array<address, 2> = [address(0); 2]
   │                                                     ^ u256

note: 
   ┌─ events.fe:39:45
   │
39 │         let mut addrs: Array<address, 2> = [address(0); 2]
   │                                             ^^^^^^^^^^  ^ u256
   │                                             │            
   │                                             address

note: 
   ┌─ events.fe:39:44
   │
39 │         let mut addrs: Array<address, 2> = [address(0); 2]
   │                                            ^^^^^^^^^^^^^^^ Array<address, 2>
40 │         addrs[0] = addr1
   │         ^^^^^ ^ u256
   │         │      
   │         mut Array<address, 2>

note: 
   ┌─ events.fe:40:9
   │
40 │         addrs[0] = addr1
   │         ^^^^^^^^   ^^^^^ address
   │         │           
   │         mut address
41 │         addrs[1] = addr2
   │         ^^^^^ ^ u256
   │         │      
   │         mut Array<address, 2>

note: 
   ┌─ events.fe:41:9
   │
41 │         addrs[1] = addr2
   │         ^^^^^^^^   ^^^^^ address
   │         │           
   │         mut address
42 │         ctx.emit(Addresses(addrs))
   │         ^^^                ^^^^^ mut Array<address, 2> -Copy-> Array<address, 2>
   │         │                   
   │         Context

note: 
   ┌─ events.fe:42:18
   │
42 │         ctx.emit(Addresses(addrs))
   │                  ^^^^^^^^^^^^^^^^ Addresses

note: 
   ┌─ events.fe:42:9
   │
42 │         ctx.emit(Addresses(addrs))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ()



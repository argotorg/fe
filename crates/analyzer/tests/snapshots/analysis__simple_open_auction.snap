---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ simple_open_auction.fe:7:5
  │
7 │     pub highest_bid: u256
  │     ^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ simple_open_auction.fe:12:5
   │
12 │     auction_end_time: u256
   │     ^^^^^^^^^^^^^^^^^^^^^^ SPtr<u256>
13 │     beneficiary: address
   │     ^^^^^^^^^^^^^^^^^^^^ SPtr<address>
14 │ 
15 │     highest_bidder: address
   │     ^^^^^^^^^^^^^^^^^^^^^^^ SPtr<address>
16 │     highest_bid: u256
   │     ^^^^^^^^^^^^^^^^^ SPtr<u256>
17 │ 
18 │     pending_returns: Map<address, u256>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SPtr<Map<address, u256>>
19 │ 
20 │     ended: bool
   │     ^^^^^^^^^^^ SPtr<bool>

note: 
   ┌─ simple_open_auction.fe:24:9
   │
24 │         idx bidder: address
   │         ^^^^^^^^^^^^^^^^^^^ address
25 │         amount: u256
   │         ^^^^^^^^^^^^ u256

note: 
   ┌─ simple_open_auction.fe:29:9
   │
29 │         idx winner: address
   │         ^^^^^^^^^^^^^^^^^^^ address
30 │         amount: u256
   │         ^^^^^^^^^^^^ u256

note: 
   ┌─ simple_open_auction.fe:40:5
   │  
40 │ ╭     pub fn bid(self, ctx: Context) {
41 │ │         if ctx.block_timestamp() > self.auction_end_time {
42 │ │             revert AuctionAlreadyEnded()
43 │ │         }
   · │
53 │ │         emit HighestBidIncreased(ctx, bidder: ctx.msg_sender(), amount: ctx.msg_value())
54 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> ()

note: 
   ┌─ simple_open_auction.fe:41:12
   │
41 │         if ctx.block_timestamp() > self.auction_end_time {
   │            ^^^ Context

note: 
   ┌─ simple_open_auction.fe:41:12
   │
41 │         if ctx.block_timestamp() > self.auction_end_time {
   │            ^^^^^^^^^^^^^^^^^^^^^   ^^^^ SimpleOpenAuction
   │            │                        
   │            u256

note: 
   ┌─ simple_open_auction.fe:41:36
   │
41 │         if ctx.block_timestamp() > self.auction_end_time {
   │                                    ^^^^^^^^^^^^^^^^^^^^^ SPtr<u256>

note: 
   ┌─ simple_open_auction.fe:41:12
   │
41 │         if ctx.block_timestamp() > self.auction_end_time {
   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
42 │             revert AuctionAlreadyEnded()
   │                    ^^^^^^^^^^^^^^^^^^^^^ AuctionAlreadyEnded
43 │         }
44 │         if ctx.msg_value() <= self.highest_bid {
   │            ^^^ Context

note: 
   ┌─ simple_open_auction.fe:44:12
   │
44 │         if ctx.msg_value() <= self.highest_bid {
   │            ^^^^^^^^^^^^^^^    ^^^^ SimpleOpenAuction
   │            │                   
   │            u256

note: 
   ┌─ simple_open_auction.fe:44:31
   │
44 │         if ctx.msg_value() <= self.highest_bid {
   │                               ^^^^^^^^^^^^^^^^ SPtr<u256>

note: 
   ┌─ simple_open_auction.fe:44:12
   │
44 │         if ctx.msg_value() <= self.highest_bid {
   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
45 │             revert BidNotHighEnough(highest_bid: self.highest_bid)
   │                                                  ^^^^ SimpleOpenAuction

note: 
   ┌─ simple_open_auction.fe:45:50
   │
45 │             revert BidNotHighEnough(highest_bid: self.highest_bid)
   │                                                  ^^^^^^^^^^^^^^^^ SPtr<u256>

note: 
   ┌─ simple_open_auction.fe:45:20
   │
45 │             revert BidNotHighEnough(highest_bid: self.highest_bid)
   │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ BidNotHighEnough
46 │         }
47 │         if self.highest_bid != 0 {
   │            ^^^^ SimpleOpenAuction

note: 
   ┌─ simple_open_auction.fe:47:12
   │
47 │         if self.highest_bid != 0 {
   │            ^^^^^^^^^^^^^^^^    ^ u256
   │            │                    
   │            SPtr<u256>

note: 
   ┌─ simple_open_auction.fe:47:12
   │
47 │         if self.highest_bid != 0 {
   │            ^^^^^^^^^^^^^^^^^^^^^ bool
48 │             self.pending_returns[self.highest_bidder] += self.highest_bid
   │             ^^^^ SimpleOpenAuction

note: 
   ┌─ simple_open_auction.fe:48:13
   │
48 │             self.pending_returns[self.highest_bidder] += self.highest_bid
   │             ^^^^^^^^^^^^^^^^^^^^ ^^^^ SimpleOpenAuction
   │             │                     
   │             SPtr<Map<address, u256>>

note: 
   ┌─ simple_open_auction.fe:48:34
   │
48 │             self.pending_returns[self.highest_bidder] += self.highest_bid
   │                                  ^^^^^^^^^^^^^^^^^^^ SPtr<address>

note: 
   ┌─ simple_open_auction.fe:48:13
   │
48 │             self.pending_returns[self.highest_bidder] += self.highest_bid
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^ SimpleOpenAuction
   │             │                                             
   │             SPtr<u256>

note: 
   ┌─ simple_open_auction.fe:48:58
   │
48 │             self.pending_returns[self.highest_bidder] += self.highest_bid
   │                                                          ^^^^^^^^^^^^^^^^ SPtr<u256>
49 │         }
50 │         self.highest_bidder = ctx.msg_sender()
   │         ^^^^ SimpleOpenAuction

note: 
   ┌─ simple_open_auction.fe:50:9
   │
50 │         self.highest_bidder = ctx.msg_sender()
   │         ^^^^^^^^^^^^^^^^^^^   ^^^ Context
   │         │                      
   │         SPtr<address>

note: 
   ┌─ simple_open_auction.fe:50:31
   │
50 │         self.highest_bidder = ctx.msg_sender()
   │                               ^^^^^^^^^^^^^^^^ address
51 │         self.highest_bid = ctx.msg_value()
   │         ^^^^ SimpleOpenAuction

note: 
   ┌─ simple_open_auction.fe:51:9
   │
51 │         self.highest_bid = ctx.msg_value()
   │         ^^^^^^^^^^^^^^^^   ^^^ Context
   │         │                   
   │         SPtr<u256>

note: 
   ┌─ simple_open_auction.fe:51:28
   │
51 │         self.highest_bid = ctx.msg_value()
   │                            ^^^^^^^^^^^^^^^ u256
52 │ 
53 │         emit HighestBidIncreased(ctx, bidder: ctx.msg_sender(), amount: ctx.msg_value())
   │                                  ^^^          ^^^ Context
   │                                  │             
   │                                  Context

note: 
   ┌─ simple_open_auction.fe:53:47
   │
53 │         emit HighestBidIncreased(ctx, bidder: ctx.msg_sender(), amount: ctx.msg_value())
   │                                               ^^^^^^^^^^^^^^^^          ^^^ Context
   │                                               │                          
   │                                               address

note: 
   ┌─ simple_open_auction.fe:53:73
   │
53 │         emit HighestBidIncreased(ctx, bidder: ctx.msg_sender(), amount: ctx.msg_value())
   │                                                                         ^^^^^^^^^^^^^^^ u256

note: 
   ┌─ simple_open_auction.fe:56:5
   │  
56 │ ╭     pub fn withdraw(self, ctx: Context) -> bool {
57 │ │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
58 │ │ 
59 │ │         if amount > 0 {
   · │
63 │ │         return true
64 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> bool

note: 
   ┌─ simple_open_auction.fe:57:13
   │
57 │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
   │             ^^^^^^ u256

note: 
   ┌─ simple_open_auction.fe:57:28
   │
57 │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
   │                            ^^^^ SimpleOpenAuction

note: 
   ┌─ simple_open_auction.fe:57:28
   │
57 │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
   │                            ^^^^^^^^^^^^^^^^^^^^ ^^^ Context
   │                            │                     
   │                            SPtr<Map<address, u256>>

note: 
   ┌─ simple_open_auction.fe:57:49
   │
57 │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
   │                                                 ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ simple_open_auction.fe:57:28
   │
57 │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
   │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SPtr<u256>
58 │ 
59 │         if amount > 0 {
   │            ^^^^^^   ^ u256
   │            │         
   │            u256

note: 
   ┌─ simple_open_auction.fe:59:12
   │
59 │         if amount > 0 {
   │            ^^^^^^^^^^ bool
60 │             self.pending_returns[ctx.msg_sender()] = 0
   │             ^^^^ SimpleOpenAuction

note: 
   ┌─ simple_open_auction.fe:60:13
   │
60 │             self.pending_returns[ctx.msg_sender()] = 0
   │             ^^^^^^^^^^^^^^^^^^^^ ^^^ Context
   │             │                     
   │             SPtr<Map<address, u256>>

note: 
   ┌─ simple_open_auction.fe:60:34
   │
60 │             self.pending_returns[ctx.msg_sender()] = 0
   │                                  ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ simple_open_auction.fe:60:13
   │
60 │             self.pending_returns[ctx.msg_sender()] = 0
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^ u256
   │             │                                         
   │             SPtr<u256>
61 │             ctx.send_value(to: ctx.msg_sender(), wei: amount)
   │             ^^^                ^^^ Context
   │             │                   
   │             Context

note: 
   ┌─ simple_open_auction.fe:61:32
   │
61 │             ctx.send_value(to: ctx.msg_sender(), wei: amount)
   │                                ^^^^^^^^^^^^^^^^       ^^^^^^ u256
   │                                │                       
   │                                address

note: 
   ┌─ simple_open_auction.fe:61:13
   │
61 │             ctx.send_value(to: ctx.msg_sender(), wei: amount)
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
62 │         }
63 │         return true
   │                ^^^^ bool

note: 
   ┌─ simple_open_auction.fe:66:5
   │  
66 │ ╭     pub fn action_end(self, ctx: Context) {
67 │ │         if ctx.block_timestamp() <= self.auction_end_time {
68 │ │             revert AuctionNotYetEnded()
69 │ │         }
   · │
76 │ │         ctx.send_value(to: self.beneficiary, wei: self.highest_bid)
77 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> ()

note: 
   ┌─ simple_open_auction.fe:67:12
   │
67 │         if ctx.block_timestamp() <= self.auction_end_time {
   │            ^^^ Context

note: 
   ┌─ simple_open_auction.fe:67:12
   │
67 │         if ctx.block_timestamp() <= self.auction_end_time {
   │            ^^^^^^^^^^^^^^^^^^^^^    ^^^^ SimpleOpenAuction
   │            │                         
   │            u256

note: 
   ┌─ simple_open_auction.fe:67:37
   │
67 │         if ctx.block_timestamp() <= self.auction_end_time {
   │                                     ^^^^^^^^^^^^^^^^^^^^^ SPtr<u256>

note: 
   ┌─ simple_open_auction.fe:67:12
   │
67 │         if ctx.block_timestamp() <= self.auction_end_time {
   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
68 │             revert AuctionNotYetEnded()
   │                    ^^^^^^^^^^^^^^^^^^^^ AuctionNotYetEnded
69 │         }
70 │         if self.ended {
   │            ^^^^ SimpleOpenAuction

note: 
   ┌─ simple_open_auction.fe:70:12
   │
70 │         if self.ended {
   │            ^^^^^^^^^^ SPtr<bool>
71 │             revert AuctionEndAlreadyCalled()
   │                    ^^^^^^^^^^^^^^^^^^^^^^^^^ AuctionEndAlreadyCalled
72 │         }
73 │         self.ended = true
   │         ^^^^ SimpleOpenAuction

note: 
   ┌─ simple_open_auction.fe:73:9
   │
73 │         self.ended = true
   │         ^^^^^^^^^^   ^^^^ bool
   │         │             
   │         SPtr<bool>
74 │         emit AuctionEnded(ctx, winner: self.highest_bidder, amount: self.highest_bid)
   │                           ^^^          ^^^^ SimpleOpenAuction
   │                           │             
   │                           Context

note: 
   ┌─ simple_open_auction.fe:74:40
   │
74 │         emit AuctionEnded(ctx, winner: self.highest_bidder, amount: self.highest_bid)
   │                                        ^^^^^^^^^^^^^^^^^^^          ^^^^ SimpleOpenAuction
   │                                        │                             
   │                                        SPtr<address>

note: 
   ┌─ simple_open_auction.fe:74:69
   │
74 │         emit AuctionEnded(ctx, winner: self.highest_bidder, amount: self.highest_bid)
   │                                                                     ^^^^^^^^^^^^^^^^ SPtr<u256>
75 │ 
76 │         ctx.send_value(to: self.beneficiary, wei: self.highest_bid)
   │         ^^^                ^^^^ SimpleOpenAuction
   │         │                   
   │         Context

note: 
   ┌─ simple_open_auction.fe:76:28
   │
76 │         ctx.send_value(to: self.beneficiary, wei: self.highest_bid)
   │                            ^^^^^^^^^^^^^^^^       ^^^^ SimpleOpenAuction
   │                            │                       
   │                            SPtr<address>

note: 
   ┌─ simple_open_auction.fe:76:51
   │
76 │         ctx.send_value(to: self.beneficiary, wei: self.highest_bid)
   │                                                   ^^^^^^^^^^^^^^^^ SPtr<u256>

note: 
   ┌─ simple_open_auction.fe:76:9
   │
76 │         ctx.send_value(to: self.beneficiary, wei: self.highest_bid)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()



---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ simple_open_auction.fe:7:5
  │
7 │     pub highest_bid: u256
  │     ^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ simple_open_auction.fe:13:5
   │
13 │     pub bidder: address
   │     ^^^^^^^^^^^^^^^^^^^ address
14 │     pub amount: u256
   │     ^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ simple_open_auction.fe:19:5
   │
19 │     pub winner: address
   │     ^^^^^^^^^^^^^^^^^^^ address
20 │     pub amount: u256
   │     ^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ simple_open_auction.fe:25:5
   │
25 │     auction_end_time: u256
   │     ^^^^^^^^^^^^^^^^^^^^^^ u256
26 │     beneficiary: address
   │     ^^^^^^^^^^^^^^^^^^^^ address
27 │ 
28 │     highest_bidder: address
   │     ^^^^^^^^^^^^^^^^^^^^^^^ address
29 │     highest_bid: u256
   │     ^^^^^^^^^^^^^^^^^ u256
30 │ 
31 │     pending_returns: Map<address, u256>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>
32 │ 
33 │     ended: bool
   │     ^^^^^^^^^^^ bool

note: 
   ┌─ simple_open_auction.fe:42:5
   │  
42 │ ╭     pub fn bid(self, ctx: Context) {
43 │ │         if ctx.block_timestamp() > self.auction_end_time {
44 │ │             revert AuctionAlreadyEnded()
45 │ │         }
   · │
55 │ │         ctx.emit(HighestBidIncreased(bidder: ctx.msg_sender(), amount: ctx.msg_value()))
56 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> ()

note: 
   ┌─ simple_open_auction.fe:43:12
   │
43 │         if ctx.block_timestamp() > self.auction_end_time {
   │            ^^^ Context: Memory

note: 
   ┌─ simple_open_auction.fe:43:12
   │
43 │         if ctx.block_timestamp() > self.auction_end_time {
   │            ^^^^^^^^^^^^^^^^^^^^^   ^^^^ SimpleOpenAuction: Value
   │            │                        
   │            u256: Value

note: 
   ┌─ simple_open_auction.fe:43:36
   │
43 │         if ctx.block_timestamp() > self.auction_end_time {
   │                                    ^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Value

note: 
   ┌─ simple_open_auction.fe:43:12
   │
43 │         if ctx.block_timestamp() > self.auction_end_time {
   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
44 │             revert AuctionAlreadyEnded()
   │                    ^^^^^^^^^^^^^^^^^^^^^ AuctionAlreadyEnded: Memory
45 │         }
46 │         if ctx.msg_value() <= self.highest_bid {
   │            ^^^ Context: Memory

note: 
   ┌─ simple_open_auction.fe:46:12
   │
46 │         if ctx.msg_value() <= self.highest_bid {
   │            ^^^^^^^^^^^^^^^    ^^^^ SimpleOpenAuction: Value
   │            │                   
   │            u256: Value

note: 
   ┌─ simple_open_auction.fe:46:31
   │
46 │         if ctx.msg_value() <= self.highest_bid {
   │                               ^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(3) } => Value

note: 
   ┌─ simple_open_auction.fe:46:12
   │
46 │         if ctx.msg_value() <= self.highest_bid {
   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
47 │             revert BidNotHighEnough(highest_bid: self.highest_bid)
   │                                                  ^^^^ SimpleOpenAuction: Value

note: 
   ┌─ simple_open_auction.fe:47:50
   │
47 │             revert BidNotHighEnough(highest_bid: self.highest_bid)
   │                                                  ^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(3) } => Value

note: 
   ┌─ simple_open_auction.fe:47:20
   │
47 │             revert BidNotHighEnough(highest_bid: self.highest_bid)
   │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ BidNotHighEnough: Memory
48 │         }
49 │         if self.highest_bid != 0 {
   │            ^^^^ SimpleOpenAuction: Value

note: 
   ┌─ simple_open_auction.fe:49:12
   │
49 │         if self.highest_bid != 0 {
   │            ^^^^^^^^^^^^^^^^    ^ u256: Value
   │            │                    
   │            u256: Storage { nonce: Some(3) } => Value

note: 
   ┌─ simple_open_auction.fe:49:12
   │
49 │         if self.highest_bid != 0 {
   │            ^^^^^^^^^^^^^^^^^^^^^ bool: Value
50 │             self.pending_returns[self.highest_bidder] += self.highest_bid
   │             ^^^^ SimpleOpenAuction: Value

note: 
   ┌─ simple_open_auction.fe:50:13
   │
50 │             self.pending_returns[self.highest_bidder] += self.highest_bid
   │             ^^^^^^^^^^^^^^^^^^^^ ^^^^ SimpleOpenAuction: Value
   │             │                     
   │             Map<address, u256>: Storage { nonce: Some(4) }

note: 
   ┌─ simple_open_auction.fe:50:34
   │
50 │             self.pending_returns[self.highest_bidder] += self.highest_bid
   │                                  ^^^^^^^^^^^^^^^^^^^ address: Storage { nonce: Some(2) } => Value

note: 
   ┌─ simple_open_auction.fe:50:13
   │
50 │             self.pending_returns[self.highest_bidder] += self.highest_bid
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^ SimpleOpenAuction: Value
   │             │                                             
   │             u256: Storage { nonce: None }

note: 
   ┌─ simple_open_auction.fe:50:58
   │
50 │             self.pending_returns[self.highest_bidder] += self.highest_bid
   │                                                          ^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(3) }
51 │         }
52 │         self.highest_bidder = ctx.msg_sender()
   │         ^^^^ SimpleOpenAuction: Value

note: 
   ┌─ simple_open_auction.fe:52:9
   │
52 │         self.highest_bidder = ctx.msg_sender()
   │         ^^^^^^^^^^^^^^^^^^^   ^^^ Context: Memory
   │         │                      
   │         address: Storage { nonce: Some(2) }

note: 
   ┌─ simple_open_auction.fe:52:31
   │
52 │         self.highest_bidder = ctx.msg_sender()
   │                               ^^^^^^^^^^^^^^^^ address: Value
53 │         self.highest_bid = ctx.msg_value()
   │         ^^^^ SimpleOpenAuction: Value

note: 
   ┌─ simple_open_auction.fe:53:9
   │
53 │         self.highest_bid = ctx.msg_value()
   │         ^^^^^^^^^^^^^^^^   ^^^ Context: Memory
   │         │                   
   │         u256: Storage { nonce: Some(3) }

note: 
   ┌─ simple_open_auction.fe:53:28
   │
53 │         self.highest_bid = ctx.msg_value()
   │                            ^^^^^^^^^^^^^^^ u256: Value
54 │ 
55 │         ctx.emit(HighestBidIncreased(bidder: ctx.msg_sender(), amount: ctx.msg_value()))
   │         ^^^                                  ^^^ Context: Memory
   │         │                                     
   │         Context: Memory

note: 
   ┌─ simple_open_auction.fe:55:46
   │
55 │         ctx.emit(HighestBidIncreased(bidder: ctx.msg_sender(), amount: ctx.msg_value()))
   │                                              ^^^^^^^^^^^^^^^^          ^^^ Context: Memory
   │                                              │                          
   │                                              address: Value

note: 
   ┌─ simple_open_auction.fe:55:72
   │
55 │         ctx.emit(HighestBidIncreased(bidder: ctx.msg_sender(), amount: ctx.msg_value()))
   │                                                                        ^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ simple_open_auction.fe:55:18
   │
55 │         ctx.emit(HighestBidIncreased(bidder: ctx.msg_sender(), amount: ctx.msg_value()))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ HighestBidIncreased: Memory

note: 
   ┌─ simple_open_auction.fe:55:9
   │
55 │         ctx.emit(HighestBidIncreased(bidder: ctx.msg_sender(), amount: ctx.msg_value()))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value

note: 
   ┌─ simple_open_auction.fe:58:5
   │  
58 │ ╭     pub fn withdraw(self, ctx: Context) -> bool {
59 │ │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
60 │ │ 
61 │ │         if amount > 0 {
   · │
65 │ │         return true
66 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> bool

note: 
   ┌─ simple_open_auction.fe:59:13
   │
59 │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
   │             ^^^^^^ u256

note: 
   ┌─ simple_open_auction.fe:59:28
   │
59 │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
   │                            ^^^^ SimpleOpenAuction: Value

note: 
   ┌─ simple_open_auction.fe:59:28
   │
59 │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
   │                            ^^^^^^^^^^^^^^^^^^^^ ^^^ Context: Memory
   │                            │                     
   │                            Map<address, u256>: Storage { nonce: Some(4) }

note: 
   ┌─ simple_open_auction.fe:59:49
   │
59 │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
   │                                                 ^^^^^^^^^^^^^^^^ address: Value

note: 
   ┌─ simple_open_auction.fe:59:28
   │
59 │         let amount: u256 = self.pending_returns[ctx.msg_sender()]
   │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Value
60 │ 
61 │         if amount > 0 {
   │            ^^^^^^   ^ u256: Value
   │            │         
   │            u256: Value

note: 
   ┌─ simple_open_auction.fe:61:12
   │
61 │         if amount > 0 {
   │            ^^^^^^^^^^ bool: Value
62 │             self.pending_returns[ctx.msg_sender()] = 0
   │             ^^^^ SimpleOpenAuction: Value

note: 
   ┌─ simple_open_auction.fe:62:13
   │
62 │             self.pending_returns[ctx.msg_sender()] = 0
   │             ^^^^^^^^^^^^^^^^^^^^ ^^^ Context: Memory
   │             │                     
   │             Map<address, u256>: Storage { nonce: Some(4) }

note: 
   ┌─ simple_open_auction.fe:62:34
   │
62 │             self.pending_returns[ctx.msg_sender()] = 0
   │                                  ^^^^^^^^^^^^^^^^ address: Value

note: 
   ┌─ simple_open_auction.fe:62:13
   │
62 │             self.pending_returns[ctx.msg_sender()] = 0
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^ u256: Value
   │             │                                         
   │             u256: Storage { nonce: None }
63 │             ctx.send_value(to: ctx.msg_sender(), wei: amount)
   │             ^^^                ^^^ Context: Memory
   │             │                   
   │             Context: Memory

note: 
   ┌─ simple_open_auction.fe:63:32
   │
63 │             ctx.send_value(to: ctx.msg_sender(), wei: amount)
   │                                ^^^^^^^^^^^^^^^^       ^^^^^^ u256: Value
   │                                │                       
   │                                address: Value

note: 
   ┌─ simple_open_auction.fe:63:13
   │
63 │             ctx.send_value(to: ctx.msg_sender(), wei: amount)
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
64 │         }
65 │         return true
   │                ^^^^ bool: Value

note: 
   ┌─ simple_open_auction.fe:68:5
   │  
68 │ ╭     pub fn action_end(self, ctx: Context) {
69 │ │         if ctx.block_timestamp() <= self.auction_end_time {
70 │ │             revert AuctionNotYetEnded()
71 │ │         }
   · │
78 │ │         ctx.send_value(to: self.beneficiary, wei: self.highest_bid)
79 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> ()

note: 
   ┌─ simple_open_auction.fe:69:12
   │
69 │         if ctx.block_timestamp() <= self.auction_end_time {
   │            ^^^ Context: Memory

note: 
   ┌─ simple_open_auction.fe:69:12
   │
69 │         if ctx.block_timestamp() <= self.auction_end_time {
   │            ^^^^^^^^^^^^^^^^^^^^^    ^^^^ SimpleOpenAuction: Value
   │            │                         
   │            u256: Value

note: 
   ┌─ simple_open_auction.fe:69:37
   │
69 │         if ctx.block_timestamp() <= self.auction_end_time {
   │                                     ^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Value

note: 
   ┌─ simple_open_auction.fe:69:12
   │
69 │         if ctx.block_timestamp() <= self.auction_end_time {
   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
70 │             revert AuctionNotYetEnded()
   │                    ^^^^^^^^^^^^^^^^^^^^ AuctionNotYetEnded: Memory
71 │         }
72 │         if self.ended {
   │            ^^^^ SimpleOpenAuction: Value

note: 
   ┌─ simple_open_auction.fe:72:12
   │
72 │         if self.ended {
   │            ^^^^^^^^^^ bool: Storage { nonce: Some(5) } => Value
73 │             revert AuctionEndAlreadyCalled()
   │                    ^^^^^^^^^^^^^^^^^^^^^^^^^ AuctionEndAlreadyCalled: Memory
74 │         }
75 │         self.ended = true
   │         ^^^^ SimpleOpenAuction: Value

note: 
   ┌─ simple_open_auction.fe:75:9
   │
75 │         self.ended = true
   │         ^^^^^^^^^^   ^^^^ bool: Value
   │         │             
   │         bool: Storage { nonce: Some(5) }
76 │         ctx.emit(AuctionEnded(winner: self.highest_bidder, amount: self.highest_bid))
   │         ^^^                           ^^^^ SimpleOpenAuction: Value
   │         │                              
   │         Context: Memory

note: 
   ┌─ simple_open_auction.fe:76:39
   │
76 │         ctx.emit(AuctionEnded(winner: self.highest_bidder, amount: self.highest_bid))
   │                                       ^^^^^^^^^^^^^^^^^^^          ^^^^ SimpleOpenAuction: Value
   │                                       │                             
   │                                       address: Storage { nonce: Some(2) } => Value

note: 
   ┌─ simple_open_auction.fe:76:68
   │
76 │         ctx.emit(AuctionEnded(winner: self.highest_bidder, amount: self.highest_bid))
   │                                                                    ^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(3) } => Value

note: 
   ┌─ simple_open_auction.fe:76:18
   │
76 │         ctx.emit(AuctionEnded(winner: self.highest_bidder, amount: self.highest_bid))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ AuctionEnded: Memory

note: 
   ┌─ simple_open_auction.fe:76:9
   │
76 │         ctx.emit(AuctionEnded(winner: self.highest_bidder, amount: self.highest_bid))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
77 │ 
78 │         ctx.send_value(to: self.beneficiary, wei: self.highest_bid)
   │         ^^^                ^^^^ SimpleOpenAuction: Value
   │         │                   
   │         Context: Memory

note: 
   ┌─ simple_open_auction.fe:78:28
   │
78 │         ctx.send_value(to: self.beneficiary, wei: self.highest_bid)
   │                            ^^^^^^^^^^^^^^^^       ^^^^ SimpleOpenAuction: Value
   │                            │                       
   │                            address: Storage { nonce: Some(1) } => Value

note: 
   ┌─ simple_open_auction.fe:78:51
   │
78 │         ctx.send_value(to: self.beneficiary, wei: self.highest_bid)
   │                                                   ^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(3) } => Value

note: 
   ┌─ simple_open_auction.fe:78:9
   │
78 │         ctx.send_value(to: self.beneficiary, wei: self.highest_bid)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value



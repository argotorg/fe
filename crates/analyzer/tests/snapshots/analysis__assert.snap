---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ assert.fe:2:5
  │
2 │     my_bool: bool
  │     ^^^^^^^^^^^^^ bool
3 │     my_string: String<5>
  │     ^^^^^^^^^^^^^^^^^^^^ String<5>

note: 
  ┌─ assert.fe:5:5
  │  
5 │ ╭     pub fn bar(baz: u256):
6 │ │         assert baz > 5
  │ ╰──────────────────────^ attributes hash: 1354114416662435681
  │  
  = FunctionSignature {
        self_decl: None,
        ctx_decl: None,
        params: [
            FunctionParam {
                name: "baz",
                typ: Ok(
                    Base(
                        Numeric(
                            U256,
                        ),
                    ),
                ),
            },
        ],
        return_type: Ok(
            Base(
                Unit,
            ),
        ),
    }

note: 
  ┌─ assert.fe:6:16
  │
6 │         assert baz > 5
  │                ^^^   ^ u256: Value
  │                │      
  │                u256: Value

note: 
  ┌─ assert.fe:6:16
  │
6 │         assert baz > 5
  │                ^^^^^^^ bool: Value

note: 
  ┌─ assert.fe:8:5
  │  
8 │ ╭     pub fn revert_with_static_string(baz: u256):
9 │ │         assert baz > 5, "Must be greater than five"
  │ ╰───────────────────────────────────────────────────^ attributes hash: 1354114416662435681
  │  
  = FunctionSignature {
        self_decl: None,
        ctx_decl: None,
        params: [
            FunctionParam {
                name: "baz",
                typ: Ok(
                    Base(
                        Numeric(
                            U256,
                        ),
                    ),
                ),
            },
        ],
        return_type: Ok(
            Base(
                Unit,
            ),
        ),
    }

note: 
  ┌─ assert.fe:9:16
  │
9 │         assert baz > 5, "Must be greater than five"
  │                ^^^   ^ u256: Value
  │                │      
  │                u256: Value

note: 
  ┌─ assert.fe:9:16
  │
9 │         assert baz > 5, "Must be greater than five"
  │                ^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<25>: Memory
  │                │         
  │                bool: Value

note: 
   ┌─ assert.fe:11:5
   │  
11 │ ╭     pub fn revert_with(baz: u256, reason: String<1000>):
12 │ │         assert baz > 5, reason
   │ ╰──────────────────────────────^ attributes hash: 10290486639185495177
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "baz",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "reason",
                 typ: Ok(
                     String(
                         FeString {
                             max_size: 1000,
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ assert.fe:12:16
   │
12 │         assert baz > 5, reason
   │                ^^^   ^ u256: Value
   │                │      
   │                u256: Value

note: 
   ┌─ assert.fe:12:16
   │
12 │         assert baz > 5, reason
   │                ^^^^^^^  ^^^^^^ String<1000>: Memory
   │                │         
   │                bool: Value

note: 
   ┌─ assert.fe:14:5
   │  
14 │ ╭     pub fn assert_sto_bool(self):
15 │ │         self.my_bool = false
16 │ │         assert self.my_bool
   │ ╰───────────────────────────^ attributes hash: 18235041182630809162
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ assert.fe:15:9
   │
15 │         self.my_bool = false
   │         ^^^^ Foo: Value

note: 
   ┌─ assert.fe:15:9
   │
15 │         self.my_bool = false
   │         ^^^^^^^^^^^^   ^^^^^ bool: Value
   │         │               
   │         bool: Storage { nonce: Some(0) }
16 │         assert self.my_bool
   │                ^^^^ Foo: Value

note: 
   ┌─ assert.fe:16:16
   │
16 │         assert self.my_bool
   │                ^^^^^^^^^^^^ bool: Storage { nonce: Some(0) } => Value

note: 
   ┌─ assert.fe:18:5
   │  
18 │ ╭     pub fn assert_sto_string_msg(self):
19 │ │         self.my_string = "hello"
20 │ │         assert false, self.my_string.to_mem()
   │ ╰─────────────────────────────────────────────^ attributes hash: 18235041182630809162
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ assert.fe:19:9
   │
19 │         self.my_string = "hello"
   │         ^^^^ Foo: Value

note: 
   ┌─ assert.fe:19:9
   │
19 │         self.my_string = "hello"
   │         ^^^^^^^^^^^^^^   ^^^^^^^ String<5>: Memory
   │         │                 
   │         String<5>: Storage { nonce: Some(1) }
20 │         assert false, self.my_string.to_mem()
   │                ^^^^^  ^^^^ Foo: Value
   │                │       
   │                bool: Value

note: 
   ┌─ assert.fe:20:23
   │
20 │         assert false, self.my_string.to_mem()
   │                       ^^^^^^^^^^^^^^ String<5>: Storage { nonce: Some(1) }

note: 
   ┌─ assert.fe:20:23
   │
20 │         assert false, self.my_string.to_mem()
   │                       ^^^^^^^^^^^^^^^^^^^^^^^ String<5>: Storage { nonce: Some(1) } => Memory



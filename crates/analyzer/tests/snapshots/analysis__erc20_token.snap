---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ erc20_token.fe:2:5
  │
2 │     _balances: Map<address, u256>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>
3 │     _allowances: Map<address, Map<address, u256>>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>
4 │     _total_supply: u256
  │     ^^^^^^^^^^^^^^^^^^^ u256
5 │     _name: String<100>
  │     ^^^^^^^^^^^^^^^^^^ String<100>
6 │     _symbol: String<100>
  │     ^^^^^^^^^^^^^^^^^^^^ String<100>
7 │     _decimals: u8
  │     ^^^^^^^^^^^^^ u8

note: 
   ┌─ erc20_token.fe:10:9
   │
10 │         idx owner: address
   │         ^^^^^^^^^^^^^^^^^^ address
11 │         idx spender: address
   │         ^^^^^^^^^^^^^^^^^^^^ address
12 │         value: u256
   │         ^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:16:9
   │
16 │         idx from: address
   │         ^^^^^^^^^^^^^^^^^ address
17 │         idx to: address
   │         ^^^^^^^^^^^^^^^ address
18 │         value: u256
   │         ^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:28:5
   │  
28 │ ╭     pub fn name(self) -> String<100> {
29 │ │         return self._name.to_mem()
30 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> String<100>

note: 
   ┌─ erc20_token.fe:29:16
   │
29 │         return self._name.to_mem()
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:29:16
   │
29 │         return self._name.to_mem()
   │                ^^^^^^^^^^ SPtr<String<100>>

note: 
   ┌─ erc20_token.fe:29:16
   │
29 │         return self._name.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^ String<100>

note: 
   ┌─ erc20_token.fe:32:5
   │  
32 │ ╭     pub fn symbol(self) -> String<100> {
33 │ │         return self._symbol.to_mem()
34 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> String<100>

note: 
   ┌─ erc20_token.fe:33:16
   │
33 │         return self._symbol.to_mem()
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:33:16
   │
33 │         return self._symbol.to_mem()
   │                ^^^^^^^^^^^^ SPtr<String<100>>

note: 
   ┌─ erc20_token.fe:33:16
   │
33 │         return self._symbol.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^ String<100>

note: 
   ┌─ erc20_token.fe:36:5
   │  
36 │ ╭     pub fn decimals(self) -> u8 {
37 │ │         return self._decimals
38 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> u8

note: 
   ┌─ erc20_token.fe:37:16
   │
37 │         return self._decimals
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:37:16
   │
37 │         return self._decimals
   │                ^^^^^^^^^^^^^^ SPtr<u8>

note: 
   ┌─ erc20_token.fe:40:5
   │  
40 │ ╭     pub fn totalSupply(self) -> u256 {
41 │ │         return self._total_supply
42 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> u256

note: 
   ┌─ erc20_token.fe:41:16
   │
41 │         return self._total_supply
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:41:16
   │
41 │         return self._total_supply
   │                ^^^^^^^^^^^^^^^^^^ SPtr<u256>

note: 
   ┌─ erc20_token.fe:44:5
   │  
44 │ ╭     pub fn balanceOf(self, _ account: address) -> u256 {
45 │ │         return self._balances[account]
46 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: Some("_"), name: account, typ: address }] -> u256

note: 
   ┌─ erc20_token.fe:45:16
   │
45 │         return self._balances[account]
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:45:16
   │
45 │         return self._balances[account]
   │                ^^^^^^^^^^^^^^ ^^^^^^^ address
   │                │               
   │                SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:45:16
   │
45 │         return self._balances[account]
   │                ^^^^^^^^^^^^^^^^^^^^^^^ SPtr<u256>

note: 
   ┌─ erc20_token.fe:48:5
   │  
48 │ ╭     pub fn transfer(self, ctx: Context, recipient: address, value: u256) -> bool {
49 │ │         self._transfer(ctx, sender: ctx.msg_sender(), recipient, value)
50 │ │         return true
51 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: recipient, typ: address }, { label: None, name: value, typ: u256 }] -> bool

note: 
   ┌─ erc20_token.fe:49:9
   │
49 │         self._transfer(ctx, sender: ctx.msg_sender(), recipient, value)
   │         ^^^^           ^^^          ^^^ Context
   │         │              │             
   │         │              Context
   │         ERC20

note: 
   ┌─ erc20_token.fe:49:37
   │
49 │         self._transfer(ctx, sender: ctx.msg_sender(), recipient, value)
   │                                     ^^^^^^^^^^^^^^^^  ^^^^^^^^^  ^^^^^ u256
   │                                     │                 │           
   │                                     │                 address
   │                                     address

note: 
   ┌─ erc20_token.fe:49:9
   │
49 │         self._transfer(ctx, sender: ctx.msg_sender(), recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
50 │         return true
   │                ^^^^ bool

note: 
   ┌─ erc20_token.fe:53:5
   │  
53 │ ╭     pub fn allowance(self, owner: address, spender: address) -> u256 {
54 │ │         return self._allowances[owner][spender]
55 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: owner, typ: address }, { label: None, name: spender, typ: address }] -> u256

note: 
   ┌─ erc20_token.fe:54:16
   │
54 │         return self._allowances[owner][spender]
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:54:16
   │
54 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^ ^^^^^ address
   │                │                 
   │                SPtr<Map<address, Map<address, u256>>>

note: 
   ┌─ erc20_token.fe:54:16
   │
54 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address
   │                │                        
   │                SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:54:16
   │
54 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SPtr<u256>

note: 
   ┌─ erc20_token.fe:57:5
   │  
57 │ ╭     pub fn approve(self, ctx: Context, spender: address, value: u256) -> bool {
58 │ │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
59 │ │         return true
60 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: spender, typ: address }, { label: None, name: value, typ: u256 }] -> bool

note: 
   ┌─ erc20_token.fe:58:9
   │
58 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
   │         ^^^^          ^^^         ^^^ Context
   │         │             │            
   │         │             Context
   │         ERC20

note: 
   ┌─ erc20_token.fe:58:35
   │
58 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
   │                                   ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^ u256
   │                                   │                 │         
   │                                   │                 address
   │                                   address

note: 
   ┌─ erc20_token.fe:58:9
   │
58 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
59 │         return true
   │                ^^^^ bool

note: 
   ┌─ erc20_token.fe:62:5
   │  
62 │ ╭     pub fn transferFrom(self, ctx: Context, sender: address, recipient: address, value: u256) -> bool {
63 │ │         assert self._allowances[sender][ctx.msg_sender()] >= value
64 │ │         self._transfer(ctx, sender, recipient, value)
65 │ │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
66 │ │         return true
67 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: sender, typ: address }, { label: None, name: recipient, typ: address }, { label: None, name: value, typ: u256 }] -> bool

note: 
   ┌─ erc20_token.fe:63:16
   │
63 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:63:16
   │
63 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^ ^^^^^^ address
   │                │                 
   │                SPtr<Map<address, Map<address, u256>>>

note: 
   ┌─ erc20_token.fe:63:16
   │
63 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^ Context
   │                │                         
   │                SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:63:41
   │
63 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                                         ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:63:16
   │
63 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^ u256
   │                │                                              
   │                SPtr<u256>

note: 
   ┌─ erc20_token.fe:63:16
   │
63 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
64 │         self._transfer(ctx, sender, recipient, value)
   │         ^^^^           ^^^  ^^^^^^  ^^^^^^^^^  ^^^^^ u256
   │         │              │    │       │           
   │         │              │    │       address
   │         │              │    address
   │         │              Context
   │         ERC20

note: 
   ┌─ erc20_token.fe:64:9
   │
64 │         self._transfer(ctx, sender, recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
65 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │         ^^^^          ^^^         ^^^^^^           ^^^ Context
   │         │             │           │                 
   │         │             │           address
   │         │             Context
   │         ERC20

note: 
   ┌─ erc20_token.fe:65:52
   │
65 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                    ^^^^^^^^^^^^^^^^         ^^^^ ERC20
   │                                                    │                         
   │                                                    address

note: 
   ┌─ erc20_token.fe:65:77
   │
65 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                                             ^^^^^^^^^^^^^^^^ ^^^^^^ address
   │                                                                             │                 
   │                                                                             SPtr<Map<address, Map<address, u256>>>

note: 
   ┌─ erc20_token.fe:65:77
   │
65 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^ Context
   │                                                                             │                         
   │                                                                             SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:65:102
   │
65 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                                                                      ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:65:77
   │
65 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                                                                             │                                             
   │                                                                             SPtr<u256>

note: 
   ┌─ erc20_token.fe:65:77
   │
65 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:65:9
   │
65 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
66 │         return true
   │                ^^^^ bool

note: 
   ┌─ erc20_token.fe:69:5
   │  
69 │ ╭     pub fn increaseAllowance(self, ctx: Context, spender: address, addedValue: u256) -> bool {
70 │ │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
71 │ │         return true
72 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: spender, typ: address }, { label: None, name: addedValue, typ: u256 }] -> bool

note: 
   ┌─ erc20_token.fe:70:9
   │
70 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │         ^^^^          ^^^         ^^^ Context
   │         │             │            
   │         │             Context
   │         ERC20

note: 
   ┌─ erc20_token.fe:70:35
   │
70 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                   ^^^^^^^^^^^^^^^^  ^^^^^^^         ^^^^ ERC20
   │                                   │                 │                
   │                                   │                 address
   │                                   address

note: 
   ┌─ erc20_token.fe:70:69
   │
70 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                                     ^^^^^^^^^^^^^^^^ ^^^ Context
   │                                                                     │                 
   │                                                                     SPtr<Map<address, Map<address, u256>>>

note: 
   ┌─ erc20_token.fe:70:86
   │
70 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                                                      ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:70:69
   │
70 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address
   │                                                                     │                                   
   │                                                                     SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:70:69
   │
70 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^ u256
   │                                                                     │                                              
   │                                                                     SPtr<u256>

note: 
   ┌─ erc20_token.fe:70:69
   │
70 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:70:9
   │
70 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
71 │         return true
   │                ^^^^ bool

note: 
   ┌─ erc20_token.fe:74:5
   │  
74 │ ╭     pub fn decreaseAllowance(self, ctx: Context, spender: address, subtractedValue: u256) -> bool {
75 │ │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
76 │ │         return true
77 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: spender, typ: address }, { label: None, name: subtractedValue, typ: u256 }] -> bool

note: 
   ┌─ erc20_token.fe:75:9
   │
75 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │         ^^^^          ^^^         ^^^ Context
   │         │             │            
   │         │             Context
   │         ERC20

note: 
   ┌─ erc20_token.fe:75:35
   │
75 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                   ^^^^^^^^^^^^^^^^  ^^^^^^^         ^^^^ ERC20
   │                                   │                 │                
   │                                   │                 address
   │                                   address

note: 
   ┌─ erc20_token.fe:75:69
   │
75 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                                     ^^^^^^^^^^^^^^^^ ^^^ Context
   │                                                                     │                 
   │                                                                     SPtr<Map<address, Map<address, u256>>>

note: 
   ┌─ erc20_token.fe:75:86
   │
75 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                                                      ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:75:69
   │
75 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address
   │                                                                     │                                   
   │                                                                     SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:75:69
   │
75 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^ u256
   │                                                                     │                                              
   │                                                                     SPtr<u256>

note: 
   ┌─ erc20_token.fe:75:69
   │
75 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:75:9
   │
75 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
76 │         return true
   │                ^^^^ bool

note: 
   ┌─ erc20_token.fe:79:5
   │  
79 │ ╭     fn _transfer(self, ctx: Context, sender: address, recipient: address, value: u256) {
80 │ │         assert sender != address(0)
81 │ │         assert recipient != address(0)
82 │ │         _before_token_transfer(from: sender, to: recipient, value)
   · │
85 │ │         emit Transfer(ctx, from: sender, to: recipient, value)
86 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: sender, typ: address }, { label: None, name: recipient, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
   ┌─ erc20_token.fe:80:16
   │
80 │         assert sender != address(0)
   │                ^^^^^^            ^ u256
   │                │                  
   │                address

note: 
   ┌─ erc20_token.fe:80:26
   │
80 │         assert sender != address(0)
   │                          ^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:80:16
   │
80 │         assert sender != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^ bool
81 │         assert recipient != address(0)
   │                ^^^^^^^^^            ^ u256
   │                │                     
   │                address

note: 
   ┌─ erc20_token.fe:81:29
   │
81 │         assert recipient != address(0)
   │                             ^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:81:16
   │
81 │         assert recipient != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^ bool
82 │         _before_token_transfer(from: sender, to: recipient, value)
   │                                      ^^^^^^      ^^^^^^^^^  ^^^^^ u256
   │                                      │           │           
   │                                      │           address
   │                                      address

note: 
   ┌─ erc20_token.fe:82:9
   │
82 │         _before_token_transfer(from: sender, to: recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
83 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:83:9
   │
83 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^^^^^^^^^^^ ^^^^^^ address
   │         │               
   │         SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:83:9
   │
83 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20
   │         │                         
   │         SPtr<u256>

note: 
   ┌─ erc20_token.fe:83:34
   │
83 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^ ^^^^^^ address
   │                                  │               
   │                                  SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:83:34
   │
83 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                                  │                         
   │                                  SPtr<u256>

note: 
   ┌─ erc20_token.fe:83:34
   │
83 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
84 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:84:9
   │
84 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^^^^^^^^^^^ ^^^^^^^^^ address
   │         │               
   │         SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:84:9
   │
84 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20
   │         │                            
   │         SPtr<u256>

note: 
   ┌─ erc20_token.fe:84:37
   │
84 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^ ^^^^^^^^^ address
   │                                     │               
   │                                     SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:84:37
   │
84 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                                     │                            
   │                                     SPtr<u256>

note: 
   ┌─ erc20_token.fe:84:37
   │
84 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
85 │         emit Transfer(ctx, from: sender, to: recipient, value)
   │                       ^^^        ^^^^^^      ^^^^^^^^^  ^^^^^ u256
   │                       │          │           │           
   │                       │          │           address
   │                       │          address
   │                       Context

note: 
   ┌─ erc20_token.fe:88:5
   │  
88 │ ╭     fn _mint(self, ctx: Context, account: address, value: u256) {
89 │ │         assert account != address(0)
90 │ │         _before_token_transfer(from: address(0), to: account, value)
91 │ │         self._total_supply = self._total_supply + value
92 │ │         self._balances[account] = self._balances[account] + value
93 │ │         emit Transfer(ctx, from: address(0), to: account, value)
94 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: account, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
   ┌─ erc20_token.fe:89:16
   │
89 │         assert account != address(0)
   │                ^^^^^^^            ^ u256
   │                │                   
   │                address

note: 
   ┌─ erc20_token.fe:89:27
   │
89 │         assert account != address(0)
   │                           ^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:89:16
   │
89 │         assert account != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
90 │         _before_token_transfer(from: address(0), to: account, value)
   │                                              ^ u256

note: 
   ┌─ erc20_token.fe:90:38
   │
90 │         _before_token_transfer(from: address(0), to: account, value)
   │                                      ^^^^^^^^^^      ^^^^^^^  ^^^^^ u256
   │                                      │               │         
   │                                      │               address
   │                                      address

note: 
   ┌─ erc20_token.fe:90:9
   │
90 │         _before_token_transfer(from: address(0), to: account, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
91 │         self._total_supply = self._total_supply + value
   │         ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:91:9
   │
91 │         self._total_supply = self._total_supply + value
   │         ^^^^^^^^^^^^^^^^^^   ^^^^ ERC20
   │         │                     
   │         SPtr<u256>

note: 
   ┌─ erc20_token.fe:91:30
   │
91 │         self._total_supply = self._total_supply + value
   │                              ^^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                              │                     
   │                              SPtr<u256>

note: 
   ┌─ erc20_token.fe:91:30
   │
91 │         self._total_supply = self._total_supply + value
   │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
92 │         self._balances[account] = self._balances[account] + value
   │         ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:92:9
   │
92 │         self._balances[account] = self._balances[account] + value
   │         ^^^^^^^^^^^^^^ ^^^^^^^ address
   │         │               
   │         SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:92:9
   │
92 │         self._balances[account] = self._balances[account] + value
   │         ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20
   │         │                          
   │         SPtr<u256>

note: 
   ┌─ erc20_token.fe:92:35
   │
92 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^ ^^^^^^^ address
   │                                   │               
   │                                   SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:92:35
   │
92 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                                   │                          
   │                                   SPtr<u256>

note: 
   ┌─ erc20_token.fe:92:35
   │
92 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
93 │         emit Transfer(ctx, from: address(0), to: account, value)
   │                       ^^^                ^ u256
   │                       │                   
   │                       Context

note: 
   ┌─ erc20_token.fe:93:34
   │
93 │         emit Transfer(ctx, from: address(0), to: account, value)
   │                                  ^^^^^^^^^^      ^^^^^^^  ^^^^^ u256
   │                                  │               │         
   │                                  │               address
   │                                  address

note: 
    ┌─ erc20_token.fe:96:5
    │  
 96 │ ╭     fn _burn(self, ctx: Context, account: address, value: u256) {
 97 │ │         assert account != address(0)
 98 │ │         _before_token_transfer(from: account, to: address(0), value)
 99 │ │         self._balances[account] = self._balances[account] - value
100 │ │         self._total_supply = self._total_supply - value
101 │ │         emit Transfer(ctx, from: account, to: address(0), value)
102 │ │     }
    │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: account, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
   ┌─ erc20_token.fe:97:16
   │
97 │         assert account != address(0)
   │                ^^^^^^^            ^ u256
   │                │                   
   │                address

note: 
   ┌─ erc20_token.fe:97:27
   │
97 │         assert account != address(0)
   │                           ^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:97:16
   │
97 │         assert account != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
98 │         _before_token_transfer(from: account, to: address(0), value)
   │                                      ^^^^^^^              ^ u256
   │                                      │                     
   │                                      address

note: 
   ┌─ erc20_token.fe:98:51
   │
98 │         _before_token_transfer(from: account, to: address(0), value)
   │                                                   ^^^^^^^^^^  ^^^^^ u256
   │                                                   │            
   │                                                   address

note: 
   ┌─ erc20_token.fe:98:9
   │
98 │         _before_token_transfer(from: account, to: address(0), value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
99 │         self._balances[account] = self._balances[account] - value
   │         ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:99:9
   │
99 │         self._balances[account] = self._balances[account] - value
   │         ^^^^^^^^^^^^^^ ^^^^^^^ address
   │         │               
   │         SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:99:9
   │
99 │         self._balances[account] = self._balances[account] - value
   │         ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20
   │         │                          
   │         SPtr<u256>

note: 
   ┌─ erc20_token.fe:99:35
   │
99 │         self._balances[account] = self._balances[account] - value
   │                                   ^^^^^^^^^^^^^^ ^^^^^^^ address
   │                                   │               
   │                                   SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:99:35
   │
99 │         self._balances[account] = self._balances[account] - value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                                   │                          
   │                                   SPtr<u256>

note: 
    ┌─ erc20_token.fe:99:35
    │
 99 │         self._balances[account] = self._balances[account] - value
    │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
100 │         self._total_supply = self._total_supply - value
    │         ^^^^ ERC20

note: 
    ┌─ erc20_token.fe:100:9
    │
100 │         self._total_supply = self._total_supply - value
    │         ^^^^^^^^^^^^^^^^^^   ^^^^ ERC20
    │         │                     
    │         SPtr<u256>

note: 
    ┌─ erc20_token.fe:100:30
    │
100 │         self._total_supply = self._total_supply - value
    │                              ^^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │                              │                     
    │                              SPtr<u256>

note: 
    ┌─ erc20_token.fe:100:30
    │
100 │         self._total_supply = self._total_supply - value
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
101 │         emit Transfer(ctx, from: account, to: address(0), value)
    │                       ^^^        ^^^^^^^              ^ u256
    │                       │          │                     
    │                       │          address
    │                       Context

note: 
    ┌─ erc20_token.fe:101:47
    │
101 │         emit Transfer(ctx, from: account, to: address(0), value)
    │                                               ^^^^^^^^^^  ^^^^^ u256
    │                                               │            
    │                                               address

note: 
    ┌─ erc20_token.fe:104:5
    │  
104 │ ╭     fn _approve(self, ctx: Context, owner: address, spender: address, value: u256) {
105 │ │         assert owner != address(0)
106 │ │         assert spender != address(0)
107 │ │         self._allowances[owner][spender] = value
108 │ │         emit Approval(ctx, owner, spender, value)
109 │ │     }
    │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: owner, typ: address }, { label: None, name: spender, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
    ┌─ erc20_token.fe:105:16
    │
105 │         assert owner != address(0)
    │                ^^^^^            ^ u256
    │                │                 
    │                address

note: 
    ┌─ erc20_token.fe:105:25
    │
105 │         assert owner != address(0)
    │                         ^^^^^^^^^^ address

note: 
    ┌─ erc20_token.fe:105:16
    │
105 │         assert owner != address(0)
    │                ^^^^^^^^^^^^^^^^^^^ bool
106 │         assert spender != address(0)
    │                ^^^^^^^            ^ u256
    │                │                   
    │                address

note: 
    ┌─ erc20_token.fe:106:27
    │
106 │         assert spender != address(0)
    │                           ^^^^^^^^^^ address

note: 
    ┌─ erc20_token.fe:106:16
    │
106 │         assert spender != address(0)
    │                ^^^^^^^^^^^^^^^^^^^^^ bool
107 │         self._allowances[owner][spender] = value
    │         ^^^^ ERC20

note: 
    ┌─ erc20_token.fe:107:9
    │
107 │         self._allowances[owner][spender] = value
    │         ^^^^^^^^^^^^^^^^ ^^^^^ address
    │         │                 
    │         SPtr<Map<address, Map<address, u256>>>

note: 
    ┌─ erc20_token.fe:107:9
    │
107 │         self._allowances[owner][spender] = value
    │         ^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address
    │         │                        
    │         SPtr<Map<address, u256>>

note: 
    ┌─ erc20_token.fe:107:9
    │
107 │         self._allowances[owner][spender] = value
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │         │                                   
    │         SPtr<u256>
108 │         emit Approval(ctx, owner, spender, value)
    │                       ^^^  ^^^^^  ^^^^^^^  ^^^^^ u256
    │                       │    │      │         
    │                       │    │      address
    │                       │    address
    │                       Context

note: 
    ┌─ erc20_token.fe:111:5
    │  
111 │ ╭     fn _setup_decimals(self, _ decimals_: u8) {
112 │ │         self._decimals = decimals_
113 │ │     }
    │ ╰─────^ self: Some(Mutable), params: [{ label: Some("_"), name: decimals_, typ: u8 }] -> ()

note: 
    ┌─ erc20_token.fe:112:9
    │
112 │         self._decimals = decimals_
    │         ^^^^ ERC20

note: 
    ┌─ erc20_token.fe:112:9
    │
112 │         self._decimals = decimals_
    │         ^^^^^^^^^^^^^^   ^^^^^^^^^ u8
    │         │                 
    │         SPtr<u8>

note: 
    ┌─ erc20_token.fe:115:5
    │
115 │     fn _before_token_transfer(from: address, to: address, _ value: u256) {}
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ self: None, params: [{ label: None, name: from, typ: address }, { label: None, name: to, typ: address }, { label: Some("_"), name: value, typ: u256 }] -> ()



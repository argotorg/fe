---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ erc20_token.fe:4:5
  │
4 │     _balances: Map<address, u256>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>
5 │     _allowances: Map<address, Map<address, u256>>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>
6 │     _total_supply: u256
  │     ^^^^^^^^^^^^^^^^^^^ u256
7 │     _name: String<100>
  │     ^^^^^^^^^^^^^^^^^^ String<100>
8 │     _symbol: String<100>
  │     ^^^^^^^^^^^^^^^^^^^^ String<100>
9 │     _decimals: u8
  │     ^^^^^^^^^^^^^ u8

note: 
   ┌─ erc20_token.fe:12:9
   │
12 │         idx owner: address
   │         ^^^^^^^^^^^^^^^^^^ address
13 │         idx spender: address
   │         ^^^^^^^^^^^^^^^^^^^^ address
14 │         value: u256
   │         ^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:17:9
   │
17 │         idx from: address
   │         ^^^^^^^^^^^^^^^^^ address
18 │         idx to: address
   │         ^^^^^^^^^^^^^^^ address
19 │         value: u256
   │         ^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:27:5
   │  
27 │ ╭     pub fn name(self) -> String<100>:
28 │ │         return self._name.to_mem()
   │ ╰──────────────────────────────────^ attributes hash: 2936475649167061923
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             String(
                 FeString {
                     max_size: 100,
                 },
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:28:16
   │
28 │         return self._name.to_mem()
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:28:16
   │
28 │         return self._name.to_mem()
   │                ^^^^^^^^^^ String<100>: Storage { nonce: Some(3) }

note: 
   ┌─ erc20_token.fe:28:16
   │
28 │         return self._name.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^ String<100>: Storage { nonce: Some(3) } => Memory

note: 
   ┌─ erc20_token.fe:30:5
   │  
30 │ ╭     pub fn symbol(self) -> String<100>:
31 │ │         return self._symbol.to_mem()
   │ ╰────────────────────────────────────^ attributes hash: 2936475649167061923
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             String(
                 FeString {
                     max_size: 100,
                 },
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:31:16
   │
31 │         return self._symbol.to_mem()
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:31:16
   │
31 │         return self._symbol.to_mem()
   │                ^^^^^^^^^^^^ String<100>: Storage { nonce: Some(4) }

note: 
   ┌─ erc20_token.fe:31:16
   │
31 │         return self._symbol.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^ String<100>: Storage { nonce: Some(4) } => Memory

note: 
   ┌─ erc20_token.fe:33:5
   │  
33 │ ╭     pub fn decimals(self) -> u8:
34 │ │         return self._decimals
   │ ╰─────────────────────────────^ attributes hash: 11864308689780915279
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Numeric(
                     U8,
                 ),
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:34:16
   │
34 │         return self._decimals
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:34:16
   │
34 │         return self._decimals
   │                ^^^^^^^^^^^^^^ u8: Storage { nonce: Some(5) } => Value

note: 
   ┌─ erc20_token.fe:36:5
   │  
36 │ ╭     pub fn totalSupply(self) -> u256:
37 │ │         return self._total_supply
   │ ╰─────────────────────────────────^ attributes hash: 11773348765973600208
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:37:16
   │
37 │         return self._total_supply
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:37:16
   │
37 │         return self._total_supply
   │                ^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => Value

note: 
   ┌─ erc20_token.fe:39:5
   │  
39 │ ╭     pub fn balanceOf(self, account: address) -> u256:
40 │ │         return self._balances[account]
   │ ╰──────────────────────────────────────^ attributes hash: 3934661437648326967
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "account",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:40:16
   │
40 │         return self._balances[account]
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:40:16
   │
40 │         return self._balances[account]
   │                ^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                │               
   │                Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:40:16
   │
40 │         return self._balances[account]
   │                ^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:42:5
   │  
42 │ ╭     pub fn transfer(self, ctx: Context, recipient: address, value: u256) -> bool:
43 │ │         self._transfer(ctx, ctx.msg_sender(), recipient, value)
44 │ │         return true
   │ ╰───────────────────^ attributes hash: 2819278576796158995
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "recipient",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:43:9
   │
43 │         self._transfer(ctx, ctx.msg_sender(), recipient, value)
   │         ^^^^           ^^^  ^^^ Context: Memory
   │         │              │     
   │         │              Context: Memory
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:43:29
   │
43 │         self._transfer(ctx, ctx.msg_sender(), recipient, value)
   │                             ^^^^^^^^^^^^^^^^  ^^^^^^^^^  ^^^^^ u256: Value
   │                             │                 │           
   │                             │                 address: Value
   │                             address: Value

note: 
   ┌─ erc20_token.fe:43:9
   │
43 │         self._transfer(ctx, ctx.msg_sender(), recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
44 │         return true
   │                ^^^^ bool: Value

note: 
   ┌─ erc20_token.fe:46:5
   │  
46 │ ╭     pub fn allowance(self, owner: address, spender: address) -> u256:
47 │ │         return self._allowances[owner][spender]
   │ ╰───────────────────────────────────────────────^ attributes hash: 12331829167105298691
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "owner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:47:16
   │
47 │         return self._allowances[owner][spender]
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:47:16
   │
47 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^ ^^^^^ address: Value
   │                │                 
   │                Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:47:16
   │
47 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                │                        
   │                Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:47:16
   │
47 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:49:5
   │  
49 │ ╭     pub fn approve(self, ctx: Context, spender: address, value: u256) -> bool:
50 │ │         self._approve(ctx, ctx.msg_sender(), spender, value)
51 │ │         return true
   │ ╰───────────────────^ attributes hash: 15274000982762670572
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:50:9
   │
50 │         self._approve(ctx, ctx.msg_sender(), spender, value)
   │         ^^^^          ^^^  ^^^ Context: Memory
   │         │             │     
   │         │             Context: Memory
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:50:28
   │
50 │         self._approve(ctx, ctx.msg_sender(), spender, value)
   │                            ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^ u256: Value
   │                            │                 │         
   │                            │                 address: Value
   │                            address: Value

note: 
   ┌─ erc20_token.fe:50:9
   │
50 │         self._approve(ctx, ctx.msg_sender(), spender, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
51 │         return true
   │                ^^^^ bool: Value

note: 
   ┌─ erc20_token.fe:53:5
   │  
53 │ ╭     pub fn transferFrom(self, ctx: Context, sender: address, recipient: address, value: u256) -> bool:
54 │ │         assert self._allowances[sender][ctx.msg_sender()] >= value
55 │ │         self._transfer(ctx, sender, recipient, value)
56 │ │         self._approve(ctx, sender, ctx.msg_sender(), self._allowances[sender][ctx.msg_sender()] - value)
57 │ │         return true
   │ ╰───────────────────^ attributes hash: 13813289729619831621
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "sender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "recipient",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:54:16
   │
54 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:54:16
   │
54 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^ ^^^^^^ address: Value
   │                │                 
   │                Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:54:16
   │
54 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^ Context: Memory
   │                │                         
   │                Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:54:41
   │
54 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                                         ^^^^^^^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:54:16
   │
54 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^ u256: Value
   │                │                                              
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:54:16
   │
54 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
55 │         self._transfer(ctx, sender, recipient, value)
   │         ^^^^           ^^^  ^^^^^^  ^^^^^^^^^  ^^^^^ u256: Value
   │         │              │    │       │           
   │         │              │    │       address: Value
   │         │              │    address: Value
   │         │              Context: Memory
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:55:9
   │
55 │         self._transfer(ctx, sender, recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
56 │         self._approve(ctx, sender, ctx.msg_sender(), self._allowances[sender][ctx.msg_sender()] - value)
   │         ^^^^          ^^^  ^^^^^^  ^^^ Context: Memory
   │         │             │    │        
   │         │             │    address: Value
   │         │             Context: Memory
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:56:36
   │
56 │         self._approve(ctx, sender, ctx.msg_sender(), self._allowances[sender][ctx.msg_sender()] - value)
   │                                    ^^^^^^^^^^^^^^^^  ^^^^ ERC20: Value
   │                                    │                  
   │                                    address: Value

note: 
   ┌─ erc20_token.fe:56:54
   │
56 │         self._approve(ctx, sender, ctx.msg_sender(), self._allowances[sender][ctx.msg_sender()] - value)
   │                                                      ^^^^^^^^^^^^^^^^ ^^^^^^ address: Value
   │                                                      │                 
   │                                                      Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:56:54
   │
56 │         self._approve(ctx, sender, ctx.msg_sender(), self._allowances[sender][ctx.msg_sender()] - value)
   │                                                      ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^ Context: Memory
   │                                                      │                         
   │                                                      Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:56:79
   │
56 │         self._approve(ctx, sender, ctx.msg_sender(), self._allowances[sender][ctx.msg_sender()] - value)
   │                                                                               ^^^^^^^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:56:54
   │
56 │         self._approve(ctx, sender, ctx.msg_sender(), self._allowances[sender][ctx.msg_sender()] - value)
   │                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                                                      │                                             
   │                                                      u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:56:54
   │
56 │         self._approve(ctx, sender, ctx.msg_sender(), self._allowances[sender][ctx.msg_sender()] - value)
   │                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ erc20_token.fe:56:9
   │
56 │         self._approve(ctx, sender, ctx.msg_sender(), self._allowances[sender][ctx.msg_sender()] - value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
57 │         return true
   │                ^^^^ bool: Value

note: 
   ┌─ erc20_token.fe:59:5
   │  
59 │ ╭     pub fn increaseAllowance(self, ctx: Context, spender: address, addedValue: u256) -> bool:
60 │ │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] + addedValue)
61 │ │         return true
   │ ╰───────────────────^ attributes hash: 12213130191491072064
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "addedValue",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:60:9
   │
60 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] + addedValue)
   │         ^^^^          ^^^  ^^^ Context: Memory
   │         │             │     
   │         │             Context: Memory
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:60:28
   │
60 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                            ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^ ERC20: Value
   │                            │                 │         
   │                            │                 address: Value
   │                            address: Value

note: 
   ┌─ erc20_token.fe:60:55
   │
60 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                       ^^^^^^^^^^^^^^^^ ^^^ Context: Memory
   │                                                       │                 
   │                                                       Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:60:72
   │
60 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                                        ^^^^^^^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:60:55
   │
60 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                                                       │                                   
   │                                                       Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:60:55
   │
60 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^ u256: Value
   │                                                       │                                              
   │                                                       u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:60:55
   │
60 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ erc20_token.fe:60:9
   │
60 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] + addedValue)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
61 │         return true
   │                ^^^^ bool: Value

note: 
   ┌─ erc20_token.fe:63:5
   │  
63 │ ╭     pub fn decreaseAllowance(self, ctx: Context, spender: address, subtractedValue: u256) -> bool:
64 │ │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] - subtractedValue)
65 │ │         return true
   │ ╰───────────────────^ attributes hash: 3246531694812819193
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "subtractedValue",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:64:9
   │
64 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │         ^^^^          ^^^  ^^^ Context: Memory
   │         │             │     
   │         │             Context: Memory
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:64:28
   │
64 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                            ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^ ERC20: Value
   │                            │                 │         
   │                            │                 address: Value
   │                            address: Value

note: 
   ┌─ erc20_token.fe:64:55
   │
64 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                       ^^^^^^^^^^^^^^^^ ^^^ Context: Memory
   │                                                       │                 
   │                                                       Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:64:72
   │
64 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                                        ^^^^^^^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:64:55
   │
64 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                                                       │                                   
   │                                                       Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:64:55
   │
64 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^ u256: Value
   │                                                       │                                              
   │                                                       u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:64:55
   │
64 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ erc20_token.fe:64:9
   │
64 │         self._approve(ctx, ctx.msg_sender(), spender, self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
65 │         return true
   │                ^^^^ bool: Value

note: 
   ┌─ erc20_token.fe:67:5
   │  
67 │ ╭     fn _transfer(self, ctx: Context, sender: address, recipient: address, value: u256):
68 │ │         assert sender != address(0)
69 │ │         assert recipient != address(0)
70 │ │         _before_token_transfer(sender, recipient, value)
71 │ │         self._balances[sender] = self._balances[sender] - value
72 │ │         self._balances[recipient] = self._balances[recipient] + value
73 │ │         emit Transfer(ctx, from: sender, to: recipient, value)
   │ ╰──────────────────────────────────────────────────────────────^ attributes hash: 16619149998539230527
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "sender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "recipient",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:68:16
   │
68 │         assert sender != address(0)
   │                ^^^^^^            ^ u256: Value
   │                │                  
   │                address: Value

note: 
   ┌─ erc20_token.fe:68:26
   │
68 │         assert sender != address(0)
   │                          ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:68:16
   │
68 │         assert sender != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
69 │         assert recipient != address(0)
   │                ^^^^^^^^^            ^ u256: Value
   │                │                     
   │                address: Value

note: 
   ┌─ erc20_token.fe:69:29
   │
69 │         assert recipient != address(0)
   │                             ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:69:16
   │
69 │         assert recipient != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
70 │         _before_token_transfer(sender, recipient, value)
   │                                ^^^^^^  ^^^^^^^^^  ^^^^^ u256: Value
   │                                │       │           
   │                                │       address: Value
   │                                address: Value

note: 
   ┌─ erc20_token.fe:70:9
   │
70 │         _before_token_transfer(sender, recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
71 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:71:9
   │
71 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^^^^^^^^^^^ ^^^^^^ address: Value
   │         │               
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:71:9
   │
71 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                         
   │         u256: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:71:34
   │
71 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^ ^^^^^^ address: Value
   │                                  │               
   │                                  Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:71:34
   │
71 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                                  │                         
   │                                  u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:71:34
   │
71 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
72 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:72:9
   │
72 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^^^^^^^^^^^ ^^^^^^^^^ address: Value
   │         │               
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:72:9
   │
72 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                            
   │         u256: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:72:37
   │
72 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^ ^^^^^^^^^ address: Value
   │                                     │               
   │                                     Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:72:37
   │
72 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                                     │                            
   │                                     u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:72:37
   │
72 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
73 │         emit Transfer(ctx, from: sender, to: recipient, value)
   │                       ^^^        ^^^^^^      ^^^^^^^^^  ^^^^^ u256: Value
   │                       │          │           │           
   │                       │          │           address: Value
   │                       │          address: Value
   │                       Context: Memory

note: 
   ┌─ erc20_token.fe:73:9
   │
73 │         emit Transfer(ctx, from: sender, to: recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ erc20_token.fe:75:5
   │  
75 │ ╭     fn _mint(self, ctx: Context, account: address, value: u256):
76 │ │         assert account != address(0)
77 │ │         _before_token_transfer(address(0), account, value)
78 │ │         self._total_supply = self._total_supply + value
79 │ │         self._balances[account] = self._balances[account] + value
80 │ │         emit Transfer(ctx, from: address(0), to: account, value)
   │ ╰────────────────────────────────────────────────────────────────^ attributes hash: 8767370088938020905
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "account",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:76:16
   │
76 │         assert account != address(0)
   │                ^^^^^^^            ^ u256: Value
   │                │                   
   │                address: Value

note: 
   ┌─ erc20_token.fe:76:27
   │
76 │         assert account != address(0)
   │                           ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:76:16
   │
76 │         assert account != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value
77 │         _before_token_transfer(address(0), account, value)
   │                                        ^ u256: Value

note: 
   ┌─ erc20_token.fe:77:32
   │
77 │         _before_token_transfer(address(0), account, value)
   │                                ^^^^^^^^^^  ^^^^^^^  ^^^^^ u256: Value
   │                                │           │         
   │                                │           address: Value
   │                                address: Value

note: 
   ┌─ erc20_token.fe:77:9
   │
77 │         _before_token_transfer(address(0), account, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
78 │         self._total_supply = self._total_supply + value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:78:9
   │
78 │         self._total_supply = self._total_supply + value
   │         ^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                     
   │         u256: Storage { nonce: Some(2) }

note: 
   ┌─ erc20_token.fe:78:30
   │
78 │         self._total_supply = self._total_supply + value
   │                              ^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                              │                     
   │                              u256: Storage { nonce: Some(2) } => Value

note: 
   ┌─ erc20_token.fe:78:30
   │
78 │         self._total_supply = self._total_supply + value
   │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
79 │         self._balances[account] = self._balances[account] + value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:79:9
   │
79 │         self._balances[account] = self._balances[account] + value
   │         ^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │         │               
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:79:9
   │
79 │         self._balances[account] = self._balances[account] + value
   │         ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                          
   │         u256: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:79:35
   │
79 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                                   │               
   │                                   Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:79:35
   │
79 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                                   │                          
   │                                   u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:79:35
   │
79 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
80 │         emit Transfer(ctx, from: address(0), to: account, value)
   │                       ^^^                ^ u256: Value
   │                       │                   
   │                       Context: Memory

note: 
   ┌─ erc20_token.fe:80:34
   │
80 │         emit Transfer(ctx, from: address(0), to: account, value)
   │                                  ^^^^^^^^^^      ^^^^^^^  ^^^^^ u256: Value
   │                                  │               │         
   │                                  │               address: Value
   │                                  address: Value

note: 
   ┌─ erc20_token.fe:80:9
   │
80 │         emit Transfer(ctx, from: address(0), to: account, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ erc20_token.fe:82:5
   │  
82 │ ╭     fn _burn(self, ctx: Context, account: address, value: u256):
83 │ │         assert account != address(0)
84 │ │         _before_token_transfer(account, address(0), value)
85 │ │         self._balances[account] = self._balances[account] - value
86 │ │         self._total_supply = self._total_supply - value
87 │ │         emit Transfer(ctx, from: account, to: address(0), value)
   │ ╰────────────────────────────────────────────────────────────────^ attributes hash: 8767370088938020905
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "account",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:83:16
   │
83 │         assert account != address(0)
   │                ^^^^^^^            ^ u256: Value
   │                │                   
   │                address: Value

note: 
   ┌─ erc20_token.fe:83:27
   │
83 │         assert account != address(0)
   │                           ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:83:16
   │
83 │         assert account != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value
84 │         _before_token_transfer(account, address(0), value)
   │                                ^^^^^^^          ^ u256: Value
   │                                │                 
   │                                address: Value

note: 
   ┌─ erc20_token.fe:84:41
   │
84 │         _before_token_transfer(account, address(0), value)
   │                                         ^^^^^^^^^^  ^^^^^ u256: Value
   │                                         │            
   │                                         address: Value

note: 
   ┌─ erc20_token.fe:84:9
   │
84 │         _before_token_transfer(account, address(0), value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
85 │         self._balances[account] = self._balances[account] - value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:85:9
   │
85 │         self._balances[account] = self._balances[account] - value
   │         ^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │         │               
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:85:9
   │
85 │         self._balances[account] = self._balances[account] - value
   │         ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                          
   │         u256: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:85:35
   │
85 │         self._balances[account] = self._balances[account] - value
   │                                   ^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                                   │               
   │                                   Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:85:35
   │
85 │         self._balances[account] = self._balances[account] - value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                                   │                          
   │                                   u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:85:35
   │
85 │         self._balances[account] = self._balances[account] - value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
86 │         self._total_supply = self._total_supply - value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:86:9
   │
86 │         self._total_supply = self._total_supply - value
   │         ^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                     
   │         u256: Storage { nonce: Some(2) }

note: 
   ┌─ erc20_token.fe:86:30
   │
86 │         self._total_supply = self._total_supply - value
   │                              ^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                              │                     
   │                              u256: Storage { nonce: Some(2) } => Value

note: 
   ┌─ erc20_token.fe:86:30
   │
86 │         self._total_supply = self._total_supply - value
   │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
87 │         emit Transfer(ctx, from: account, to: address(0), value)
   │                       ^^^        ^^^^^^^              ^ u256: Value
   │                       │          │                     
   │                       │          address: Value
   │                       Context: Memory

note: 
   ┌─ erc20_token.fe:87:47
   │
87 │         emit Transfer(ctx, from: account, to: address(0), value)
   │                                               ^^^^^^^^^^  ^^^^^ u256: Value
   │                                               │            
   │                                               address: Value

note: 
   ┌─ erc20_token.fe:87:9
   │
87 │         emit Transfer(ctx, from: account, to: address(0), value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ erc20_token.fe:89:5
   │  
89 │ ╭     fn _approve(self, ctx: Context, owner: address, spender: address, value: u256):
90 │ │         assert owner != address(0)
91 │ │         assert spender != address(0)
92 │ │         self._allowances[owner][spender] = value
93 │ │         emit Approval(ctx, owner, spender, value)
   │ ╰─────────────────────────────────────────────────^ attributes hash: 16582163020557730049
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "owner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:90:16
   │
90 │         assert owner != address(0)
   │                ^^^^^            ^ u256: Value
   │                │                 
   │                address: Value

note: 
   ┌─ erc20_token.fe:90:25
   │
90 │         assert owner != address(0)
   │                         ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:90:16
   │
90 │         assert owner != address(0)
   │                ^^^^^^^^^^^^^^^^^^^ bool: Value
91 │         assert spender != address(0)
   │                ^^^^^^^            ^ u256: Value
   │                │                   
   │                address: Value

note: 
   ┌─ erc20_token.fe:91:27
   │
91 │         assert spender != address(0)
   │                           ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:91:16
   │
91 │         assert spender != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value
92 │         self._allowances[owner][spender] = value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:92:9
   │
92 │         self._allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^^ ^^^^^ address: Value
   │         │                 
   │         Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:92:9
   │
92 │         self._allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │         │                        
   │         Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:92:9
   │
92 │         self._allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │         │                                   
   │         u256: Storage { nonce: None }
93 │         emit Approval(ctx, owner, spender, value)
   │                       ^^^  ^^^^^  ^^^^^^^  ^^^^^ u256: Value
   │                       │    │      │         
   │                       │    │      address: Value
   │                       │    address: Value
   │                       Context: Memory

note: 
   ┌─ erc20_token.fe:93:9
   │
93 │         emit Approval(ctx, owner, spender, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 8893313742751514912
   │
   = Event {
         name: "Approval",
         fields: [
             EventField {
                 name: "owner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ erc20_token.fe:95:5
   │  
95 │ ╭     fn _setup_decimals(self, decimals_: u8):
96 │ │         self._decimals = decimals_
   │ ╰──────────────────────────────────^ attributes hash: 8343414465215343884
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "decimals_",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:96:9
   │
96 │         self._decimals = decimals_
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:96:9
   │
96 │         self._decimals = decimals_
   │         ^^^^^^^^^^^^^^   ^^^^^^^^^ u8: Value
   │         │                 
   │         u8: Storage { nonce: Some(5) }

note: 
   ┌─ erc20_token.fe:98:5
   │  
98 │ ╭     fn _before_token_transfer(from: address, to: address, value: u256):
99 │ │         pass
   │ ╰────────────^ attributes hash: 5251049759615532223
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }



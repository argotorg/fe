---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ erc20_token.fe:2:5
  │
2 │     _balances: Map<address, u256>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>
3 │     _allowances: Map<address, Map<address, u256>>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>
4 │     _total_supply: u256
  │     ^^^^^^^^^^^^^^^^^^^ u256
5 │     _name: String<100>
  │     ^^^^^^^^^^^^^^^^^^ String<100>
6 │     _symbol: String<100>
  │     ^^^^^^^^^^^^^^^^^^^^ String<100>
7 │     _decimals: u8
  │     ^^^^^^^^^^^^^ u8

note: 
   ┌─ erc20_token.fe:10:9
   │
10 │         idx owner: address
   │         ^^^^^^^^^^^^^^^^^^ address
11 │         idx spender: address
   │         ^^^^^^^^^^^^^^^^^^^^ address
12 │         value: u256
   │         ^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:15:9
   │
15 │         idx from: address
   │         ^^^^^^^^^^^^^^^^^ address
16 │         idx to: address
   │         ^^^^^^^^^^^^^^^ address
17 │         value: u256
   │         ^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:25:5
   │  
25 │ ╭     pub fn name(self) -> String<100>:
26 │ │         return self._name.to_mem()
   │ ╰──────────────────────────────────^ attributes hash: 18230605040615949951
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [],
         return_type: Ok(
             String(
                 FeString {
                     max_size: 100,
                 },
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:26:16
   │
26 │         return self._name.to_mem()
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:26:16
   │
26 │         return self._name.to_mem()
   │                ^^^^^^^^^^ String<100>: Storage { nonce: Some(3) }

note: 
   ┌─ erc20_token.fe:26:16
   │
26 │         return self._name.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^ String<100>: Storage { nonce: Some(3) } => Memory

note: 
   ┌─ erc20_token.fe:26:16
   │
26 │         return self._name.to_mem()
   │                ^^^^^^^^^^^^^^^^^ BuiltinValueMethod { method: ToMem, typ: String(FeString { max_size: 100 }) }

note: 
   ┌─ erc20_token.fe:28:5
   │  
28 │ ╭     pub fn symbol(self) -> String<100>:
29 │ │         return self._symbol.to_mem()
   │ ╰────────────────────────────────────^ attributes hash: 18230605040615949951
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [],
         return_type: Ok(
             String(
                 FeString {
                     max_size: 100,
                 },
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:29:16
   │
29 │         return self._symbol.to_mem()
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:29:16
   │
29 │         return self._symbol.to_mem()
   │                ^^^^^^^^^^^^ String<100>: Storage { nonce: Some(4) }

note: 
   ┌─ erc20_token.fe:29:16
   │
29 │         return self._symbol.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^ String<100>: Storage { nonce: Some(4) } => Memory

note: 
   ┌─ erc20_token.fe:29:16
   │
29 │         return self._symbol.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^ BuiltinValueMethod { method: ToMem, typ: String(FeString { max_size: 100 }) }

note: 
   ┌─ erc20_token.fe:31:5
   │  
31 │ ╭     pub fn decimals(self) -> u8:
32 │ │         return self._decimals
   │ ╰─────────────────────────────^ attributes hash: 7569446044715680860
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [],
         return_type: Ok(
             Base(
                 Numeric(
                     U8,
                 ),
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:32:16
   │
32 │         return self._decimals
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:32:16
   │
32 │         return self._decimals
   │                ^^^^^^^^^^^^^^ u8: Storage { nonce: Some(5) } => Value

note: 
   ┌─ erc20_token.fe:34:5
   │  
34 │ ╭     pub fn totalSupply(self) -> u256:
35 │ │         return self._total_supply
   │ ╰─────────────────────────────────^ attributes hash: 2875164910451995213
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:35:16
   │
35 │         return self._total_supply
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:35:16
   │
35 │         return self._total_supply
   │                ^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => Value

note: 
   ┌─ erc20_token.fe:37:5
   │  
37 │ ╭     pub fn balanceOf(self, account: address) -> u256:
38 │ │         return self._balances[account]
   │ ╰──────────────────────────────────────^ attributes hash: 993550877953897347
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "account",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:38:16
   │
38 │         return self._balances[account]
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:38:16
   │
38 │         return self._balances[account]
   │                ^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                │               
   │                Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:38:16
   │
38 │         return self._balances[account]
   │                ^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:40:5
   │  
40 │ ╭     pub fn transfer(self, recipient: address, value: u256) -> bool:
41 │ │         self._transfer(msg.sender, recipient, value)
42 │ │         return true
   │ ╰───────────────────^ attributes hash: 12728394076690627997
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "recipient",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:41:9
   │
41 │         self._transfer(msg.sender, recipient, value)
   │         ^^^^           ^^^^^^^^^^  ^^^^^^^^^  ^^^^^ u256: Value
   │         │              │           │           
   │         │              │           address: Value
   │         │              address: Value
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:41:9
   │
41 │         self._transfer(msg.sender, recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
42 │         return true
   │                ^^^^ bool: Value

note: 
   ┌─ erc20_token.fe:41:9
   │
41 │         self._transfer(msg.sender, recipient, value)
   │         ^^^^^^^^^^^^^^ ValueMethod { is_self: true, class: Contract(ContractId(0)), method: FunctionId(12) }

note: 
   ┌─ erc20_token.fe:44:5
   │  
44 │ ╭     pub fn allowance(self, owner: address, spender: address) -> u256:
45 │ │         return self._allowances[owner][spender]
   │ ╰───────────────────────────────────────────────^ attributes hash: 8217855766110969592
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "owner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:45:16
   │
45 │         return self._allowances[owner][spender]
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:45:16
   │
45 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^ ^^^^^ address: Value
   │                │                 
   │                Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:45:16
   │
45 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                │                        
   │                Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:45:16
   │
45 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:47:5
   │  
47 │ ╭     pub fn approve(self, spender: address, value: u256) -> bool:
48 │ │         self._approve(msg.sender, spender, value)
49 │ │         return true
   │ ╰───────────────────^ attributes hash: 844763422390851240
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:48:9
   │
48 │         self._approve(msg.sender, spender, value)
   │         ^^^^          ^^^^^^^^^^  ^^^^^^^  ^^^^^ u256: Value
   │         │             │           │         
   │         │             │           address: Value
   │         │             address: Value
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:48:9
   │
48 │         self._approve(msg.sender, spender, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
49 │         return true
   │                ^^^^ bool: Value

note: 
   ┌─ erc20_token.fe:48:9
   │
48 │         self._approve(msg.sender, spender, value)
   │         ^^^^^^^^^^^^^ ValueMethod { is_self: true, class: Contract(ContractId(0)), method: FunctionId(15) }

note: 
   ┌─ erc20_token.fe:51:5
   │  
51 │ ╭     pub fn transferFrom(self, sender: address, recipient: address, value: u256) -> bool:
52 │ │         assert self._allowances[sender][msg.sender] >= value
53 │ │         self._transfer(sender, recipient, value)
54 │ │         self._approve(sender, msg.sender, self._allowances[sender][msg.sender] - value)
55 │ │         return true
   │ ╰───────────────────^ attributes hash: 10460592357103433224
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "sender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "recipient",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:52:16
   │
52 │         assert self._allowances[sender][msg.sender] >= value
   │                ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:52:16
   │
52 │         assert self._allowances[sender][msg.sender] >= value
   │                ^^^^^^^^^^^^^^^^ ^^^^^^ address: Value
   │                │                 
   │                Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:52:16
   │
52 │         assert self._allowances[sender][msg.sender] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ address: Value
   │                │                         
   │                Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:52:16
   │
52 │         assert self._allowances[sender][msg.sender] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^ u256: Value
   │                │                                        
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:52:16
   │
52 │         assert self._allowances[sender][msg.sender] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
53 │         self._transfer(sender, recipient, value)
   │         ^^^^           ^^^^^^  ^^^^^^^^^  ^^^^^ u256: Value
   │         │              │       │           
   │         │              │       address: Value
   │         │              address: Value
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:53:9
   │
53 │         self._transfer(sender, recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
54 │         self._approve(sender, msg.sender, self._allowances[sender][msg.sender] - value)
   │         ^^^^          ^^^^^^  ^^^^^^^^^^  ^^^^ ERC20: Value
   │         │             │       │            
   │         │             │       address: Value
   │         │             address: Value
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:54:43
   │
54 │         self._approve(sender, msg.sender, self._allowances[sender][msg.sender] - value)
   │                                           ^^^^^^^^^^^^^^^^ ^^^^^^ address: Value
   │                                           │                 
   │                                           Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:54:43
   │
54 │         self._approve(sender, msg.sender, self._allowances[sender][msg.sender] - value)
   │                                           ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ address: Value
   │                                           │                         
   │                                           Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:54:43
   │
54 │         self._approve(sender, msg.sender, self._allowances[sender][msg.sender] - value)
   │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                                           │                                       
   │                                           u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:54:43
   │
54 │         self._approve(sender, msg.sender, self._allowances[sender][msg.sender] - value)
   │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ erc20_token.fe:54:9
   │
54 │         self._approve(sender, msg.sender, self._allowances[sender][msg.sender] - value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
55 │         return true
   │                ^^^^ bool: Value

note: 
   ┌─ erc20_token.fe:53:9
   │
53 │         self._transfer(sender, recipient, value)
   │         ^^^^^^^^^^^^^^ ValueMethod { is_self: true, class: Contract(ContractId(0)), method: FunctionId(12) }
54 │         self._approve(sender, msg.sender, self._allowances[sender][msg.sender] - value)
   │         ^^^^^^^^^^^^^ ValueMethod { is_self: true, class: Contract(ContractId(0)), method: FunctionId(15) }

note: 
   ┌─ erc20_token.fe:57:5
   │  
57 │ ╭     pub fn increaseAllowance(self, spender: address, addedValue: u256) -> bool:
58 │ │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] + addedValue)
59 │ │         return true
   │ ╰───────────────────^ attributes hash: 8356619325738060097
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "addedValue",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:58:9
   │
58 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] + addedValue)
   │         ^^^^          ^^^^^^^^^^  ^^^^^^^  ^^^^ ERC20: Value
   │         │             │           │         
   │         │             │           address: Value
   │         │             address: Value
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:58:44
   │
58 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] + addedValue)
   │                                            ^^^^^^^^^^^^^^^^ ^^^^^^^^^^ address: Value
   │                                            │                 
   │                                            Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:58:44
   │
58 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] + addedValue)
   │                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                                            │                             
   │                                            Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:58:44
   │
58 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] + addedValue)
   │                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^ u256: Value
   │                                            │                                        
   │                                            u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:58:44
   │
58 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] + addedValue)
   │                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ erc20_token.fe:58:9
   │
58 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] + addedValue)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
59 │         return true
   │                ^^^^ bool: Value

note: 
   ┌─ erc20_token.fe:58:9
   │
58 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] + addedValue)
   │         ^^^^^^^^^^^^^ ValueMethod { is_self: true, class: Contract(ContractId(0)), method: FunctionId(15) }

note: 
   ┌─ erc20_token.fe:61:5
   │  
61 │ ╭     pub fn decreaseAllowance(self, spender: address, subtractedValue: u256) -> bool:
62 │ │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] - subtractedValue)
63 │ │         return true
   │ ╰───────────────────^ attributes hash: 5765343984054310012
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "subtractedValue",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:62:9
   │
62 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] - subtractedValue)
   │         ^^^^          ^^^^^^^^^^  ^^^^^^^  ^^^^ ERC20: Value
   │         │             │           │         
   │         │             │           address: Value
   │         │             address: Value
   │         ERC20: Value

note: 
   ┌─ erc20_token.fe:62:44
   │
62 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] - subtractedValue)
   │                                            ^^^^^^^^^^^^^^^^ ^^^^^^^^^^ address: Value
   │                                            │                 
   │                                            Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:62:44
   │
62 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] - subtractedValue)
   │                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                                            │                             
   │                                            Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:62:44
   │
62 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] - subtractedValue)
   │                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^ u256: Value
   │                                            │                                        
   │                                            u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:62:44
   │
62 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] - subtractedValue)
   │                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ erc20_token.fe:62:9
   │
62 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] - subtractedValue)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
63 │         return true
   │                ^^^^ bool: Value

note: 
   ┌─ erc20_token.fe:62:9
   │
62 │         self._approve(msg.sender, spender, self._allowances[msg.sender][spender] - subtractedValue)
   │         ^^^^^^^^^^^^^ ValueMethod { is_self: true, class: Contract(ContractId(0)), method: FunctionId(15) }

note: 
   ┌─ erc20_token.fe:65:5
   │  
65 │ ╭     fn _transfer(self, sender: address, recipient: address, value: u256):
66 │ │         assert sender != address(0)
67 │ │         assert recipient != address(0)
68 │ │         _before_token_transfer(sender, recipient, value)
69 │ │         self._balances[sender] = self._balances[sender] - value
70 │ │         self._balances[recipient] = self._balances[recipient] + value
71 │ │         emit Transfer(from: sender, to: recipient, value)
   │ ╰─────────────────────────────────────────────────────────^ attributes hash: 7042698306793056303
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "sender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "recipient",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:66:16
   │
66 │         assert sender != address(0)
   │                ^^^^^^            ^ u256: Value
   │                │                  
   │                address: Value

note: 
   ┌─ erc20_token.fe:66:26
   │
66 │         assert sender != address(0)
   │                          ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:66:16
   │
66 │         assert sender != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
67 │         assert recipient != address(0)
   │                ^^^^^^^^^            ^ u256: Value
   │                │                     
   │                address: Value

note: 
   ┌─ erc20_token.fe:67:29
   │
67 │         assert recipient != address(0)
   │                             ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:67:16
   │
67 │         assert recipient != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
68 │         _before_token_transfer(sender, recipient, value)
   │                                ^^^^^^  ^^^^^^^^^  ^^^^^ u256: Value
   │                                │       │           
   │                                │       address: Value
   │                                address: Value

note: 
   ┌─ erc20_token.fe:68:9
   │
68 │         _before_token_transfer(sender, recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
69 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:69:9
   │
69 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^^^^^^^^^^^ ^^^^^^ address: Value
   │         │               
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:69:9
   │
69 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                         
   │         u256: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:69:34
   │
69 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^ ^^^^^^ address: Value
   │                                  │               
   │                                  Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:69:34
   │
69 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                                  │                         
   │                                  u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:69:34
   │
69 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
70 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:70:9
   │
70 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^^^^^^^^^^^ ^^^^^^^^^ address: Value
   │         │               
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:70:9
   │
70 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                            
   │         u256: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:70:37
   │
70 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^ ^^^^^^^^^ address: Value
   │                                     │               
   │                                     Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:70:37
   │
70 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                                     │                            
   │                                     u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:70:37
   │
70 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
71 │         emit Transfer(from: sender, to: recipient, value)
   │                             ^^^^^^      ^^^^^^^^^  ^^^^^ u256: Value
   │                             │           │           
   │                             │           address: Value
   │                             address: Value

note: 
   ┌─ erc20_token.fe:71:9
   │
71 │         emit Transfer(from: sender, to: recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ erc20_token.fe:66:26
   │
66 │         assert sender != address(0)
   │                          ^^^^^^^ TypeConstructor(Base(Address))
67 │         assert recipient != address(0)
   │                             ^^^^^^^ TypeConstructor(Base(Address))
68 │         _before_token_transfer(sender, recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^ Pure(FunctionId(17))

note: 
   ┌─ erc20_token.fe:73:5
   │  
73 │ ╭     fn _mint(self, account: address, value: u256):
74 │ │         assert account != address(0)
75 │ │         _before_token_transfer(address(0), account, value)
76 │ │         self._total_supply = self._total_supply + value
77 │ │         self._balances[account] = self._balances[account] + value
78 │ │         emit Transfer(from: address(0), to: account, value)
   │ ╰───────────────────────────────────────────────────────────^ attributes hash: 2595623246297064609
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "account",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:74:16
   │
74 │         assert account != address(0)
   │                ^^^^^^^            ^ u256: Value
   │                │                   
   │                address: Value

note: 
   ┌─ erc20_token.fe:74:27
   │
74 │         assert account != address(0)
   │                           ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:74:16
   │
74 │         assert account != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value
75 │         _before_token_transfer(address(0), account, value)
   │                                        ^ u256: Value

note: 
   ┌─ erc20_token.fe:75:32
   │
75 │         _before_token_transfer(address(0), account, value)
   │                                ^^^^^^^^^^  ^^^^^^^  ^^^^^ u256: Value
   │                                │           │         
   │                                │           address: Value
   │                                address: Value

note: 
   ┌─ erc20_token.fe:75:9
   │
75 │         _before_token_transfer(address(0), account, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
76 │         self._total_supply = self._total_supply + value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:76:9
   │
76 │         self._total_supply = self._total_supply + value
   │         ^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                     
   │         u256: Storage { nonce: Some(2) }

note: 
   ┌─ erc20_token.fe:76:30
   │
76 │         self._total_supply = self._total_supply + value
   │                              ^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                              │                     
   │                              u256: Storage { nonce: Some(2) } => Value

note: 
   ┌─ erc20_token.fe:76:30
   │
76 │         self._total_supply = self._total_supply + value
   │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
77 │         self._balances[account] = self._balances[account] + value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:77:9
   │
77 │         self._balances[account] = self._balances[account] + value
   │         ^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │         │               
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:77:9
   │
77 │         self._balances[account] = self._balances[account] + value
   │         ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                          
   │         u256: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:77:35
   │
77 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                                   │               
   │                                   Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:77:35
   │
77 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                                   │                          
   │                                   u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:77:35
   │
77 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
78 │         emit Transfer(from: address(0), to: account, value)
   │                                     ^ u256: Value

note: 
   ┌─ erc20_token.fe:78:29
   │
78 │         emit Transfer(from: address(0), to: account, value)
   │                             ^^^^^^^^^^      ^^^^^^^  ^^^^^ u256: Value
   │                             │               │         
   │                             │               address: Value
   │                             address: Value

note: 
   ┌─ erc20_token.fe:78:9
   │
78 │         emit Transfer(from: address(0), to: account, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ erc20_token.fe:74:27
   │
74 │         assert account != address(0)
   │                           ^^^^^^^ TypeConstructor(Base(Address))
75 │         _before_token_transfer(address(0), account, value)
   │                                ^^^^^^^ TypeConstructor(Base(Address))

note: 
   ┌─ erc20_token.fe:75:9
   │
75 │         _before_token_transfer(address(0), account, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^ Pure(FunctionId(17))
   ·
78 │         emit Transfer(from: address(0), to: account, value)
   │                             ^^^^^^^ TypeConstructor(Base(Address))

note: 
   ┌─ erc20_token.fe:80:5
   │  
80 │ ╭     fn _burn(self, account: address, value: u256):
81 │ │         assert account != address(0)
82 │ │         _before_token_transfer(account, address(0), value)
83 │ │         self._balances[account] = self._balances[account] - value
84 │ │         self._total_supply = self._total_supply - value
85 │ │         emit Transfer(from: account, to: address(0), value)
   │ ╰───────────────────────────────────────────────────────────^ attributes hash: 2595623246297064609
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "account",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:81:16
   │
81 │         assert account != address(0)
   │                ^^^^^^^            ^ u256: Value
   │                │                   
   │                address: Value

note: 
   ┌─ erc20_token.fe:81:27
   │
81 │         assert account != address(0)
   │                           ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:81:16
   │
81 │         assert account != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value
82 │         _before_token_transfer(account, address(0), value)
   │                                ^^^^^^^          ^ u256: Value
   │                                │                 
   │                                address: Value

note: 
   ┌─ erc20_token.fe:82:41
   │
82 │         _before_token_transfer(account, address(0), value)
   │                                         ^^^^^^^^^^  ^^^^^ u256: Value
   │                                         │            
   │                                         address: Value

note: 
   ┌─ erc20_token.fe:82:9
   │
82 │         _before_token_transfer(account, address(0), value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
83 │         self._balances[account] = self._balances[account] - value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:83:9
   │
83 │         self._balances[account] = self._balances[account] - value
   │         ^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │         │               
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:83:9
   │
83 │         self._balances[account] = self._balances[account] - value
   │         ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                          
   │         u256: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:83:35
   │
83 │         self._balances[account] = self._balances[account] - value
   │                                   ^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │                                   │               
   │                                   Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ erc20_token.fe:83:35
   │
83 │         self._balances[account] = self._balances[account] - value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                                   │                          
   │                                   u256: Storage { nonce: None } => Value

note: 
   ┌─ erc20_token.fe:83:35
   │
83 │         self._balances[account] = self._balances[account] - value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
84 │         self._total_supply = self._total_supply - value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:84:9
   │
84 │         self._total_supply = self._total_supply - value
   │         ^^^^^^^^^^^^^^^^^^   ^^^^ ERC20: Value
   │         │                     
   │         u256: Storage { nonce: Some(2) }

note: 
   ┌─ erc20_token.fe:84:30
   │
84 │         self._total_supply = self._total_supply - value
   │                              ^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                              │                     
   │                              u256: Storage { nonce: Some(2) } => Value

note: 
   ┌─ erc20_token.fe:84:30
   │
84 │         self._total_supply = self._total_supply - value
   │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
85 │         emit Transfer(from: account, to: address(0), value)
   │                             ^^^^^^^              ^ u256: Value
   │                             │                     
   │                             address: Value

note: 
   ┌─ erc20_token.fe:85:42
   │
85 │         emit Transfer(from: account, to: address(0), value)
   │                                          ^^^^^^^^^^  ^^^^^ u256: Value
   │                                          │            
   │                                          address: Value

note: 
   ┌─ erc20_token.fe:85:9
   │
85 │         emit Transfer(from: account, to: address(0), value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ erc20_token.fe:81:27
   │
81 │         assert account != address(0)
   │                           ^^^^^^^ TypeConstructor(Base(Address))
82 │         _before_token_transfer(account, address(0), value)
   │                                         ^^^^^^^ TypeConstructor(Base(Address))

note: 
   ┌─ erc20_token.fe:82:9
   │
82 │         _before_token_transfer(account, address(0), value)
   │         ^^^^^^^^^^^^^^^^^^^^^^ Pure(FunctionId(17))
   ·
85 │         emit Transfer(from: account, to: address(0), value)
   │                                          ^^^^^^^ TypeConstructor(Base(Address))

note: 
   ┌─ erc20_token.fe:87:5
   │  
87 │ ╭     fn _approve(self, owner: address, spender: address, value: u256):
88 │ │         assert owner != address(0)
89 │ │         assert spender != address(0)
90 │ │         self._allowances[owner][spender] = value
91 │ │         emit Approval(owner, spender, value)
   │ ╰────────────────────────────────────────────^ attributes hash: 18402794614707408512
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "owner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:88:16
   │
88 │         assert owner != address(0)
   │                ^^^^^            ^ u256: Value
   │                │                 
   │                address: Value

note: 
   ┌─ erc20_token.fe:88:25
   │
88 │         assert owner != address(0)
   │                         ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:88:16
   │
88 │         assert owner != address(0)
   │                ^^^^^^^^^^^^^^^^^^^ bool: Value
89 │         assert spender != address(0)
   │                ^^^^^^^            ^ u256: Value
   │                │                   
   │                address: Value

note: 
   ┌─ erc20_token.fe:89:27
   │
89 │         assert spender != address(0)
   │                           ^^^^^^^^^^ address: Value

note: 
   ┌─ erc20_token.fe:89:16
   │
89 │         assert spender != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value
90 │         self._allowances[owner][spender] = value
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:90:9
   │
90 │         self._allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^^ ^^^^^ address: Value
   │         │                 
   │         Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ erc20_token.fe:90:9
   │
90 │         self._allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │         │                        
   │         Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ erc20_token.fe:90:9
   │
90 │         self._allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │         │                                   
   │         u256: Storage { nonce: None }
91 │         emit Approval(owner, spender, value)
   │                       ^^^^^  ^^^^^^^  ^^^^^ u256: Value
   │                       │      │         
   │                       │      address: Value
   │                       address: Value

note: 
   ┌─ erc20_token.fe:91:9
   │
91 │         emit Approval(owner, spender, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 8893313742751514912
   │
   = Event {
         name: "Approval",
         fields: [
             EventField {
                 name: "owner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ erc20_token.fe:88:25
   │
88 │         assert owner != address(0)
   │                         ^^^^^^^ TypeConstructor(Base(Address))
89 │         assert spender != address(0)
   │                           ^^^^^^^ TypeConstructor(Base(Address))

note: 
   ┌─ erc20_token.fe:93:5
   │  
93 │ ╭     fn _setup_decimals(self, decimals_: u8):
94 │ │         self._decimals = decimals_
   │ ╰──────────────────────────────────^ attributes hash: 9584801749732154005
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "decimals_",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ erc20_token.fe:94:9
   │
94 │         self._decimals = decimals_
   │         ^^^^ ERC20: Value

note: 
   ┌─ erc20_token.fe:94:9
   │
94 │         self._decimals = decimals_
   │         ^^^^^^^^^^^^^^   ^^^^^^^^^ u8: Value
   │         │                 
   │         u8: Storage { nonce: Some(5) }

note: 
   ┌─ erc20_token.fe:96:5
   │  
96 │ ╭     fn _before_token_transfer(from: address, to: address, value: u256):
97 │ │         pass
   │ ╰────────────^ attributes hash: 9175941171634351733
   │  
   = FunctionSignature {
         self_decl: None,
         params: [
             FunctionParam {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }



---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ aug_assign.fe:2:5
  │
2 │     my_num: u256
  │     ^^^^^^^^^^^^ u256

note: 
  ┌─ aug_assign.fe:4:5
  │  
4 │ ╭     pub fn add(a: u256, b: u256) -> u256:
5 │ │         a += b
6 │ │         return a
  │ ╰────────────────^ attributes hash: 13032309683484417823
  │  
  = FunctionSignature {
        self_decl: None,
        ctx_decl: None,
        params: [
            FunctionParam {
                name: "a",
                typ: Ok(
                    Base(
                        Numeric(
                            U256,
                        ),
                    ),
                ),
            },
            FunctionParam {
                name: "b",
                typ: Ok(
                    Base(
                        Numeric(
                            U256,
                        ),
                    ),
                ),
            },
        ],
        return_type: Ok(
            Base(
                Numeric(
                    U256,
                ),
            ),
        ),
    }

note: 
  ┌─ aug_assign.fe:5:9
  │
5 │         a += b
  │         ^    ^ u256: Value
  │         │     
  │         u256: Value
6 │         return a
  │                ^ u256: Value

note: 
   ┌─ aug_assign.fe:8:5
   │  
 8 │ ╭     pub fn sub(a: u256, b: u256) -> u256:
 9 │ │         a -= b
10 │ │         return a
   │ ╰────────────────^ attributes hash: 13032309683484417823
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:9:9
   │
 9 │         a -= b
   │         ^    ^ u256: Value
   │         │     
   │         u256: Value
10 │         return a
   │                ^ u256: Value

note: 
   ┌─ aug_assign.fe:12:5
   │  
12 │ ╭     pub fn mul(a: u256, b: u256) -> u256:
13 │ │         a *= b
14 │ │         return a
   │ ╰────────────────^ attributes hash: 13032309683484417823
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:13:9
   │
13 │         a *= b
   │         ^    ^ u256: Value
   │         │     
   │         u256: Value
14 │         return a
   │                ^ u256: Value

note: 
   ┌─ aug_assign.fe:16:5
   │  
16 │ ╭     pub fn div(a: u256, b: u256) -> u256:
17 │ │         a /= b
18 │ │         return a
   │ ╰────────────────^ attributes hash: 13032309683484417823
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:17:9
   │
17 │         a /= b
   │         ^    ^ u256: Value
   │         │     
   │         u256: Value
18 │         return a
   │                ^ u256: Value

note: 
   ┌─ aug_assign.fe:20:5
   │  
20 │ ╭     pub fn mod(a: u256, b: u256) -> u256:
21 │ │         a %= b
22 │ │         return a
   │ ╰────────────────^ attributes hash: 13032309683484417823
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:21:9
   │
21 │         a %= b
   │         ^    ^ u256: Value
   │         │     
   │         u256: Value
22 │         return a
   │                ^ u256: Value

note: 
   ┌─ aug_assign.fe:24:5
   │  
24 │ ╭     pub fn pow(a: u256, b: u256) -> u256:
25 │ │         a **= b
26 │ │         return a
   │ ╰────────────────^ attributes hash: 13032309683484417823
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:25:9
   │
25 │         a **= b
   │         ^     ^ u256: Value
   │         │      
   │         u256: Value
26 │         return a
   │                ^ u256: Value

note: 
   ┌─ aug_assign.fe:28:5
   │  
28 │ ╭     pub fn lshift(a: u8, b: u8) -> u8:
29 │ │         a <<= b
30 │ │         return a
   │ ╰────────────────^ attributes hash: 3730615017690041521
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U8,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:29:9
   │
29 │         a <<= b
   │         ^     ^ u8: Value
   │         │      
   │         u8: Value
30 │         return a
   │                ^ u8: Value

note: 
   ┌─ aug_assign.fe:32:5
   │  
32 │ ╭     pub fn rshift(a: u8, b: u8) -> u8:
33 │ │         a >>= b
34 │ │         return a
   │ ╰────────────────^ attributes hash: 3730615017690041521
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U8,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:33:9
   │
33 │         a >>= b
   │         ^     ^ u8: Value
   │         │      
   │         u8: Value
34 │         return a
   │                ^ u8: Value

note: 
   ┌─ aug_assign.fe:36:5
   │  
36 │ ╭     pub fn bit_or(a: u8, b: u8) -> u8:
37 │ │         a |= b
38 │ │         return a
   │ ╰────────────────^ attributes hash: 3730615017690041521
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U8,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:37:9
   │
37 │         a |= b
   │         ^    ^ u8: Value
   │         │     
   │         u8: Value
38 │         return a
   │                ^ u8: Value

note: 
   ┌─ aug_assign.fe:40:5
   │  
40 │ ╭     pub fn bit_xor(a: u8, b: u8) -> u8:
41 │ │         a ^= b
42 │ │         return a
   │ ╰────────────────^ attributes hash: 3730615017690041521
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U8,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:41:9
   │
41 │         a ^= b
   │         ^    ^ u8: Value
   │         │     
   │         u8: Value
42 │         return a
   │                ^ u8: Value

note: 
   ┌─ aug_assign.fe:44:5
   │  
44 │ ╭     pub fn bit_and(a: u8, b: u8) -> u8:
45 │ │         a &= b
46 │ │         return a
   │ ╰────────────────^ attributes hash: 3730615017690041521
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U8,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U8,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:45:9
   │
45 │         a &= b
   │         ^    ^ u8: Value
   │         │     
   │         u8: Value
46 │         return a
   │                ^ u8: Value

note: 
   ┌─ aug_assign.fe:48:5
   │  
48 │ ╭     pub fn add_from_sto(self, a: u256, b: u256) -> u256:
49 │ │         self.my_num = a
50 │ │         self.my_num += b
51 │ │         return self.my_num
   │ ╰──────────────────────────^ attributes hash: 1093272556881112321
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:49:9
   │
49 │         self.my_num = a
   │         ^^^^ Foo: Value

note: 
   ┌─ aug_assign.fe:49:9
   │
49 │         self.my_num = a
   │         ^^^^^^^^^^^   ^ u256: Value
   │         │              
   │         u256: Storage { nonce: Some(0) }
50 │         self.my_num += b
   │         ^^^^ Foo: Value

note: 
   ┌─ aug_assign.fe:50:9
   │
50 │         self.my_num += b
   │         ^^^^^^^^^^^    ^ u256: Value
   │         │               
   │         u256: Storage { nonce: Some(0) }
51 │         return self.my_num
   │                ^^^^ Foo: Value

note: 
   ┌─ aug_assign.fe:51:16
   │
51 │         return self.my_num
   │                ^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Value

note: 
   ┌─ aug_assign.fe:53:5
   │  
53 │ ╭     pub fn add_from_mem(a: u256, b: u256) -> u256:
54 │ │         let my_array: Array<u256, 10>
55 │ │         my_array[7] = a
56 │ │         my_array[7] += b
57 │ │         return my_array[7]
   │ ╰──────────────────────────^ attributes hash: 13032309683484417823
   │  
   = FunctionSignature {
         self_decl: None,
         ctx_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ aug_assign.fe:54:23
   │
54 │         let my_array: Array<u256, 10>
   │                       ^^^^^^^^^^^^^^^ Array<u256, 10>

note: 
   ┌─ aug_assign.fe:55:9
   │
55 │         my_array[7] = a
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 10>: Memory

note: 
   ┌─ aug_assign.fe:55:9
   │
55 │         my_array[7] = a
   │         ^^^^^^^^^^^   ^ u256: Value
   │         │              
   │         u256: Memory
56 │         my_array[7] += b
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 10>: Memory

note: 
   ┌─ aug_assign.fe:56:9
   │
56 │         my_array[7] += b
   │         ^^^^^^^^^^^    ^ u256: Value
   │         │               
   │         u256: Memory
57 │         return my_array[7]
   │                ^^^^^^^^ ^ u256: Value
   │                │         
   │                Array<u256, 10>: Memory

note: 
   ┌─ aug_assign.fe:57:16
   │
57 │         return my_array[7]
   │                ^^^^^^^^^^^ u256: Memory => Value



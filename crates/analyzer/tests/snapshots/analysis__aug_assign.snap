---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ aug_assign.fe:2:5
  │
2 │     my_num: u256
  │     ^^^^^^^^^^^^ u256

note: 
  ┌─ aug_assign.fe:4:5
  │  
4 │ ╭     pub fn add(mut a: u256, b: u256) -> u256 {
5 │ │         a += b
6 │ │         return a
7 │ │     }
  │ ╰─────^ params: [{ label: None, name: a, typ: mut u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
  ┌─ aug_assign.fe:5:9
  │
5 │         a += b
  │         ^    ^ u256
  │         │     
  │         mut u256
6 │         return a
  │                ^ mut u256

note: 
   ┌─ aug_assign.fe:9:5
   │  
 9 │ ╭     pub fn sub(mut a: u256, b: u256) -> u256 {
10 │ │         a -= b
11 │ │         return a
12 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: mut u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:10:9
   │
10 │         a -= b
   │         ^    ^ u256
   │         │     
   │         mut u256
11 │         return a
   │                ^ mut u256

note: 
   ┌─ aug_assign.fe:14:5
   │  
14 │ ╭     pub fn mul(mut a: u256, b: u256) -> u256 {
15 │ │         a *= b
16 │ │         return a
17 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: mut u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:15:9
   │
15 │         a *= b
   │         ^    ^ u256
   │         │     
   │         mut u256
16 │         return a
   │                ^ mut u256

note: 
   ┌─ aug_assign.fe:19:5
   │  
19 │ ╭     pub fn div(mut a: u256, b: u256) -> u256 {
20 │ │         a /= b
21 │ │         return a
22 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: mut u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:20:9
   │
20 │         a /= b
   │         ^    ^ u256
   │         │     
   │         mut u256
21 │         return a
   │                ^ mut u256

note: 
   ┌─ aug_assign.fe:24:5
   │  
24 │ ╭     pub fn mod(mut a: u256, b: u256) -> u256 {
25 │ │         a %= b
26 │ │         return a
27 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: mut u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:25:9
   │
25 │         a %= b
   │         ^    ^ u256
   │         │     
   │         mut u256
26 │         return a
   │                ^ mut u256

note: 
   ┌─ aug_assign.fe:29:5
   │  
29 │ ╭     pub fn pow(mut a: u256, b: u256) -> u256 {
30 │ │         a **= b
31 │ │         return a
32 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: mut u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:30:9
   │
30 │         a **= b
   │         ^     ^ u256
   │         │      
   │         mut u256
31 │         return a
   │                ^ mut u256

note: 
   ┌─ aug_assign.fe:34:5
   │  
34 │ ╭     pub fn lshift(mut a: u8, b: u8) -> u8 {
35 │ │         a <<= b
36 │ │         return a
37 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: mut u8 }, { label: None, name: b, typ: u8 }] -> u8

note: 
   ┌─ aug_assign.fe:35:9
   │
35 │         a <<= b
   │         ^     ^ u8
   │         │      
   │         mut u8
36 │         return a
   │                ^ mut u8

note: 
   ┌─ aug_assign.fe:39:5
   │  
39 │ ╭     pub fn rshift(mut a: u8, b: u8) -> u8 {
40 │ │         a >>= b
41 │ │         return a
42 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: mut u8 }, { label: None, name: b, typ: u8 }] -> u8

note: 
   ┌─ aug_assign.fe:40:9
   │
40 │         a >>= b
   │         ^     ^ u8
   │         │      
   │         mut u8
41 │         return a
   │                ^ mut u8

note: 
   ┌─ aug_assign.fe:44:5
   │  
44 │ ╭     pub fn bit_or(mut a: u8, b: u8) -> u8 {
45 │ │         a |= b
46 │ │         return a
47 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: mut u8 }, { label: None, name: b, typ: u8 }] -> u8

note: 
   ┌─ aug_assign.fe:45:9
   │
45 │         a |= b
   │         ^    ^ u8
   │         │     
   │         mut u8
46 │         return a
   │                ^ mut u8

note: 
   ┌─ aug_assign.fe:49:5
   │  
49 │ ╭     pub fn bit_xor(mut a: u8, b: u8) -> u8 {
50 │ │         a ^= b
51 │ │         return a
52 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: mut u8 }, { label: None, name: b, typ: u8 }] -> u8

note: 
   ┌─ aug_assign.fe:50:9
   │
50 │         a ^= b
   │         ^    ^ u8
   │         │     
   │         mut u8
51 │         return a
   │                ^ mut u8

note: 
   ┌─ aug_assign.fe:54:5
   │  
54 │ ╭     pub fn bit_and(mut a: u8, b: u8) -> u8 {
55 │ │         a &= b
56 │ │         return a
57 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: mut u8 }, { label: None, name: b, typ: u8 }] -> u8

note: 
   ┌─ aug_assign.fe:55:9
   │
55 │         a &= b
   │         ^    ^ u8
   │         │     
   │         mut u8
56 │         return a
   │                ^ mut u8

note: 
   ┌─ aug_assign.fe:59:5
   │  
59 │ ╭     pub fn add_from_sto(mut self, a: u256, b: u256) -> u256 {
60 │ │         self.my_num = a
61 │ │         self.my_num += b
62 │ │         return self.my_num
63 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:60:9
   │
60 │         self.my_num = a
   │         ^^^^ mut Foo

note: 
   ┌─ aug_assign.fe:60:9
   │
60 │         self.my_num = a
   │         ^^^^^^^^^^^   ^ u256
   │         │              
   │         mut SPtr<u256>
61 │         self.my_num += b
   │         ^^^^ mut Foo

note: 
   ┌─ aug_assign.fe:61:9
   │
61 │         self.my_num += b
   │         ^^^^^^^^^^^    ^ u256
   │         │               
   │         mut SPtr<u256> -Load-> u256
62 │         return self.my_num
   │                ^^^^ mut Foo

note: 
   ┌─ aug_assign.fe:62:16
   │
62 │         return self.my_num
   │                ^^^^^^^^^^^ mut SPtr<u256> -Load-> u256

note: 
   ┌─ aug_assign.fe:65:5
   │  
65 │ ╭     pub fn add_from_mem(a: u256, b: u256) -> u256 {
66 │ │         let mut my_array: Array<u256, 10> = [0; 10]
67 │ │         my_array[7] = a
68 │ │         my_array[7] += b
69 │ │         return my_array[7]
70 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:66:17
   │
66 │         let mut my_array: Array<u256, 10> = [0; 10]
   │                 ^^^^^^^^ mut Array<u256, 10>

note: 
   ┌─ aug_assign.fe:66:46
   │
66 │         let mut my_array: Array<u256, 10> = [0; 10]
   │                                              ^  ^^ u256
   │                                              │   
   │                                              u256

note: 
   ┌─ aug_assign.fe:66:45
   │
66 │         let mut my_array: Array<u256, 10> = [0; 10]
   │                                             ^^^^^^^ Array<u256, 10>
67 │         my_array[7] = a
   │         ^^^^^^^^ ^ u256
   │         │         
   │         mut Array<u256, 10>

note: 
   ┌─ aug_assign.fe:67:9
   │
67 │         my_array[7] = a
   │         ^^^^^^^^^^^   ^ u256
   │         │              
   │         mut u256
68 │         my_array[7] += b
   │         ^^^^^^^^ ^ u256
   │         │         
   │         mut Array<u256, 10>

note: 
   ┌─ aug_assign.fe:68:9
   │
68 │         my_array[7] += b
   │         ^^^^^^^^^^^    ^ u256
   │         │               
   │         mut u256
69 │         return my_array[7]
   │                ^^^^^^^^ ^ u256
   │                │         
   │                mut Array<u256, 10>

note: 
   ┌─ aug_assign.fe:69:16
   │
69 │         return my_array[7]
   │                ^^^^^^^^^^^ mut u256



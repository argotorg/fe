---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ ownable.fe:3:5
  │
3 │     pub previousOwner: address
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ address
4 │     #indexed
5 │     pub newOwner: address
  │     ^^^^^^^^^^^^^^^^^^^^^ address

note: 
  ┌─ ownable.fe:9:5
  │
9 │     _owner: address
  │     ^^^^^^^^^^^^^^^ address

note: 
   ┌─ ownable.fe:15:5
   │  
15 │ ╭     pub fn owner(self) -> address {
16 │ │         return self._owner
17 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> address

note: 
   ┌─ ownable.fe:16:16
   │
16 │         return self._owner
   │                ^^^^ Ownable: Value

note: 
   ┌─ ownable.fe:16:16
   │
16 │         return self._owner
   │                ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => Value

note: 
   ┌─ ownable.fe:19:5
   │  
19 │ ╭     pub fn renounceOwnership(self, ctx: Context) {
20 │ │         assert ctx.msg_sender() == self._owner
21 │ │         self._owner = address(0)
22 │ │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
23 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> ()

note: 
   ┌─ ownable.fe:20:16
   │
20 │         assert ctx.msg_sender() == self._owner
   │                ^^^ Context: Memory

note: 
   ┌─ ownable.fe:20:16
   │
20 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^    ^^^^ Ownable: Value
   │                │                    
   │                address: Value

note: 
   ┌─ ownable.fe:20:36
   │
20 │         assert ctx.msg_sender() == self._owner
   │                                    ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => Value

note: 
   ┌─ ownable.fe:20:16
   │
20 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
21 │         self._owner = address(0)
   │         ^^^^ Ownable: Value

note: 
   ┌─ ownable.fe:21:9
   │
21 │         self._owner = address(0)
   │         ^^^^^^^^^^^           ^ u256: Value
   │         │                      
   │         address: Storage { nonce: Some(0) }

note: 
   ┌─ ownable.fe:21:23
   │
21 │         self._owner = address(0)
   │                       ^^^^^^^^^^ address: Value
22 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
   │         ^^^                                          ^^^ Context: Memory
   │         │                                             
   │         Context: Memory

note: 
   ┌─ ownable.fe:22:54
   │
22 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
   │                                                      ^^^^^^^^^^^^^^^^                    ^ u256: Value
   │                                                      │                                    
   │                                                      address: Value

note: 
   ┌─ ownable.fe:22:82
   │
22 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
   │                                                                                  ^^^^^^^^^^ address: Value

note: 
   ┌─ ownable.fe:22:18
   │
22 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ OwnershipTransferred: Memory

note: 
   ┌─ ownable.fe:22:9
   │
22 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value

note: 
   ┌─ ownable.fe:25:5
   │  
25 │ ╭     pub fn transferOwnership(self, ctx: Context, newOwner: address) {
26 │ │         assert ctx.msg_sender() == self._owner
27 │ │         assert newOwner != address(0)
28 │ │         self._owner = newOwner
29 │ │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner))
30 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: newOwner, typ: address }] -> ()

note: 
   ┌─ ownable.fe:26:16
   │
26 │         assert ctx.msg_sender() == self._owner
   │                ^^^ Context: Memory

note: 
   ┌─ ownable.fe:26:16
   │
26 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^    ^^^^ Ownable: Value
   │                │                    
   │                address: Value

note: 
   ┌─ ownable.fe:26:36
   │
26 │         assert ctx.msg_sender() == self._owner
   │                                    ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => Value

note: 
   ┌─ ownable.fe:26:16
   │
26 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
27 │         assert newOwner != address(0)
   │                ^^^^^^^^            ^ u256: Value
   │                │                    
   │                address: Value

note: 
   ┌─ ownable.fe:27:28
   │
27 │         assert newOwner != address(0)
   │                            ^^^^^^^^^^ address: Value

note: 
   ┌─ ownable.fe:27:16
   │
27 │         assert newOwner != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^ bool: Value
28 │         self._owner = newOwner
   │         ^^^^ Ownable: Value

note: 
   ┌─ ownable.fe:28:9
   │
28 │         self._owner = newOwner
   │         ^^^^^^^^^^^   ^^^^^^^^ address: Value
   │         │              
   │         address: Storage { nonce: Some(0) }
29 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner))
   │         ^^^                                          ^^^ Context: Memory
   │         │                                             
   │         Context: Memory

note: 
   ┌─ ownable.fe:29:54
   │
29 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner))
   │                                                      ^^^^^^^^^^^^^^^^  ^^^^^^^^ address: Value
   │                                                      │                  
   │                                                      address: Value

note: 
   ┌─ ownable.fe:29:18
   │
29 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ OwnershipTransferred: Memory

note: 
   ┌─ ownable.fe:29:9
   │
29 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value



---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ ownable.fe:2:3
  │
2 │   _owner: address
  │   ^^^^^^^^^^^^^^^ address

note: 
  ┌─ ownable.fe:5:5
  │
5 │     idx previousOwner: address
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ address
6 │     idx newOwner: address
  │     ^^^^^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ ownable.fe:11:3
   │  
11 │ ╭   pub fn owner(self) -> address:
12 │ │     return self._owner
   │ ╰──────────────────────^ attributes hash: 10447292744135180405
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ ownable.fe:12:12
   │
12 │     return self._owner
   │            ^^^^ Ownable: Value

note: 
   ┌─ ownable.fe:12:12
   │
12 │     return self._owner
   │            ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => Value

note: 
   ┌─ ownable.fe:14:3
   │  
14 │ ╭   pub fn renounceOwnership(self):
15 │ │     assert msg.sender == self._owner
16 │ │     self._owner = address(0)
17 │ │     emit OwnershipTransferred(previousOwner: msg.sender, newOwner: address(0))
   │ ╰──────────────────────────────────────────────────────────────────────────────^ attributes hash: 17603814563784536273
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ ownable.fe:15:12
   │
15 │     assert msg.sender == self._owner
   │            ^^^^^^^^^^    ^^^^ Ownable: Value
   │            │              
   │            address: Value

note: 
   ┌─ ownable.fe:15:26
   │
15 │     assert msg.sender == self._owner
   │                          ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => Value

note: 
   ┌─ ownable.fe:15:12
   │
15 │     assert msg.sender == self._owner
   │            ^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
16 │     self._owner = address(0)
   │     ^^^^ Ownable: Value

note: 
   ┌─ ownable.fe:16:5
   │
16 │     self._owner = address(0)
   │     ^^^^^^^^^^^           ^ u256: Value
   │     │                      
   │     address: Storage { nonce: Some(0) }

note: 
   ┌─ ownable.fe:16:19
   │
16 │     self._owner = address(0)
   │                   ^^^^^^^^^^ address: Value
17 │     emit OwnershipTransferred(previousOwner: msg.sender, newOwner: address(0))
   │                                              ^^^^^^^^^^                    ^ u256: Value
   │                                              │                              
   │                                              address: Value

note: 
   ┌─ ownable.fe:17:68
   │
17 │     emit OwnershipTransferred(previousOwner: msg.sender, newOwner: address(0))
   │                                                                    ^^^^^^^^^^ address: Value

note: 
   ┌─ ownable.fe:17:5
   │
17 │     emit OwnershipTransferred(previousOwner: msg.sender, newOwner: address(0))
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 12166912587337306484
   │
   = Event {
         name: "OwnershipTransferred",
         fields: [
             EventField {
                 name: "previousOwner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "newOwner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
         ],
     }

note: 
   ┌─ ownable.fe:16:19
   │
16 │     self._owner = address(0)
   │                   ^^^^^^^ TypeConstructor(Base(Address))
17 │     emit OwnershipTransferred(previousOwner: msg.sender, newOwner: address(0))
   │                                                                    ^^^^^^^ TypeConstructor(Base(Address))

note: 
   ┌─ ownable.fe:19:3
   │  
19 │ ╭   pub fn transferOwnership(self, newOwner: address):
20 │ │     assert msg.sender == self._owner
21 │ │     assert newOwner != address(0)
22 │ │     self._owner = newOwner
23 │ │     emit OwnershipTransferred(previousOwner: msg.sender, newOwner)
   │ ╰──────────────────────────────────────────────────────────────────^ attributes hash: 6773896465733249515
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "newOwner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ ownable.fe:20:12
   │
20 │     assert msg.sender == self._owner
   │            ^^^^^^^^^^    ^^^^ Ownable: Value
   │            │              
   │            address: Value

note: 
   ┌─ ownable.fe:20:26
   │
20 │     assert msg.sender == self._owner
   │                          ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => Value

note: 
   ┌─ ownable.fe:20:12
   │
20 │     assert msg.sender == self._owner
   │            ^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
21 │     assert newOwner != address(0)
   │            ^^^^^^^^            ^ u256: Value
   │            │                    
   │            address: Value

note: 
   ┌─ ownable.fe:21:24
   │
21 │     assert newOwner != address(0)
   │                        ^^^^^^^^^^ address: Value

note: 
   ┌─ ownable.fe:21:12
   │
21 │     assert newOwner != address(0)
   │            ^^^^^^^^^^^^^^^^^^^^^^ bool: Value
22 │     self._owner = newOwner
   │     ^^^^ Ownable: Value

note: 
   ┌─ ownable.fe:22:5
   │
22 │     self._owner = newOwner
   │     ^^^^^^^^^^^   ^^^^^^^^ address: Value
   │     │              
   │     address: Storage { nonce: Some(0) }
23 │     emit OwnershipTransferred(previousOwner: msg.sender, newOwner)
   │                                              ^^^^^^^^^^  ^^^^^^^^ address: Value
   │                                              │            
   │                                              address: Value

note: 
   ┌─ ownable.fe:23:5
   │
23 │     emit OwnershipTransferred(previousOwner: msg.sender, newOwner)
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 12166912587337306484
   │
   = Event {
         name: "OwnershipTransferred",
         fields: [
             EventField {
                 name: "previousOwner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "newOwner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
         ],
     }

note: 
   ┌─ ownable.fe:21:24
   │
21 │     assert newOwner != address(0)
   │                        ^^^^^^^ TypeConstructor(Base(Address))



---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ ownable.fe:2:5
  │
2 │     _owner: address
  │     ^^^^^^^^^^^^^^^ SPtr<address>

note: 
  ┌─ ownable.fe:5:9
  │
5 │         idx previousOwner: address
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^^ address
6 │         idx newOwner: address
  │         ^^^^^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ ownable.fe:13:5
   │  
13 │ ╭     pub fn owner(self) -> address {
14 │ │         return self._owner
15 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> address

note: 
   ┌─ ownable.fe:14:16
   │
14 │         return self._owner
   │                ^^^^ Ownable

note: 
   ┌─ ownable.fe:14:16
   │
14 │         return self._owner
   │                ^^^^^^^^^^^ SPtr<address>

note: 
   ┌─ ownable.fe:17:5
   │  
17 │ ╭     pub fn renounceOwnership(self, ctx: Context) {
18 │ │         assert ctx.msg_sender() == self._owner
19 │ │         self._owner = address(0)
20 │ │         emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner: address(0))
21 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> ()

note: 
   ┌─ ownable.fe:18:16
   │
18 │         assert ctx.msg_sender() == self._owner
   │                ^^^ Context

note: 
   ┌─ ownable.fe:18:16
   │
18 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^    ^^^^ Ownable
   │                │                    
   │                address

note: 
   ┌─ ownable.fe:18:36
   │
18 │         assert ctx.msg_sender() == self._owner
   │                                    ^^^^^^^^^^^ SPtr<address>

note: 
   ┌─ ownable.fe:18:16
   │
18 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
19 │         self._owner = address(0)
   │         ^^^^ Ownable

note: 
   ┌─ ownable.fe:19:9
   │
19 │         self._owner = address(0)
   │         ^^^^^^^^^^^           ^ u256
   │         │                      
   │         SPtr<address>

note: 
   ┌─ ownable.fe:19:23
   │
19 │         self._owner = address(0)
   │                       ^^^^^^^^^^ address
20 │         emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner: address(0))
   │                                   ^^^                 ^^^ Context
   │                                   │                    
   │                                   Context

note: 
   ┌─ ownable.fe:20:55
   │
20 │         emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner: address(0))
   │                                                       ^^^^^^^^^^^^^^^^                    ^ u256
   │                                                       │                                    
   │                                                       address

note: 
   ┌─ ownable.fe:20:83
   │
20 │         emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner: address(0))
   │                                                                                   ^^^^^^^^^^ address

note: 
   ┌─ ownable.fe:23:5
   │  
23 │ ╭     pub fn transferOwnership(self, ctx: Context, newOwner: address) {
24 │ │         assert ctx.msg_sender() == self._owner
25 │ │         assert newOwner != address(0)
26 │ │         self._owner = newOwner
27 │ │         emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner)
28 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }, { label: None, name: newOwner, typ: address }] -> ()

note: 
   ┌─ ownable.fe:24:16
   │
24 │         assert ctx.msg_sender() == self._owner
   │                ^^^ Context

note: 
   ┌─ ownable.fe:24:16
   │
24 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^    ^^^^ Ownable
   │                │                    
   │                address

note: 
   ┌─ ownable.fe:24:36
   │
24 │         assert ctx.msg_sender() == self._owner
   │                                    ^^^^^^^^^^^ SPtr<address>

note: 
   ┌─ ownable.fe:24:16
   │
24 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
25 │         assert newOwner != address(0)
   │                ^^^^^^^^            ^ u256
   │                │                    
   │                address

note: 
   ┌─ ownable.fe:25:28
   │
25 │         assert newOwner != address(0)
   │                            ^^^^^^^^^^ address

note: 
   ┌─ ownable.fe:25:16
   │
25 │         assert newOwner != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^ bool
26 │         self._owner = newOwner
   │         ^^^^ Ownable

note: 
   ┌─ ownable.fe:26:9
   │
26 │         self._owner = newOwner
   │         ^^^^^^^^^^^   ^^^^^^^^ address
   │         │              
   │         SPtr<address>
27 │         emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner)
   │                                   ^^^                 ^^^ Context
   │                                   │                    
   │                                   Context

note: 
   ┌─ ownable.fe:27:55
   │
27 │         emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner)
   │                                                       ^^^^^^^^^^^^^^^^  ^^^^^^^^ address
   │                                                       │                  
   │                                                       address



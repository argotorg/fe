---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ ownable.fe:4:3
  │
4 │   _owner: address
  │   ^^^^^^^^^^^^^^^ address

note: 
  ┌─ ownable.fe:7:5
  │
7 │     idx previousOwner: address
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ address
8 │     idx newOwner: address
  │     ^^^^^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ ownable.fe:13:3
   │  
13 │ ╭   pub fn owner(self) -> address:
14 │ │     return self._owner
   │ ╰──────────────────────^ attributes hash: 227275695522088782
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ ownable.fe:14:12
   │
14 │     return self._owner
   │            ^^^^ Ownable: Value

note: 
   ┌─ ownable.fe:14:12
   │
14 │     return self._owner
   │            ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => Value

note: 
   ┌─ ownable.fe:16:3
   │  
16 │ ╭   pub fn renounceOwnership(self, ctx: Context):
17 │ │     assert ctx.msg_sender() == self._owner
18 │ │     self._owner = address(0)
19 │ │     emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner: address(0))
   │ ╰─────────────────────────────────────────────────────────────────────────────────────────^ attributes hash: 1731341862738941170
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 label: None,
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ ownable.fe:17:12
   │
17 │     assert ctx.msg_sender() == self._owner
   │            ^^^ Context: Memory

note: 
   ┌─ ownable.fe:17:12
   │
17 │     assert ctx.msg_sender() == self._owner
   │            ^^^^^^^^^^^^^^^^    ^^^^ Ownable: Value
   │            │                    
   │            address: Value

note: 
   ┌─ ownable.fe:17:32
   │
17 │     assert ctx.msg_sender() == self._owner
   │                                ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => Value

note: 
   ┌─ ownable.fe:17:12
   │
17 │     assert ctx.msg_sender() == self._owner
   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
18 │     self._owner = address(0)
   │     ^^^^ Ownable: Value

note: 
   ┌─ ownable.fe:18:5
   │
18 │     self._owner = address(0)
   │     ^^^^^^^^^^^           ^ u256: Value
   │     │                      
   │     address: Storage { nonce: Some(0) }

note: 
   ┌─ ownable.fe:18:19
   │
18 │     self._owner = address(0)
   │                   ^^^^^^^^^^ address: Value
19 │     emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner: address(0))
   │                               ^^^                 ^^^ Context: Memory
   │                               │                    
   │                               Context: Memory

note: 
   ┌─ ownable.fe:19:51
   │
19 │     emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner: address(0))
   │                                                   ^^^^^^^^^^^^^^^^                    ^ u256: Value
   │                                                   │                                    
   │                                                   address: Value

note: 
   ┌─ ownable.fe:19:79
   │
19 │     emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner: address(0))
   │                                                                               ^^^^^^^^^^ address: Value

note: 
   ┌─ ownable.fe:19:5
   │
19 │     emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner: address(0))
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 12166912587337306484
   │
   = Event {
         name: "OwnershipTransferred",
         fields: [
             EventField {
                 name: "previousOwner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "newOwner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
         ],
     }

note: 
   ┌─ ownable.fe:21:3
   │  
21 │ ╭   pub fn transferOwnership(self, ctx: Context, newOwner: address):
22 │ │     assert ctx.msg_sender() == self._owner
23 │ │     assert newOwner != address(0)
24 │ │     self._owner = newOwner
25 │ │     emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner)
   │ ╰─────────────────────────────────────────────────────────────────────────────^ attributes hash: 5690910393288515862
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 label: None,
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "newOwner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ ownable.fe:22:12
   │
22 │     assert ctx.msg_sender() == self._owner
   │            ^^^ Context: Memory

note: 
   ┌─ ownable.fe:22:12
   │
22 │     assert ctx.msg_sender() == self._owner
   │            ^^^^^^^^^^^^^^^^    ^^^^ Ownable: Value
   │            │                    
   │            address: Value

note: 
   ┌─ ownable.fe:22:32
   │
22 │     assert ctx.msg_sender() == self._owner
   │                                ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => Value

note: 
   ┌─ ownable.fe:22:12
   │
22 │     assert ctx.msg_sender() == self._owner
   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
23 │     assert newOwner != address(0)
   │            ^^^^^^^^            ^ u256: Value
   │            │                    
   │            address: Value

note: 
   ┌─ ownable.fe:23:24
   │
23 │     assert newOwner != address(0)
   │                        ^^^^^^^^^^ address: Value

note: 
   ┌─ ownable.fe:23:12
   │
23 │     assert newOwner != address(0)
   │            ^^^^^^^^^^^^^^^^^^^^^^ bool: Value
24 │     self._owner = newOwner
   │     ^^^^ Ownable: Value

note: 
   ┌─ ownable.fe:24:5
   │
24 │     self._owner = newOwner
   │     ^^^^^^^^^^^   ^^^^^^^^ address: Value
   │     │              
   │     address: Storage { nonce: Some(0) }
25 │     emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner)
   │                               ^^^                 ^^^ Context: Memory
   │                               │                    
   │                               Context: Memory

note: 
   ┌─ ownable.fe:25:51
   │
25 │     emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner)
   │                                                   ^^^^^^^^^^^^^^^^  ^^^^^^^^ address: Value
   │                                                   │                  
   │                                                   address: Value

note: 
   ┌─ ownable.fe:25:5
   │
25 │     emit OwnershipTransferred(ctx, previousOwner: ctx.msg_sender(), newOwner)
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 12166912587337306484
   │
   = Event {
         name: "OwnershipTransferred",
         fields: [
             EventField {
                 name: "previousOwner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "newOwner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
         ],
     }



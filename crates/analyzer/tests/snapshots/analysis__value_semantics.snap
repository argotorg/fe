---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ value_semantics.fe:2:5
  │
2 │     my_array: Array<u8, 3>
  │     ^^^^^^^^^^^^^^^^^^^^^^ Array<u8, 3>

note: 
  ┌─ value_semantics.fe:4:5
  │  
4 │ ╭     pub fn bar(mut self) -> bool {
5 │ │         self.set_array()
6 │ │         tuple_of_primitive()
7 │ │ 
8 │ │         return true
9 │ │     }
  │ ╰─────^ params: [mut self] -> bool

note: 
  ┌─ value_semantics.fe:5:9
  │
5 │         self.set_array()
  │         ^^^^ mut Foo

note: 
  ┌─ value_semantics.fe:5:9
  │
5 │         self.set_array()
  │         ^^^^^^^^^^^^^^^^ ()
6 │         tuple_of_primitive()
  │         ^^^^^^^^^^^^^^^^^^^^ ()
7 │ 
8 │         return true
  │                ^^^^ bool

note: 
   ┌─ value_semantics.fe:11:5
   │  
11 │ ╭     pub fn set_array(mut self) {
12 │ │         self.my_array = [42; 3]
13 │ │     }
   │ ╰─────^ params: [mut self] -> ()

note: 
   ┌─ value_semantics.fe:12:9
   │
12 │         self.my_array = [42; 3]
   │         ^^^^ mut Foo

note: 
   ┌─ value_semantics.fe:12:9
   │
12 │         self.my_array = [42; 3]
   │         ^^^^^^^^^^^^^    ^^  ^ u256
   │         │                │    
   │         │                u8
   │         mut SPtr<Array<u8, 3>>

note: 
   ┌─ value_semantics.fe:12:25
   │
12 │         self.my_array = [42; 3]
   │                         ^^^^^^^ Array<u8, 3>

note: 
   ┌─ value_semantics.fe:17:1
   │  
17 │ ╭ fn tuple_of_primitive() {
18 │ │     let mut tup_a: (u8, u8) = (1, 2);
19 │ │     let mut tup_b: (u8, u8) = tup_a
20 │ │     tup_a.item0 = 5
   · │
33 │ │     assert tup_imm.item0 == 1
34 │ │ }
   │ ╰─^ params: [] -> ()

note: 
   ┌─ value_semantics.fe:18:13
   │
18 │     let mut tup_a: (u8, u8) = (1, 2);
   │             ^^^^^ mut (u8, u8)
19 │     let mut tup_b: (u8, u8) = tup_a
   │             ^^^^^ mut (u8, u8)
   ·
23 │     let tup_imm: (u8, u8) = (1, 2)
   │         ^^^^^^^ (u8, u8)
24 │     let mut tup_c: (u8, u8) = tup_imm
   │             ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:18:32
   │
18 │     let mut tup_a: (u8, u8) = (1, 2);
   │                                ^  ^ u8
   │                                │   
   │                                u8

note: 
   ┌─ value_semantics.fe:18:31
   │
18 │     let mut tup_a: (u8, u8) = (1, 2);
   │                               ^^^^^^ (u8, u8)
19 │     let mut tup_b: (u8, u8) = tup_a
   │                               ^^^^^ mut (u8, u8) -Copy-> (u8, u8)
20 │     tup_a.item0 = 5
   │     ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:20:5
   │
20 │     tup_a.item0 = 5
   │     ^^^^^^^^^^^   ^ u8
   │     │              
   │     mut u8
21 │     assert tup_b.item0 == 1
   │            ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:21:12
   │
21 │     assert tup_b.item0 == 1
   │            ^^^^^^^^^^^    ^ u8
   │            │               
   │            mut u8

note: 
   ┌─ value_semantics.fe:21:12
   │
21 │     assert tup_b.item0 == 1
   │            ^^^^^^^^^^^^^^^^ bool
22 │ 
23 │     let tup_imm: (u8, u8) = (1, 2)
   │                              ^  ^ u8
   │                              │   
   │                              u8

note: 
   ┌─ value_semantics.fe:23:29
   │
23 │     let tup_imm: (u8, u8) = (1, 2)
   │                             ^^^^^^ (u8, u8)
24 │     let mut tup_c: (u8, u8) = tup_imm
   │                               ^^^^^^^ (u8, u8) -Copy-> (u8, u8)
25 │ 
26 │     tup_c.item0 = 10
   │     ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:26:5
   │
26 │     tup_c.item0 = 10
   │     ^^^^^^^^^^^   ^^ u8
   │     │              
   │     mut u8
27 │     assert tup_imm.item0 == 1
   │            ^^^^^^^ (u8, u8)

note: 
   ┌─ value_semantics.fe:27:12
   │
27 │     assert tup_imm.item0 == 1
   │            ^^^^^^^^^^^^^    ^ u8
   │            │                 
   │            u8

note: 
   ┌─ value_semantics.fe:27:12
   │
27 │     assert tup_imm.item0 == 1
   │            ^^^^^^^^^^^^^^^^^^ bool
28 │ 
29 │     tup_c = tup_imm
   │     ^^^^^   ^^^^^^^ (u8, u8) -Copy-> (u8, u8)
   │     │        
   │     mut (u8, u8)
30 │     assert tup_c.item0 == 1
   │            ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:30:12
   │
30 │     assert tup_c.item0 == 1
   │            ^^^^^^^^^^^    ^ u8
   │            │               
   │            mut u8

note: 
   ┌─ value_semantics.fe:30:12
   │
30 │     assert tup_c.item0 == 1
   │            ^^^^^^^^^^^^^^^^ bool
31 │     tup_c.item0 = 10
   │     ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:31:5
   │
31 │     tup_c.item0 = 10
   │     ^^^^^^^^^^^   ^^ u8
   │     │              
   │     mut u8
32 │     assert tup_c.item0 == 10
   │            ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:32:12
   │
32 │     assert tup_c.item0 == 10
   │            ^^^^^^^^^^^    ^^ u8
   │            │               
   │            mut u8

note: 
   ┌─ value_semantics.fe:32:12
   │
32 │     assert tup_c.item0 == 10
   │            ^^^^^^^^^^^^^^^^^ bool
33 │     assert tup_imm.item0 == 1
   │            ^^^^^^^ (u8, u8)

note: 
   ┌─ value_semantics.fe:33:12
   │
33 │     assert tup_imm.item0 == 1
   │            ^^^^^^^^^^^^^    ^ u8
   │            │                 
   │            u8

note: 
   ┌─ value_semantics.fe:33:12
   │
33 │     assert tup_imm.item0 == 1
   │            ^^^^^^^^^^^^^^^^^^ bool

note: 
   ┌─ value_semantics.fe:37:5
   │
37 │     pub x: u64
   │     ^^^^^^^^^^ u64
38 │     pub y: u64
   │     ^^^^^^^^^^ u64

note: 
   ┌─ value_semantics.fe:41:5
   │
41 │     pub a: Point
   │     ^^^^^^^^^^^^ Point
42 │     pub b: Point
   │     ^^^^^^^^^^^^ Point

note: 
   ┌─ value_semantics.fe:44:5
   │  
44 │ ╭     pub fn from_origin_to(b: Point) -> Line {
45 │ │         return Line(a: Point(x: 0, y: 0), b)
46 │ │     }
   │ ╰─────^ params: [{ label: None, name: b, typ: Point }] -> Line

note: 
   ┌─ value_semantics.fe:45:33
   │
45 │         return Line(a: Point(x: 0, y: 0), b)
   │                                 ^     ^ u64
   │                                 │      
   │                                 u64

note: 
   ┌─ value_semantics.fe:45:24
   │
45 │         return Line(a: Point(x: 0, y: 0), b)
   │                        ^^^^^^^^^^^^^^^^^  ^ Point -Copy-> Point
   │                        │                   
   │                        Point

note: 
   ┌─ value_semantics.fe:45:16
   │
45 │         return Line(a: Point(x: 0, y: 0), b)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Line

note: 
   ┌─ value_semantics.fe:49:1
   │  
49 │ ╭ fn struct_constructor() {
50 │ │     let mut a: Point = Point(x: 0, y: 0)
51 │ │     let mut b: Point = Point(x: 10, y: 10)
52 │ │ 
   · │
58 │ │     assert b.x == 10
59 │ │ }
   │ ╰─^ params: [] -> ()

note: 
   ┌─ value_semantics.fe:50:13
   │
50 │     let mut a: Point = Point(x: 0, y: 0)
   │             ^ mut Point
51 │     let mut b: Point = Point(x: 10, y: 10)
   │             ^ mut Point
52 │ 
53 │     let mut line: Line = Line(a, b)
   │             ^^^^ mut Line

note: 
   ┌─ value_semantics.fe:50:33
   │
50 │     let mut a: Point = Point(x: 0, y: 0)
   │                                 ^     ^ u64
   │                                 │      
   │                                 u64

note: 
   ┌─ value_semantics.fe:50:24
   │
50 │     let mut a: Point = Point(x: 0, y: 0)
   │                        ^^^^^^^^^^^^^^^^^ Point
51 │     let mut b: Point = Point(x: 10, y: 10)
   │                                 ^^     ^^ u64
   │                                 │       
   │                                 u64

note: 
   ┌─ value_semantics.fe:51:24
   │
51 │     let mut b: Point = Point(x: 10, y: 10)
   │                        ^^^^^^^^^^^^^^^^^^^ Point
52 │ 
53 │     let mut line: Line = Line(a, b)
   │                               ^  ^ mut Point -Copy-> Point
   │                               │   
   │                               mut Point -Copy-> Point

note: 
   ┌─ value_semantics.fe:53:26
   │
53 │     let mut line: Line = Line(a, b)
   │                          ^^^^^^^^^^ Line
54 │     a.x = 1
   │     ^ mut Point

note: 
   ┌─ value_semantics.fe:54:5
   │
54 │     a.x = 1
   │     ^^^   ^ u64
   │     │      
   │     mut u64
55 │     assert line.a.x == 0
   │            ^^^^ mut Line

note: 
   ┌─ value_semantics.fe:55:12
   │
55 │     assert line.a.x == 0
   │            ^^^^^^ mut Point

note: 
   ┌─ value_semantics.fe:55:12
   │
55 │     assert line.a.x == 0
   │            ^^^^^^^^    ^ u64
   │            │            
   │            mut u64

note: 
   ┌─ value_semantics.fe:55:12
   │
55 │     assert line.a.x == 0
   │            ^^^^^^^^^^^^^ bool
56 │ 
57 │     line.b.x = 100
   │     ^^^^ mut Line

note: 
   ┌─ value_semantics.fe:57:5
   │
57 │     line.b.x = 100
   │     ^^^^^^ mut Point

note: 
   ┌─ value_semantics.fe:57:5
   │
57 │     line.b.x = 100
   │     ^^^^^^^^   ^^^ u64
   │     │           
   │     mut u64
58 │     assert b.x == 10
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:58:12
   │
58 │     assert b.x == 10
   │            ^^^    ^^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:58:12
   │
58 │     assert b.x == 10
   │            ^^^^^^^^^ bool

note: 
   ┌─ value_semantics.fe:61:1
   │  
61 │ ╭ fn copies() {
62 │ │     let p: Point = Point(x: 0, y: 0)
63 │ │     let mut a: Point = p // copy
64 │ │     a.x = 1
   · │
81 │ │     let mut n: Line = Line::from_origin_to(b) // copy
82 │ │ }
   │ ╰─^ params: [] -> ()

note: 
   ┌─ value_semantics.fe:62:9
   │
62 │     let p: Point = Point(x: 0, y: 0)
   │         ^ Point
63 │     let mut a: Point = p // copy
   │             ^ mut Point
   ·
68 │     let b: Point = p     // no copy
   │         ^ Point
   ·
75 │     let mut c: Point = a // copy
   │             ^ mut Point
   ·
80 │     let m: Line = Line::from_origin_to(b)     // no copy
   │         ^ Line
81 │     let mut n: Line = Line::from_origin_to(b) // copy
   │             ^ mut Line

note: 
   ┌─ value_semantics.fe:62:29
   │
62 │     let p: Point = Point(x: 0, y: 0)
   │                             ^     ^ u64
   │                             │      
   │                             u64

note: 
   ┌─ value_semantics.fe:62:20
   │
62 │     let p: Point = Point(x: 0, y: 0)
   │                    ^^^^^^^^^^^^^^^^^ Point
63 │     let mut a: Point = p // copy
   │                        ^ Point -Copy-> Point
64 │     a.x = 1
   │     ^ mut Point

note: 
   ┌─ value_semantics.fe:64:5
   │
64 │     a.x = 1
   │     ^^^   ^ u64
   │     │      
   │     mut u64
65 │     assert p.x == 0
   │            ^ Point

note: 
   ┌─ value_semantics.fe:65:12
   │
65 │     assert p.x == 0
   │            ^^^    ^ u64
   │            │       
   │            u64

note: 
   ┌─ value_semantics.fe:65:12
   │
65 │     assert p.x == 0
   │            ^^^^^^^^ bool
66 │     assert a.x == 1
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:66:12
   │
66 │     assert a.x == 1
   │            ^^^    ^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:66:12
   │
66 │     assert a.x == 1
   │            ^^^^^^^^ bool
67 │ 
68 │     let b: Point = p     // no copy
   │                    ^ Point
69 │     a = b                // copy
   │     ^   ^ Point -Copy-> Point
   │     │    
   │     mut Point
70 │     assert a.x == 0
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:70:12
   │
70 │     assert a.x == 0
   │            ^^^    ^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:70:12
   │
70 │     assert a.x == 0
   │            ^^^^^^^^ bool
71 │     a.x = 2
   │     ^ mut Point

note: 
   ┌─ value_semantics.fe:71:5
   │
71 │     a.x = 2
   │     ^^^   ^ u64
   │     │      
   │     mut u64
72 │     assert b.x == 0
   │            ^ Point

note: 
   ┌─ value_semantics.fe:72:12
   │
72 │     assert b.x == 0
   │            ^^^    ^ u64
   │            │       
   │            u64

note: 
   ┌─ value_semantics.fe:72:12
   │
72 │     assert b.x == 0
   │            ^^^^^^^^ bool
73 │     assert a.x == 2
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:73:12
   │
73 │     assert a.x == 2
   │            ^^^    ^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:73:12
   │
73 │     assert a.x == 2
   │            ^^^^^^^^ bool
74 │ 
75 │     let mut c: Point = a // copy
   │                        ^ mut Point -Copy-> Point
76 │     a.x = 3
   │     ^ mut Point

note: 
   ┌─ value_semantics.fe:76:5
   │
76 │     a.x = 3
   │     ^^^   ^ u64
   │     │      
   │     mut u64
77 │     assert c.x == 2
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:77:12
   │
77 │     assert c.x == 2
   │            ^^^    ^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:77:12
   │
77 │     assert c.x == 2
   │            ^^^^^^^^ bool
78 │     assert a.x == 3
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:78:12
   │
78 │     assert a.x == 3
   │            ^^^    ^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:78:12
   │
78 │     assert a.x == 3
   │            ^^^^^^^^ bool
79 │ 
80 │     let m: Line = Line::from_origin_to(b)     // no copy
   │                                        ^ Point

note: 
   ┌─ value_semantics.fe:80:19
   │
80 │     let m: Line = Line::from_origin_to(b)     // no copy
   │                   ^^^^^^^^^^^^^^^^^^^^^^^ Line
81 │     let mut n: Line = Line::from_origin_to(b) // copy
   │                                            ^ Point

note: 
   ┌─ value_semantics.fe:81:23
   │
81 │     let mut n: Line = Line::from_origin_to(b) // copy
   │                       ^^^^^^^^^^^^^^^^^^^^^^^ Line -Copy-> Line



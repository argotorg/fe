---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ uniswap.fe:4:5
  │  
4 │ ╭     pub fn balanceOf(_ account: address) -> u256:
5 │ │         return 0
  │ ╰────────────────^ attributes hash: 4709511530683498418
  │  
  = FunctionSignature {
        self_decl: None,
        ctx_decl: None,
        params: [
            FunctionParam {
                label: Some(
                    "_",
                ),
                name: "account",
                typ: Ok(
                    Base(
                        Address,
                    ),
                ),
            },
        ],
        return_type: Ok(
            Base(
                Numeric(
                    U256,
                ),
            ),
        ),
    }

note: 
  ┌─ uniswap.fe:5:16
  │
5 │         return 0
  │                ^ u256: Value

note: 
  ┌─ uniswap.fe:7:5
  │  
7 │ ╭     pub fn transfer(to: address, _ amount: u256) -> bool:
8 │ │         return false
  │ ╰────────────────────^ attributes hash: 12261720285838819896
  │  
  = FunctionSignature {
        self_decl: None,
        ctx_decl: None,
        params: [
            FunctionParam {
                label: None,
                name: "to",
                typ: Ok(
                    Base(
                        Address,
                    ),
                ),
            },
            FunctionParam {
                label: Some(
                    "_",
                ),
                name: "amount",
                typ: Ok(
                    Base(
                        Numeric(
                            U256,
                        ),
                    ),
                ),
            },
        ],
        return_type: Ok(
            Base(
                Bool,
            ),
        ),
    }

note: 
  ┌─ uniswap.fe:8:16
  │
8 │         return false
  │                ^^^^^ bool: Value

note: 
   ┌─ uniswap.fe:14:5
   │
14 │     balances: Map<address, u256>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>
15 │     allowances: Map<address, Map<address, u256>>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>
16 │     total_supply: u256
   │     ^^^^^^^^^^^^^^^^^^ u256
17 │ 
18 │     nonces: Map<address, u256>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>
19 │ 
20 │     factory: address
   │     ^^^^^^^^^^^^^^^^ address
21 │     token0: address
   │     ^^^^^^^^^^^^^^^ address
22 │     token1: address
   │     ^^^^^^^^^^^^^^^ address
23 │ 
24 │     reserve0: u256
   │     ^^^^^^^^^^^^^^ u256
25 │     reserve1: u256
   │     ^^^^^^^^^^^^^^ u256
26 │     block_timestamp_last: u256
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
27 │ 
28 │     price0_cumulative_last: u256
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
29 │     price1_cumulative_last: u256
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
30 │     k_last: u256
   │     ^^^^^^^^^^^^ u256

note: 
   ┌─ uniswap.fe:33:9
   │
33 │         idx owner: address
   │         ^^^^^^^^^^^^^^^^^^ address
34 │         idx spender: address
   │         ^^^^^^^^^^^^^^^^^^^^ address
35 │         value: u256
   │         ^^^^^^^^^^^ u256

note: 
   ┌─ uniswap.fe:38:9
   │
38 │         idx from: address
   │         ^^^^^^^^^^^^^^^^^ address
39 │         idx to: address
   │         ^^^^^^^^^^^^^^^ address
40 │         value: u256
   │         ^^^^^^^^^^^ u256

note: 
   ┌─ uniswap.fe:43:9
   │
43 │         idx sender: address
   │         ^^^^^^^^^^^^^^^^^^^ address
44 │         amount0: u256
   │         ^^^^^^^^^^^^^ u256
45 │         amount1: u256
   │         ^^^^^^^^^^^^^ u256

note: 
   ┌─ uniswap.fe:48:9
   │
48 │         idx sender: address
   │         ^^^^^^^^^^^^^^^^^^^ address
49 │         amount0: u256
   │         ^^^^^^^^^^^^^ u256
50 │         amount1: u256
   │         ^^^^^^^^^^^^^ u256
51 │         idx to: address
   │         ^^^^^^^^^^^^^^^ address

note: 
   ┌─ uniswap.fe:54:9
   │
54 │         idx sender: address
   │         ^^^^^^^^^^^^^^^^^^^ address
55 │         amount0_in: u256
   │         ^^^^^^^^^^^^^^^^ u256
56 │         amount1_in: u256
   │         ^^^^^^^^^^^^^^^^ u256
57 │         amount0_out: u256
   │         ^^^^^^^^^^^^^^^^^ u256
58 │         amount1_out: u256
   │         ^^^^^^^^^^^^^^^^^ u256
59 │         idx to: address
   │         ^^^^^^^^^^^^^^^ address

note: 
   ┌─ uniswap.fe:62:9
   │
62 │         reserve0: u256
   │         ^^^^^^^^^^^^^^ u256
63 │         reserve1: u256
   │         ^^^^^^^^^^^^^^ u256

note: 
   ┌─ uniswap.fe:68:5
   │  
68 │ ╭     pub fn factory(self) -> address:
69 │ │         return self.factory
   │ ╰───────────────────────────^ attributes hash: 227275695522088782
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ uniswap.fe:69:16
   │
69 │         return self.factory
   │                ^^^^ UniswapV2Pair: Value

note: 
   ┌─ uniswap.fe:69:16
   │
69 │         return self.factory
   │                ^^^^^^^^^^^^ address: Storage { nonce: Some(4) } => Value

note: 
   ┌─ uniswap.fe:71:5
   │  
71 │ ╭     pub fn token0(self) -> address:
72 │ │         return self.token0
   │ ╰──────────────────────────^ attributes hash: 227275695522088782
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ uniswap.fe:72:16
   │
72 │         return self.token0
   │                ^^^^ UniswapV2Pair: Value

note: 
   ┌─ uniswap.fe:72:16
   │
72 │         return self.token0
   │                ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Value

note: 
   ┌─ uniswap.fe:74:5
   │  
74 │ ╭     pub fn token1(self) -> address:
75 │ │         return self.token1
   │ ╰──────────────────────────^ attributes hash: 227275695522088782
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ uniswap.fe:75:16
   │
75 │         return self.token1
   │                ^^^^ UniswapV2Pair: Value

note: 
   ┌─ uniswap.fe:75:16
   │
75 │         return self.token1
   │                ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Value

note: 
   ┌─ uniswap.fe:77:5
   │  
77 │ ╭     fn _mint(self, ctx: Context, to: address, value: u256):
78 │ │         self.total_supply = self.total_supply + value
79 │ │         self.balances[to] = self.balances[to] + value
80 │ │         emit Transfer(ctx, from: address(0), to, value)
   │ ╰───────────────────────────────────────────────────────^ attributes hash: 12650409809079895726
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 label: None,
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ uniswap.fe:78:9
   │
78 │         self.total_supply = self.total_supply + value
   │         ^^^^ UniswapV2Pair: Value

note: 
   ┌─ uniswap.fe:78:9
   │
78 │         self.total_supply = self.total_supply + value
   │         ^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
   │         │                    
   │         u256: Storage { nonce: Some(2) }

note: 
   ┌─ uniswap.fe:78:29
   │
78 │         self.total_supply = self.total_supply + value
   │                             ^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                             │                    
   │                             u256: Storage { nonce: Some(2) } => Value

note: 
   ┌─ uniswap.fe:78:29
   │
78 │         self.total_supply = self.total_supply + value
   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
79 │         self.balances[to] = self.balances[to] + value
   │         ^^^^ UniswapV2Pair: Value

note: 
   ┌─ uniswap.fe:79:9
   │
79 │         self.balances[to] = self.balances[to] + value
   │         ^^^^^^^^^^^^^ ^^ address: Value
   │         │              
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ uniswap.fe:79:9
   │
79 │         self.balances[to] = self.balances[to] + value
   │         ^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
   │         │                    
   │         u256: Storage { nonce: None }

note: 
   ┌─ uniswap.fe:79:29
   │
79 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^ ^^ address: Value
   │                             │              
   │                             Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ uniswap.fe:79:29
   │
79 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                             │                    
   │                             u256: Storage { nonce: None } => Value

note: 
   ┌─ uniswap.fe:79:29
   │
79 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
80 │         emit Transfer(ctx, from: address(0), to, value)
   │                       ^^^                ^ u256: Value
   │                       │                   
   │                       Context: Memory

note: 
   ┌─ uniswap.fe:80:34
   │
80 │         emit Transfer(ctx, from: address(0), to, value)
   │                                  ^^^^^^^^^^  ^^  ^^^^^ u256: Value
   │                                  │           │    
   │                                  │           address: Value
   │                                  address: Value

note: 
   ┌─ uniswap.fe:80:9
   │
80 │         emit Transfer(ctx, from: address(0), to, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ uniswap.fe:82:5
   │  
82 │ ╭     fn _burn(self, ctx: Context, from: address, value: u256):
83 │ │         self.balances[from] = self.balances[from] - value
84 │ │         self.total_supply = self.total_supply - value
85 │ │         emit Transfer(ctx, from, to: address(0), value)
   │ ╰───────────────────────────────────────────────────────^ attributes hash: 16245072311291560743
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 label: None,
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ uniswap.fe:83:9
   │
83 │         self.balances[from] = self.balances[from] - value
   │         ^^^^ UniswapV2Pair: Value

note: 
   ┌─ uniswap.fe:83:9
   │
83 │         self.balances[from] = self.balances[from] - value
   │         ^^^^^^^^^^^^^ ^^^^ address: Value
   │         │              
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ uniswap.fe:83:9
   │
83 │         self.balances[from] = self.balances[from] - value
   │         ^^^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
   │         │                      
   │         u256: Storage { nonce: None }

note: 
   ┌─ uniswap.fe:83:31
   │
83 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^ ^^^^ address: Value
   │                               │              
   │                               Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ uniswap.fe:83:31
   │
83 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                               │                      
   │                               u256: Storage { nonce: None } => Value

note: 
   ┌─ uniswap.fe:83:31
   │
83 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
84 │         self.total_supply = self.total_supply - value
   │         ^^^^ UniswapV2Pair: Value

note: 
   ┌─ uniswap.fe:84:9
   │
84 │         self.total_supply = self.total_supply - value
   │         ^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
   │         │                    
   │         u256: Storage { nonce: Some(2) }

note: 
   ┌─ uniswap.fe:84:29
   │
84 │         self.total_supply = self.total_supply - value
   │                             ^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                             │                    
   │                             u256: Storage { nonce: Some(2) } => Value

note: 
   ┌─ uniswap.fe:84:29
   │
84 │         self.total_supply = self.total_supply - value
   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
85 │         emit Transfer(ctx, from, to: address(0), value)
   │                       ^^^  ^^^^              ^ u256: Value
   │                       │    │                  
   │                       │    address: Value
   │                       Context: Memory

note: 
   ┌─ uniswap.fe:85:38
   │
85 │         emit Transfer(ctx, from, to: address(0), value)
   │                                      ^^^^^^^^^^  ^^^^^ u256: Value
   │                                      │            
   │                                      address: Value

note: 
   ┌─ uniswap.fe:85:9
   │
85 │         emit Transfer(ctx, from, to: address(0), value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ uniswap.fe:88:5
   │  
88 │ ╭     fn _approve(self, ctx: Context, owner: address, spender: address, value: u256):
89 │ │         self.allowances[owner][spender] = value
90 │ │         emit Approval(ctx, owner, spender, value)
   │ ╰─────────────────────────────────────────────────^ attributes hash: 1630416716014819616
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 label: None,
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "owner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ uniswap.fe:89:9
   │
89 │         self.allowances[owner][spender] = value
   │         ^^^^ UniswapV2Pair: Value

note: 
   ┌─ uniswap.fe:89:9
   │
89 │         self.allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^ ^^^^^ address: Value
   │         │                
   │         Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
   ┌─ uniswap.fe:89:9
   │
89 │         self.allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address: Value
   │         │                       
   │         Map<address, u256>: Storage { nonce: None }

note: 
   ┌─ uniswap.fe:89:9
   │
89 │         self.allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │         │                                  
   │         u256: Storage { nonce: None }
90 │         emit Approval(ctx, owner, spender, value)
   │                       ^^^  ^^^^^  ^^^^^^^  ^^^^^ u256: Value
   │                       │    │      │         
   │                       │    │      address: Value
   │                       │    address: Value
   │                       Context: Memory

note: 
   ┌─ uniswap.fe:90:9
   │
90 │         emit Approval(ctx, owner, spender, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 8893313742751514912
   │
   = Event {
         name: "Approval",
         fields: [
             EventField {
                 name: "owner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ uniswap.fe:93:5
   │  
93 │ ╭     fn _transfer(self, ctx: Context, from: address, to: address, value: u256):
94 │ │         self.balances[from] = self.balances[from] - value
95 │ │         self.balances[to] = self.balances[to] + value
96 │ │         emit Transfer(ctx, from, to, value)
   │ ╰───────────────────────────────────────────^ attributes hash: 1442617122763943794
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         ctx_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 label: None,
                 name: "ctx",
                 typ: Ok(
                     Struct(
                         Struct {
                             name: "Context",
                             field_count: 0,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 label: None,
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ uniswap.fe:94:9
   │
94 │         self.balances[from] = self.balances[from] - value
   │         ^^^^ UniswapV2Pair: Value

note: 
   ┌─ uniswap.fe:94:9
   │
94 │         self.balances[from] = self.balances[from] - value
   │         ^^^^^^^^^^^^^ ^^^^ address: Value
   │         │              
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ uniswap.fe:94:9
   │
94 │         self.balances[from] = self.balances[from] - value
   │         ^^^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
   │         │                      
   │         u256: Storage { nonce: None }

note: 
   ┌─ uniswap.fe:94:31
   │
94 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^ ^^^^ address: Value
   │                               │              
   │                               Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ uniswap.fe:94:31
   │
94 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                               │                      
   │                               u256: Storage { nonce: None } => Value

note: 
   ┌─ uniswap.fe:94:31
   │
94 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
95 │         self.balances[to] = self.balances[to] + value
   │         ^^^^ UniswapV2Pair: Value

note: 
   ┌─ uniswap.fe:95:9
   │
95 │         self.balances[to] = self.balances[to] + value
   │         ^^^^^^^^^^^^^ ^^ address: Value
   │         │              
   │         Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ uniswap.fe:95:9
   │
95 │         self.balances[to] = self.balances[to] + value
   │         ^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
   │         │                    
   │         u256: Storage { nonce: None }

note: 
   ┌─ uniswap.fe:95:29
   │
95 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^ ^^ address: Value
   │                             │              
   │                             Map<address, u256>: Storage { nonce: Some(0) }

note: 
   ┌─ uniswap.fe:95:29
   │
95 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
   │                             │                    
   │                             u256: Storage { nonce: None } => Value

note: 
   ┌─ uniswap.fe:95:29
   │
95 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
96 │         emit Transfer(ctx, from, to, value)
   │                       ^^^  ^^^^  ^^  ^^^^^ u256: Value
   │                       │    │     │    
   │                       │    │     address: Value
   │                       │    address: Value
   │                       Context: Memory

note: 
   ┌─ uniswap.fe:96:9
   │
96 │         emit Transfer(ctx, from, to, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
    ┌─ uniswap.fe:98:5
    │  
 98 │ ╭     pub fn approve(self, ctx: Context, spender: address, value: u256) -> bool:
 99 │ │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
100 │ │         return true
    │ ╰───────────────────^ attributes hash: 8309406699454253603
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "spender",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "value",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Bool,
              ),
          ),
      }

note: 
   ┌─ uniswap.fe:99:9
   │
99 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
   │         ^^^^          ^^^         ^^^ Context: Memory
   │         │             │            
   │         │             Context: Memory
   │         UniswapV2Pair: Value

note: 
   ┌─ uniswap.fe:99:35
   │
99 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
   │                                   ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^ u256: Value
   │                                   │                 │         
   │                                   │                 address: Value
   │                                   address: Value

note: 
    ┌─ uniswap.fe:99:9
    │
 99 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
100 │         return true
    │                ^^^^ bool: Value

note: 
    ┌─ uniswap.fe:102:5
    │  
102 │ ╭     pub fn transfer(self, ctx: Context, to: address, value: u256) -> bool:
103 │ │         self._transfer(ctx, from: ctx.msg_sender(), to, value)
104 │ │         return true
    │ ╰───────────────────^ attributes hash: 14718526948940966913
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "value",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Bool,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:103:9
    │
103 │         self._transfer(ctx, from: ctx.msg_sender(), to, value)
    │         ^^^^           ^^^        ^^^ Context: Memory
    │         │              │           
    │         │              Context: Memory
    │         UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:103:35
    │
103 │         self._transfer(ctx, from: ctx.msg_sender(), to, value)
    │                                   ^^^^^^^^^^^^^^^^  ^^  ^^^^^ u256: Value
    │                                   │                 │    
    │                                   │                 address: Value
    │                                   address: Value

note: 
    ┌─ uniswap.fe:103:9
    │
103 │         self._transfer(ctx, from: ctx.msg_sender(), to, value)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
104 │         return true
    │                ^^^^ bool: Value

note: 
    ┌─ uniswap.fe:106:5
    │  
106 │ ╭     pub fn transferFrom(self, ctx: Context, from: address, to: address, value: u256) -> bool:
107 │ │         assert self.allowances[from][ctx.msg_sender()] >= value
108 │ │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
109 │ │         self._transfer(ctx, from, to, value)
110 │ │         return true
    │ ╰───────────────────^ attributes hash: 3284161617958543499
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "from",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "value",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Bool,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:107:16
    │
107 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:107:16
    │
107 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                ^^^^^^^^^^^^^^^ ^^^^ address: Value
    │                │                
    │                Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
    ┌─ uniswap.fe:107:16
    │
107 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                ^^^^^^^^^^^^^^^^^^^^^ ^^^ Context: Memory
    │                │                      
    │                Map<address, u256>: Storage { nonce: None }

note: 
    ┌─ uniswap.fe:107:38
    │
107 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                                      ^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:107:16
    │
107 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^ u256: Value
    │                │                                           
    │                u256: Storage { nonce: None } => Value

note: 
    ┌─ uniswap.fe:107:16
    │
107 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
108 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │         ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:108:9
    │
108 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │         ^^^^^^^^^^^^^^^ ^^^^ address: Value
    │         │                
    │         Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
    ┌─ uniswap.fe:108:9
    │
108 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │         ^^^^^^^^^^^^^^^^^^^^^ ^^^ Context: Memory
    │         │                      
    │         Map<address, u256>: Storage { nonce: None }

note: 
    ┌─ uniswap.fe:108:31
    │
108 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                               ^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:108:9
    │
108 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
    │         │                                          
    │         u256: Storage { nonce: None }

note: 
    ┌─ uniswap.fe:108:51
    │
108 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                                                   ^^^^^^^^^^^^^^^ ^^^^ address: Value
    │                                                   │                
    │                                                   Map<address, Map<address, u256>>: Storage { nonce: Some(1) }

note: 
    ┌─ uniswap.fe:108:51
    │
108 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                                                   ^^^^^^^^^^^^^^^^^^^^^ ^^^ Context: Memory
    │                                                   │                      
    │                                                   Map<address, u256>: Storage { nonce: None }

note: 
    ┌─ uniswap.fe:108:73
    │
108 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                                                                         ^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:108:51
    │
108 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256: Value
    │                                                   │                                          
    │                                                   u256: Storage { nonce: None } => Value

note: 
    ┌─ uniswap.fe:108:51
    │
108 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
109 │         self._transfer(ctx, from, to, value)
    │         ^^^^           ^^^  ^^^^  ^^  ^^^^^ u256: Value
    │         │              │    │     │    
    │         │              │    │     address: Value
    │         │              │    address: Value
    │         │              Context: Memory
    │         UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:109:9
    │
109 │         self._transfer(ctx, from, to, value)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
110 │         return true
    │                ^^^^ bool: Value

note: 
    ┌─ uniswap.fe:112:5
    │  
112 │ ╭     pub fn balanceOf(self, _ account: address) -> u256:
113 │ │         return self.balances[account]
    │ ╰─────────────────────────────────────^ attributes hash: 5993653573135321647
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: None,
          params: [
              FunctionParam {
                  label: Some(
                      "_",
                  ),
                  name: "account",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:113:16
    │
113 │         return self.balances[account]
    │                ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:113:16
    │
113 │         return self.balances[account]
    │                ^^^^^^^^^^^^^ ^^^^^^^ address: Value
    │                │              
    │                Map<address, u256>: Storage { nonce: Some(0) }

note: 
    ┌─ uniswap.fe:113:16
    │
113 │         return self.balances[account]
    │                ^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Value

note: 
    ┌─ uniswap.fe:115:5
    │  
115 │ ╭     pub fn get_reserves(self) -> (u256, u256, u256):
116 │ │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │ ╰────────────────────────────────────────────────────────────────────────^ attributes hash: 3743538709625240197
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: None,
          params: [],
          return_type: Ok(
              Tuple(
                  Tuple {
                      items: [
                          Base(
                              Numeric(
                                  U256,
                              ),
                          ),
                          Base(
                              Numeric(
                                  U256,
                              ),
                          ),
                          Base(
                              Numeric(
                                  U256,
                              ),
                          ),
                      ],
                  },
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:116:17
    │
116 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                 ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:116:17
    │
116 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                 ^^^^^^^^^^^^^  ^^^^ UniswapV2Pair: Value
    │                 │               
    │                 u256: Storage { nonce: Some(7) } => Value

note: 
    ┌─ uniswap.fe:116:32
    │
116 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                                ^^^^^^^^^^^^^  ^^^^ UniswapV2Pair: Value
    │                                │               
    │                                u256: Storage { nonce: Some(8) } => Value

note: 
    ┌─ uniswap.fe:116:47
    │
116 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(9) } => Value

note: 
    ┌─ uniswap.fe:116:16
    │
116 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, u256, u256): Memory

note: 
    ┌─ uniswap.fe:119:5
    │  
119 │ ╭     pub fn initialize(self, ctx: Context, token0: address, token1: address):
120 │ │         assert ctx.msg_sender() == self.factory, "UniswapV2: FORBIDDEN"
121 │ │         self.token0 = token0
122 │ │         self.token1 = token1
    │ ╰────────────────────────────^ attributes hash: 10460756106041683522
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "token0",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "token1",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:120:16
    │
120 │         assert ctx.msg_sender() == self.factory, "UniswapV2: FORBIDDEN"
    │                ^^^ Context: Memory

note: 
    ┌─ uniswap.fe:120:16
    │
120 │         assert ctx.msg_sender() == self.factory, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^    ^^^^ UniswapV2Pair: Value
    │                │                    
    │                address: Value

note: 
    ┌─ uniswap.fe:120:36
    │
120 │         assert ctx.msg_sender() == self.factory, "UniswapV2: FORBIDDEN"
    │                                    ^^^^^^^^^^^^ address: Storage { nonce: Some(4) } => Value

note: 
    ┌─ uniswap.fe:120:16
    │
120 │         assert ctx.msg_sender() == self.factory, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^ String<20>: Memory
    │                │                                  
    │                bool: Value
121 │         self.token0 = token0
    │         ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:121:9
    │
121 │         self.token0 = token0
    │         ^^^^^^^^^^^   ^^^^^^ address: Value
    │         │              
    │         address: Storage { nonce: Some(5) }
122 │         self.token1 = token1
    │         ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:122:9
    │
122 │         self.token1 = token1
    │         ^^^^^^^^^^^   ^^^^^^ address: Value
    │         │              
    │         address: Storage { nonce: Some(6) }

note: 
    ┌─ uniswap.fe:125:5
    │  
125 │ ╭     fn _update(self, ctx: Context, balance0: u256, balance1: u256, reserve0: u256, reserve1: u256):
126 │ │         # changed from u32s
127 │ │         let block_timestamp: u256 = ctx.block_timestamp() % 2**32
128 │ │         # TODO: reproduce desired overflow (https://github.com/ethereum/fe/issues/286)
    · │
137 │ │         self.block_timestamp_last = block_timestamp
138 │ │         emit Sync(ctx, reserve0: self.reserve0, reserve1: self.reserve1)
    │ ╰────────────────────────────────────────────────────────────────────────^ attributes hash: 14441581101409065213
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "balance0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "balance1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "reserve0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "reserve1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:127:30
    │
127 │         let block_timestamp: u256 = ctx.block_timestamp() % 2**32
    │                              ^^^^ u256
128 │         # TODO: reproduce desired overflow (https://github.com/ethereum/fe/issues/286)
129 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last # overflow is desired
    │                           ^^^^ u256

note: 
    ┌─ uniswap.fe:127:37
    │
127 │         let block_timestamp: u256 = ctx.block_timestamp() % 2**32
    │                                     ^^^ Context: Memory

note: 
    ┌─ uniswap.fe:127:37
    │
127 │         let block_timestamp: u256 = ctx.block_timestamp() % 2**32
    │                                     ^^^^^^^^^^^^^^^^^^^^^   ^  ^^ u256: Value
    │                                     │                       │   
    │                                     │                       u256: Value
    │                                     u256: Value

note: 
    ┌─ uniswap.fe:127:61
    │
127 │         let block_timestamp: u256 = ctx.block_timestamp() % 2**32
    │                                                             ^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:127:37
    │
127 │         let block_timestamp: u256 = ctx.block_timestamp() % 2**32
    │                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
128 │         # TODO: reproduce desired overflow (https://github.com/ethereum/fe/issues/286)
129 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last # overflow is desired
    │                                  ^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
    │                                  │                  
    │                                  u256: Value

note: 
    ┌─ uniswap.fe:129:52
    │
129 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last # overflow is desired
    │                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(9) } => Value

note: 
    ┌─ uniswap.fe:129:34
    │
129 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last # overflow is desired
    │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
130 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │            ^^^^^^^^^^^^   ^ u256: Value
    │            │               
    │            u256: Value

note: 
    ┌─ uniswap.fe:130:12
    │
130 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │            ^^^^^^^^^^^^^^^^     ^^^^^^^^    ^ u256: Value
    │            │                    │            
    │            │                    u256: Value
    │            bool: Value

note: 
    ┌─ uniswap.fe:130:33
    │
130 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │                                 ^^^^^^^^^^^^^ bool: Value

note: 
    ┌─ uniswap.fe:130:12
    │
130 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^    ^ u256: Value
    │            │                                      │            
    │            │                                      u256: Value
    │            bool: Value

note: 
    ┌─ uniswap.fe:130:51
    │
130 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │                                                   ^^^^^^^^^^^^^ bool: Value

note: 
    ┌─ uniswap.fe:130:12
    │
130 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
131 │             # `*` never overflows, and + overflow is desired
132 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │             ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:132:13
    │
132 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
    │             │                              
    │             u256: Storage { nonce: Some(10) }

note: 
    ┌─ uniswap.fe:132:43
    │
132 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^   ^^^^^^^^ u256: Value
    │                                           │                              │           
    │                                           │                              u256: Value
    │                                           u256: Storage { nonce: Some(10) } => Value

note: 
    ┌─ uniswap.fe:132:73
    │
132 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^ u256: Value
    │                                                                         │                        
    │                                                                         u256: Value

note: 
    ┌─ uniswap.fe:132:73
    │
132 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:132:43
    │
132 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
133 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │             ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:133:13
    │
133 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
    │             │                              
    │             u256: Storage { nonce: Some(11) }

note: 
    ┌─ uniswap.fe:133:43
    │
133 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^   ^^^^^^^^ u256: Value
    │                                           │                              │           
    │                                           │                              u256: Value
    │                                           u256: Storage { nonce: Some(11) } => Value

note: 
    ┌─ uniswap.fe:133:73
    │
133 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^ u256: Value
    │                                                                         │                        
    │                                                                         u256: Value

note: 
    ┌─ uniswap.fe:133:73
    │
133 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:133:43
    │
133 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
134 │ 
135 │         self.reserve0 = balance0
    │         ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:135:9
    │
135 │         self.reserve0 = balance0
    │         ^^^^^^^^^^^^^   ^^^^^^^^ u256: Value
    │         │                
    │         u256: Storage { nonce: Some(7) }
136 │         self.reserve1 = balance1
    │         ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:136:9
    │
136 │         self.reserve1 = balance1
    │         ^^^^^^^^^^^^^   ^^^^^^^^ u256: Value
    │         │                
    │         u256: Storage { nonce: Some(8) }
137 │         self.block_timestamp_last = block_timestamp
    │         ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:137:9
    │
137 │         self.block_timestamp_last = block_timestamp
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^ u256: Value
    │         │                            
    │         u256: Storage { nonce: Some(9) }
138 │         emit Sync(ctx, reserve0: self.reserve0, reserve1: self.reserve1)
    │                   ^^^            ^^^^ UniswapV2Pair: Value
    │                   │               
    │                   Context: Memory

note: 
    ┌─ uniswap.fe:138:34
    │
138 │         emit Sync(ctx, reserve0: self.reserve0, reserve1: self.reserve1)
    │                                  ^^^^^^^^^^^^^            ^^^^ UniswapV2Pair: Value
    │                                  │                         
    │                                  u256: Storage { nonce: Some(7) } => Value

note: 
    ┌─ uniswap.fe:138:59
    │
138 │         emit Sync(ctx, reserve0: self.reserve0, reserve1: self.reserve1)
    │                                                           ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Value

note: 
    ┌─ uniswap.fe:138:9
    │
138 │         emit Sync(ctx, reserve0: self.reserve0, reserve1: self.reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 11491202868117077488
    │
    = Event {
          name: "Sync",
          fields: [
              EventField {
                  name: "reserve0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "reserve1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
          ],
      }

note: 
    ┌─ uniswap.fe:141:5
    │  
141 │ ╭     fn _mint_fee(self, ctx: Context, reserve0: u256, reserve1: u256) -> bool:
142 │ │         let fee_to: address = UniswapV2Factory(ctx, self.factory).fee_to()
143 │ │         let fee_on: bool = fee_to != address(0)
144 │ │         let k_last: u256 = self.k_last # gas savings
    · │
157 │ │ 
158 │ │         return fee_on
    │ ╰─────────────────────^ attributes hash: 12335666382859496931
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "reserve0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "reserve1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Bool,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:142:21
    │
142 │         let fee_to: address = UniswapV2Factory(ctx, self.factory).fee_to()
    │                     ^^^^^^^ address
143 │         let fee_on: bool = fee_to != address(0)
    │                     ^^^^ bool
144 │         let k_last: u256 = self.k_last # gas savings
    │                     ^^^^ u256
    ·
147 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                             ^^^^ u256
148 │                 let root_k_last: u256 = sqrt(k_last)
    │                                  ^^^^ u256
149 │                 if root_k > root_k_last:
150 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                    ^^^^ u256
151 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                      ^^^^ u256
152 │                     let liquidity: u256 = numerator / denominator
    │                                    ^^^^ u256

note: 
    ┌─ uniswap.fe:142:48
    │
142 │         let fee_to: address = UniswapV2Factory(ctx, self.factory).fee_to()
    │                                                ^^^  ^^^^ UniswapV2Pair: Value
    │                                                │     
    │                                                Context: Memory

note: 
    ┌─ uniswap.fe:142:53
    │
142 │         let fee_to: address = UniswapV2Factory(ctx, self.factory).fee_to()
    │                                                     ^^^^^^^^^^^^ address: Storage { nonce: Some(4) } => Value

note: 
    ┌─ uniswap.fe:142:31
    │
142 │         let fee_to: address = UniswapV2Factory(ctx, self.factory).fee_to()
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UniswapV2Factory: Value

note: 
    ┌─ uniswap.fe:142:31
    │
142 │         let fee_to: address = UniswapV2Factory(ctx, self.factory).fee_to()
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ address: Value
143 │         let fee_on: bool = fee_to != address(0)
    │                            ^^^^^^            ^ u256: Value
    │                            │                  
    │                            address: Value

note: 
    ┌─ uniswap.fe:143:38
    │
143 │         let fee_on: bool = fee_to != address(0)
    │                                      ^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:143:28
    │
143 │         let fee_on: bool = fee_to != address(0)
    │                            ^^^^^^^^^^^^^^^^^^^^ bool: Value
144 │         let k_last: u256 = self.k_last # gas savings
    │                            ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:144:28
    │
144 │         let k_last: u256 = self.k_last # gas savings
    │                            ^^^^^^^^^^^ u256: Storage { nonce: Some(12) } => Value
145 │         if fee_on:
    │            ^^^^^^ bool: Value
146 │             if k_last != 0:
    │                ^^^^^^    ^ u256: Value
    │                │          
    │                u256: Value

note: 
    ┌─ uniswap.fe:146:16
    │
146 │             if k_last != 0:
    │                ^^^^^^^^^^^ bool: Value
147 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                                         ^^^^^^^^   ^^^^^^^^ u256: Value
    │                                         │           
    │                                         u256: Value

note: 
    ┌─ uniswap.fe:147:41
    │
147 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                                         ^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:147:36
    │
147 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
148 │                 let root_k_last: u256 = sqrt(k_last)
    │                                              ^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:148:41
    │
148 │                 let root_k_last: u256 = sqrt(k_last)
    │                                         ^^^^^^^^^^^^ u256: Value
149 │                 if root_k > root_k_last:
    │                    ^^^^^^   ^^^^^^^^^^^ u256: Value
    │                    │         
    │                    u256: Value

note: 
    ┌─ uniswap.fe:149:20
    │
149 │                 if root_k > root_k_last:
    │                    ^^^^^^^^^^^^^^^^^^^^ bool: Value
150 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                           ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:150:43
    │
150 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                           ^^^^^^^^^^^^^^^^^   ^^^^^^ u256: Value
    │                                           │                    
    │                                           u256: Storage { nonce: Some(2) } => Value

note: 
    ┌─ uniswap.fe:150:43
    │
150 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^ u256: Value
    │                                           │                             
    │                                           u256: Value

note: 
    ┌─ uniswap.fe:150:43
    │
150 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
151 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                             ^^^^^^   ^ u256: Value
    │                                             │         
    │                                             u256: Value

note: 
    ┌─ uniswap.fe:151:45
    │
151 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                             ^^^^^^^^^^   ^^^^^^^^^^^ u256: Value
    │                                             │             
    │                                             u256: Value

note: 
    ┌─ uniswap.fe:151:45
    │
151 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                             ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
152 │                     let liquidity: u256 = numerator / denominator
    │                                           ^^^^^^^^^   ^^^^^^^^^^^ u256: Value
    │                                           │            
    │                                           u256: Value

note: 
    ┌─ uniswap.fe:152:43
    │
152 │                     let liquidity: u256 = numerator / denominator
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
153 │                     if liquidity > 0:
    │                        ^^^^^^^^^   ^ u256: Value
    │                        │            
    │                        u256: Value

note: 
    ┌─ uniswap.fe:153:24
    │
153 │                     if liquidity > 0:
    │                        ^^^^^^^^^^^^^ bool: Value
154 │                         self._mint(ctx, to: fee_to, value: liquidity)
    │                         ^^^^       ^^^      ^^^^^^         ^^^^^^^^^ u256: Value
    │                         │          │        │               
    │                         │          │        address: Value
    │                         │          Context: Memory
    │                         UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:154:25
    │
154 │                         self._mint(ctx, to: fee_to, value: liquidity)
    │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
155 │         elif k_last != 0:
    │              ^^^^^^    ^ u256: Value
    │              │          
    │              u256: Value

note: 
    ┌─ uniswap.fe:155:14
    │
155 │         elif k_last != 0:
    │              ^^^^^^^^^^^ bool: Value
156 │             self.k_last = 0
    │             ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:156:13
    │
156 │             self.k_last = 0
    │             ^^^^^^^^^^^   ^ u256: Value
    │             │              
    │             u256: Storage { nonce: Some(12) }
157 │ 
158 │         return fee_on
    │                ^^^^^^ bool: Value

note: 
    ┌─ uniswap.fe:161:5
    │  
161 │ ╭     pub fn mint(self, ctx: Context, to: address) -> u256:
162 │ │         let MINIMUM_LIQUIDITY: u256 = 1000
163 │ │         let reserve0: u256 = self.reserve0
164 │ │         let reserve1: u256 = self.reserve1
    · │
187 │ │         emit Mint(ctx, sender: ctx.msg_sender(), amount0, amount1)
188 │ │         return liquidity
    │ ╰────────────────────────^ attributes hash: 11513995717553818344
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:162:32
    │
162 │         let MINIMUM_LIQUIDITY: u256 = 1000
    │                                ^^^^ u256
163 │         let reserve0: u256 = self.reserve0
    │                       ^^^^ u256
164 │         let reserve1: u256 = self.reserve1
    │                       ^^^^ u256
165 │         let balance0: u256 = ERC20(ctx, self.token0).balanceOf(ctx.self_address())
    │                       ^^^^ u256
166 │         let balance1: u256 = ERC20(ctx, self.token1).balanceOf(ctx.self_address())
    │                       ^^^^ u256
167 │         let amount0: u256 = balance0 - self.reserve0
    │                      ^^^^ u256
168 │         let amount1: u256 = balance1 - self.reserve1
    │                      ^^^^ u256
169 │ 
170 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │                     ^^^^ bool
171 │         let total_supply: u256 = self.total_supply # gas savings, must be defined here since totalSupply can update in _mintFee
    │                           ^^^^ u256
172 │         let liquidity: u256 = 0
    │                        ^^^^ u256

note: 
    ┌─ uniswap.fe:162:39
    │
162 │         let MINIMUM_LIQUIDITY: u256 = 1000
    │                                       ^^^^ u256: Value
163 │         let reserve0: u256 = self.reserve0
    │                              ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:163:30
    │
163 │         let reserve0: u256 = self.reserve0
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Value
164 │         let reserve1: u256 = self.reserve1
    │                              ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:164:30
    │
164 │         let reserve1: u256 = self.reserve1
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Value
165 │         let balance0: u256 = ERC20(ctx, self.token0).balanceOf(ctx.self_address())
    │                                    ^^^  ^^^^ UniswapV2Pair: Value
    │                                    │     
    │                                    Context: Memory

note: 
    ┌─ uniswap.fe:165:41
    │
165 │         let balance0: u256 = ERC20(ctx, self.token0).balanceOf(ctx.self_address())
    │                                         ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Value

note: 
    ┌─ uniswap.fe:165:30
    │
165 │         let balance0: u256 = ERC20(ctx, self.token0).balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^           ^^^ Context: Memory
    │                              │                                  
    │                              ERC20: Value

note: 
    ┌─ uniswap.fe:165:64
    │
165 │         let balance0: u256 = ERC20(ctx, self.token0).balanceOf(ctx.self_address())
    │                                                                ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:165:30
    │
165 │         let balance0: u256 = ERC20(ctx, self.token0).balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
166 │         let balance1: u256 = ERC20(ctx, self.token1).balanceOf(ctx.self_address())
    │                                    ^^^  ^^^^ UniswapV2Pair: Value
    │                                    │     
    │                                    Context: Memory

note: 
    ┌─ uniswap.fe:166:41
    │
166 │         let balance1: u256 = ERC20(ctx, self.token1).balanceOf(ctx.self_address())
    │                                         ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Value

note: 
    ┌─ uniswap.fe:166:30
    │
166 │         let balance1: u256 = ERC20(ctx, self.token1).balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^           ^^^ Context: Memory
    │                              │                                  
    │                              ERC20: Value

note: 
    ┌─ uniswap.fe:166:64
    │
166 │         let balance1: u256 = ERC20(ctx, self.token1).balanceOf(ctx.self_address())
    │                                                                ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:166:30
    │
166 │         let balance1: u256 = ERC20(ctx, self.token1).balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
167 │         let amount0: u256 = balance0 - self.reserve0
    │                             ^^^^^^^^   ^^^^ UniswapV2Pair: Value
    │                             │           
    │                             u256: Value

note: 
    ┌─ uniswap.fe:167:40
    │
167 │         let amount0: u256 = balance0 - self.reserve0
    │                                        ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Value

note: 
    ┌─ uniswap.fe:167:29
    │
167 │         let amount0: u256 = balance0 - self.reserve0
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
168 │         let amount1: u256 = balance1 - self.reserve1
    │                             ^^^^^^^^   ^^^^ UniswapV2Pair: Value
    │                             │           
    │                             u256: Value

note: 
    ┌─ uniswap.fe:168:40
    │
168 │         let amount1: u256 = balance1 - self.reserve1
    │                                        ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Value

note: 
    ┌─ uniswap.fe:168:29
    │
168 │         let amount1: u256 = balance1 - self.reserve1
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
169 │ 
170 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │                            ^^^^           ^^^  ^^^^^^^^  ^^^^^^^^ u256: Value
    │                            │              │    │          
    │                            │              │    u256: Value
    │                            │              Context: Memory
    │                            UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:170:28
    │
170 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
171 │         let total_supply: u256 = self.total_supply # gas savings, must be defined here since totalSupply can update in _mintFee
    │                                  ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:171:34
    │
171 │         let total_supply: u256 = self.total_supply # gas savings, must be defined here since totalSupply can update in _mintFee
    │                                  ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => Value
172 │         let liquidity: u256 = 0
    │                               ^ u256: Value
173 │         if total_supply == 0:
    │            ^^^^^^^^^^^^    ^ u256: Value
    │            │                
    │            u256: Value

note: 
    ┌─ uniswap.fe:173:12
    │
173 │         if total_supply == 0:
    │            ^^^^^^^^^^^^^^^^^ bool: Value
174 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │             ^^^^^^^^^        ^^^^^^^   ^^^^^^^ u256: Value
    │             │                │          
    │             │                u256: Value
    │             u256: Value

note: 
    ┌─ uniswap.fe:174:30
    │
174 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                              ^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:174:25
    │
174 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                         ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ u256: Value
    │                         │                          
    │                         u256: Value

note: 
    ┌─ uniswap.fe:174:25
    │
174 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
175 │             self._mint(ctx, to: address(0), value: MINIMUM_LIQUIDITY) # permanently lock the first MINIMUM_LIQUIDITY tokens
    │             ^^^^       ^^^              ^ u256: Value
    │             │          │                 
    │             │          Context: Memory
    │             UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:175:33
    │
175 │             self._mint(ctx, to: address(0), value: MINIMUM_LIQUIDITY) # permanently lock the first MINIMUM_LIQUIDITY tokens
    │                                 ^^^^^^^^^^         ^^^^^^^^^^^^^^^^^ u256: Value
    │                                 │                   
    │                                 address: Value

note: 
    ┌─ uniswap.fe:175:13
    │
175 │             self._mint(ctx, to: address(0), value: MINIMUM_LIQUIDITY) # permanently lock the first MINIMUM_LIQUIDITY tokens
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
176 │         else:
177 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │             ^^^^^^^^^        ^^^^^^^   ^^^^^^^^^^^^ u256: Value
    │             │                │          
    │             │                u256: Value
    │             u256: Value

note: 
    ┌─ uniswap.fe:177:29
    │
177 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^ u256: Value
    │                             │                           
    │                             u256: Value

note: 
    ┌─ uniswap.fe:177:29
    │
177 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^   ^^^^^^^^^^^^ u256: Value
    │                             │                                     │          
    │                             │                                     u256: Value
    │                             u256: Value

note: 
    ┌─ uniswap.fe:177:66
    │
177 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^ u256: Value
    │                                                                  │                           
    │                                                                  u256: Value

note: 
    ┌─ uniswap.fe:177:66
    │
177 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:177:25
    │
177 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
178 │ 
179 │         assert liquidity > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED"
    │                ^^^^^^^^^   ^ u256: Value
    │                │            
    │                u256: Value

note: 
    ┌─ uniswap.fe:179:16
    │
179 │         assert liquidity > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED"
    │                ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<40>: Memory
    │                │               
    │                bool: Value
180 │ 
181 │         self._mint(ctx, to, value: liquidity)
    │         ^^^^       ^^^  ^^         ^^^^^^^^^ u256: Value
    │         │          │    │           
    │         │          │    address: Value
    │         │          Context: Memory
    │         UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:181:9
    │
181 │         self._mint(ctx, to, value: liquidity)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
182 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^         ^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^ u256: Value
    │         │            │    │         │         │          
    │         │            │    │         │         u256: Value
    │         │            │    │         u256: Value
    │         │            │    u256: Value
    │         │            Context: Memory
    │         UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:182:9
    │
182 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
183 │ 
184 │         if fee_on:
    │            ^^^^^^ bool: Value
185 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │             ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:185:13
    │
185 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │             ^^^^^^^^^^^   ^^^^^^^^   ^^^^^^^^ u256: Value
    │             │             │           
    │             │             u256: Value
    │             u256: Storage { nonce: Some(12) }

note: 
    ┌─ uniswap.fe:185:27
    │
185 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │                           ^^^^^^^^^^^^^^^^^^^ u256: Value
186 │ 
187 │         emit Mint(ctx, sender: ctx.msg_sender(), amount0, amount1)
    │                   ^^^          ^^^ Context: Memory
    │                   │             
    │                   Context: Memory

note: 
    ┌─ uniswap.fe:187:32
    │
187 │         emit Mint(ctx, sender: ctx.msg_sender(), amount0, amount1)
    │                                ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^ u256: Value
    │                                │                 │         
    │                                │                 u256: Value
    │                                address: Value
188 │         return liquidity
    │                ^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:187:9
    │
187 │         emit Mint(ctx, sender: ctx.msg_sender(), amount0, amount1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 4243961805717991435
    │
    = Event {
          name: "Mint",
          fields: [
              EventField {
                  name: "sender",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
              EventField {
                  name: "amount0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "amount1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
          ],
      }

note: 
    ┌─ uniswap.fe:191:5
    │  
191 │ ╭     pub fn burn(self, ctx: Context, to: address) -> (u256, u256):
192 │ │         let reserve0: u256 = self.reserve0
193 │ │         let reserve1: u256 = self.reserve1
194 │ │         let token0: ERC20 = ERC20(ctx, self.token0)
    · │
216 │ │         emit Burn(ctx, sender: ctx.msg_sender(), amount0, amount1, to)
217 │ │         return (amount0, amount1)
    │ ╰─────────────────────────────────^ attributes hash: 4652297158603848356
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Tuple(
                  Tuple {
                      items: [
                          Base(
                              Numeric(
                                  U256,
                              ),
                          ),
                          Base(
                              Numeric(
                                  U256,
                              ),
                          ),
                      ],
                  },
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:192:23
    │
192 │         let reserve0: u256 = self.reserve0
    │                       ^^^^ u256
193 │         let reserve1: u256 = self.reserve1
    │                       ^^^^ u256
194 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                     ^^^^^ ERC20
195 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                     ^^^^^ ERC20
196 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │                       ^^^^ u256
197 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │                       ^^^^ u256
198 │         let liquidity: u256 = self.balances[ctx.self_address()]
    │                        ^^^^ u256
199 │ 
200 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │                     ^^^^ bool
201 │         let total_supply: u256 = self.total_supply # gas savings, must be defined here since total_supply can update in _mintFee
    │                           ^^^^ u256
202 │         let amount0: u256 = (liquidity * balance0) / total_supply # using balances ensures pro-rata distribution
    │                      ^^^^ u256
203 │         let amount1: u256 = (liquidity * balance1) / total_supply # using balances ensures pro-rata distribution
    │                      ^^^^ u256

note: 
    ┌─ uniswap.fe:192:30
    │
192 │         let reserve0: u256 = self.reserve0
    │                              ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:192:30
    │
192 │         let reserve0: u256 = self.reserve0
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Value
193 │         let reserve1: u256 = self.reserve1
    │                              ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:193:30
    │
193 │         let reserve1: u256 = self.reserve1
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Value
194 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                                   ^^^  ^^^^ UniswapV2Pair: Value
    │                                   │     
    │                                   Context: Memory

note: 
    ┌─ uniswap.fe:194:40
    │
194 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                                        ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Value

note: 
    ┌─ uniswap.fe:194:29
    │
194 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^ ERC20: Value
195 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                                   ^^^  ^^^^ UniswapV2Pair: Value
    │                                   │     
    │                                   Context: Memory

note: 
    ┌─ uniswap.fe:195:40
    │
195 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                                        ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Value

note: 
    ┌─ uniswap.fe:195:29
    │
195 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^ ERC20: Value
196 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │                              ^^^^^^           ^^^ Context: Memory
    │                              │                 
    │                              ERC20: Value

note: 
    ┌─ uniswap.fe:196:47
    │
196 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │                                               ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:196:30
    │
196 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
197 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │                              ^^^^^^           ^^^ Context: Memory
    │                              │                 
    │                              ERC20: Value

note: 
    ┌─ uniswap.fe:197:47
    │
197 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │                                               ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:197:30
    │
197 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
198 │         let liquidity: u256 = self.balances[ctx.self_address()]
    │                               ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:198:31
    │
198 │         let liquidity: u256 = self.balances[ctx.self_address()]
    │                               ^^^^^^^^^^^^^ ^^^ Context: Memory
    │                               │              
    │                               Map<address, u256>: Storage { nonce: Some(0) }

note: 
    ┌─ uniswap.fe:198:45
    │
198 │         let liquidity: u256 = self.balances[ctx.self_address()]
    │                                             ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:198:31
    │
198 │         let liquidity: u256 = self.balances[ctx.self_address()]
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Value
199 │ 
200 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │                            ^^^^           ^^^  ^^^^^^^^  ^^^^^^^^ u256: Value
    │                            │              │    │          
    │                            │              │    u256: Value
    │                            │              Context: Memory
    │                            UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:200:28
    │
200 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
201 │         let total_supply: u256 = self.total_supply # gas savings, must be defined here since total_supply can update in _mintFee
    │                                  ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:201:34
    │
201 │         let total_supply: u256 = self.total_supply # gas savings, must be defined here since total_supply can update in _mintFee
    │                                  ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => Value
202 │         let amount0: u256 = (liquidity * balance0) / total_supply # using balances ensures pro-rata distribution
    │                              ^^^^^^^^^   ^^^^^^^^ u256: Value
    │                              │            
    │                              u256: Value

note: 
    ┌─ uniswap.fe:202:29
    │
202 │         let amount0: u256 = (liquidity * balance0) / total_supply # using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^ u256: Value
    │                             │                         
    │                             u256: Value

note: 
    ┌─ uniswap.fe:202:29
    │
202 │         let amount0: u256 = (liquidity * balance0) / total_supply # using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
203 │         let amount1: u256 = (liquidity * balance1) / total_supply # using balances ensures pro-rata distribution
    │                              ^^^^^^^^^   ^^^^^^^^ u256: Value
    │                              │            
    │                              u256: Value

note: 
    ┌─ uniswap.fe:203:29
    │
203 │         let amount1: u256 = (liquidity * balance1) / total_supply # using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^ u256: Value
    │                             │                         
    │                             u256: Value

note: 
    ┌─ uniswap.fe:203:29
    │
203 │         let amount1: u256 = (liquidity * balance1) / total_supply # using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
204 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                ^^^^^^^   ^ u256: Value
    │                │          
    │                u256: Value

note: 
    ┌─ uniswap.fe:204:16
    │
204 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                ^^^^^^^^^^^     ^^^^^^^   ^ u256: Value
    │                │               │          
    │                │               u256: Value
    │                bool: Value

note: 
    ┌─ uniswap.fe:204:32
    │
204 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                                ^^^^^^^^^^^ bool: Value

note: 
    ┌─ uniswap.fe:204:16
    │
204 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<40>: Memory
    │                │                             
    │                bool: Value
205 │         self._burn(ctx, from: ctx.self_address(), value: liquidity)
    │         ^^^^       ^^^        ^^^ Context: Memory
    │         │          │           
    │         │          Context: Memory
    │         UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:205:31
    │
205 │         self._burn(ctx, from: ctx.self_address(), value: liquidity)
    │                               ^^^^^^^^^^^^^^^^^^         ^^^^^^^^^ u256: Value
    │                               │                           
    │                               address: Value

note: 
    ┌─ uniswap.fe:205:9
    │
205 │         self._burn(ctx, from: ctx.self_address(), value: liquidity)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
206 │         token0.transfer(to, amount0)
    │         ^^^^^^          ^^  ^^^^^^^ u256: Value
    │         │               │    
    │         │               address: Value
    │         ERC20: Value

note: 
    ┌─ uniswap.fe:206:9
    │
206 │         token0.transfer(to, amount0)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
207 │         token1.transfer(to, amount1)
    │         ^^^^^^          ^^  ^^^^^^^ u256: Value
    │         │               │    
    │         │               address: Value
    │         ERC20: Value

note: 
    ┌─ uniswap.fe:207:9
    │
207 │         token1.transfer(to, amount1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
208 │         balance0 = token0.balanceOf(ctx.self_address())
    │         ^^^^^^^^   ^^^^^^           ^^^ Context: Memory
    │         │          │                 
    │         │          ERC20: Value
    │         u256: Value

note: 
    ┌─ uniswap.fe:208:37
    │
208 │         balance0 = token0.balanceOf(ctx.self_address())
    │                                     ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:208:20
    │
208 │         balance0 = token0.balanceOf(ctx.self_address())
    │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
209 │         balance1 = token1.balanceOf(ctx.self_address())
    │         ^^^^^^^^   ^^^^^^           ^^^ Context: Memory
    │         │          │                 
    │         │          ERC20: Value
    │         u256: Value

note: 
    ┌─ uniswap.fe:209:37
    │
209 │         balance1 = token1.balanceOf(ctx.self_address())
    │                                     ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:209:20
    │
209 │         balance1 = token1.balanceOf(ctx.self_address())
    │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
210 │ 
211 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^         ^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^ u256: Value
    │         │            │    │         │         │          
    │         │            │    │         │         u256: Value
    │         │            │    │         u256: Value
    │         │            │    u256: Value
    │         │            Context: Memory
    │         UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:211:9
    │
211 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
212 │ 
213 │         if fee_on:
    │            ^^^^^^ bool: Value
214 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │             ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:214:13
    │
214 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │             ^^^^^^^^^^^   ^^^^^^^^   ^^^^^^^^ u256: Value
    │             │             │           
    │             │             u256: Value
    │             u256: Storage { nonce: Some(12) }

note: 
    ┌─ uniswap.fe:214:27
    │
214 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │                           ^^^^^^^^^^^^^^^^^^^ u256: Value
215 │ 
216 │         emit Burn(ctx, sender: ctx.msg_sender(), amount0, amount1, to)
    │                   ^^^          ^^^ Context: Memory
    │                   │             
    │                   Context: Memory

note: 
    ┌─ uniswap.fe:216:32
    │
216 │         emit Burn(ctx, sender: ctx.msg_sender(), amount0, amount1, to)
    │                                ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^  ^^ address: Value
    │                                │                 │        │         
    │                                │                 │        u256: Value
    │                                │                 u256: Value
    │                                address: Value
217 │         return (amount0, amount1)
    │                 ^^^^^^^  ^^^^^^^ u256: Value
    │                 │         
    │                 u256: Value

note: 
    ┌─ uniswap.fe:217:16
    │
217 │         return (amount0, amount1)
    │                ^^^^^^^^^^^^^^^^^^ (u256, u256): Memory

note: 
    ┌─ uniswap.fe:216:9
    │
216 │         emit Burn(ctx, sender: ctx.msg_sender(), amount0, amount1, to)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 10738919684795162003
    │
    = Event {
          name: "Burn",
          fields: [
              EventField {
                  name: "sender",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
              EventField {
                  name: "amount0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "amount1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
          ],
      }

note: 
    ┌─ uniswap.fe:222:5
    │  
222 │ ╭     pub fn swap(self, ctx: Context, amount0_out: u256, amount1_out: u256, to: address):
223 │ │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
224 │ │         let reserve0: u256 = self.reserve0
225 │ │         let reserve1: u256 = self.reserve1
    · │
255 │ │         self._update(ctx, balance0, balance1, reserve0, reserve1)
256 │ │         emit Swap(ctx, sender: ctx.msg_sender(), amount0_in, amount1_in, amount0_out, amount1_out, to)
    │ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────^ attributes hash: 18411078236281700131
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "amount0_out",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "amount1_out",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:224:23
    │
224 │         let reserve0: u256 = self.reserve0
    │                       ^^^^ u256
225 │         let reserve1: u256 = self.reserve1
    │                       ^^^^ u256
    ·
228 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                     ^^^^^ ERC20
229 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                     ^^^^^ ERC20
    ·
242 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │                       ^^^^ u256
243 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │                       ^^^^ u256
244 │ 
245 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                         ^^^^ u256
246 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                         ^^^^ u256
    ·
250 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                ^^^^ u256
251 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                ^^^^ u256

note: 
    ┌─ uniswap.fe:223:16
    │
223 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                ^^^^^^^^^^^   ^ u256: Value
    │                │              
    │                u256: Value

note: 
    ┌─ uniswap.fe:223:16
    │
223 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^^    ^^^^^^^^^^^   ^ u256: Value
    │                │                  │              
    │                │                  u256: Value
    │                bool: Value

note: 
    ┌─ uniswap.fe:223:35
    │
223 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                                   ^^^^^^^^^^^^^^^ bool: Value

note: 
    ┌─ uniswap.fe:223:16
    │
223 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<37>: Memory
    │                │                                    
    │                bool: Value
224 │         let reserve0: u256 = self.reserve0
    │                              ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:224:30
    │
224 │         let reserve0: u256 = self.reserve0
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Value
225 │         let reserve1: u256 = self.reserve1
    │                              ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:225:30
    │
225 │         let reserve1: u256 = self.reserve1
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Value
226 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                ^^^^^^^^^^^   ^^^^^^^^ u256: Value
    │                │              
    │                u256: Value

note: 
    ┌─ uniswap.fe:226:16
    │
226 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                ^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^   ^^^^^^^^ u256: Value
    │                │                          │              
    │                │                          u256: Value
    │                bool: Value

note: 
    ┌─ uniswap.fe:226:43
    │
226 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                                           ^^^^^^^^^^^^^^^^^^^^^^ bool: Value

note: 
    ┌─ uniswap.fe:226:16
    │
226 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<33>: Memory
    │                │                                                   
    │                bool: Value
227 │ 
228 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                                   ^^^  ^^^^ UniswapV2Pair: Value
    │                                   │     
    │                                   Context: Memory

note: 
    ┌─ uniswap.fe:228:40
    │
228 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                                        ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Value

note: 
    ┌─ uniswap.fe:228:29
    │
228 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^ ERC20: Value
229 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                                   ^^^  ^^^^ UniswapV2Pair: Value
    │                                   │     
    │                                   Context: Memory

note: 
    ┌─ uniswap.fe:229:40
    │
229 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                                        ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Value

note: 
    ┌─ uniswap.fe:229:29
    │
229 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^ ERC20: Value
    ·
232 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                ^^            ^^^^^^ ERC20: Value
    │                │              
    │                address: Value

note: 
    ┌─ uniswap.fe:232:22
    │
232 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                      ^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:232:16
    │
232 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                ^^^^^^^^^^^^^^^^^^^^^     ^^            ^^^^^^ ERC20: Value
    │                │                         │              
    │                │                         address: Value
    │                bool: Value

note: 
    ┌─ uniswap.fe:232:48
    │
232 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                                                ^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:232:42
    │
232 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                                          ^^^^^^^^^^^^^^^^^^^^^ bool: Value

note: 
    ┌─ uniswap.fe:232:16
    │
232 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^ String<21>: Memory
    │                │                                                 
    │                bool: Value
233 │ 
234 │         if amount0_out > 0:
    │            ^^^^^^^^^^^   ^ u256: Value
    │            │              
    │            u256: Value

note: 
    ┌─ uniswap.fe:234:12
    │
234 │         if amount0_out > 0:
    │            ^^^^^^^^^^^^^^^ bool: Value
235 │             token0.transfer(to, amount0_out) # optimistically transfer tokens
    │             ^^^^^^          ^^  ^^^^^^^^^^^ u256: Value
    │             │               │    
    │             │               address: Value
    │             ERC20: Value

note: 
    ┌─ uniswap.fe:235:13
    │
235 │             token0.transfer(to, amount0_out) # optimistically transfer tokens
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
236 │         if amount1_out > 0:
    │            ^^^^^^^^^^^   ^ u256: Value
    │            │              
    │            u256: Value

note: 
    ┌─ uniswap.fe:236:12
    │
236 │         if amount1_out > 0:
    │            ^^^^^^^^^^^^^^^ bool: Value
237 │             token1.transfer(to, amount1_out) # optimistically transfer tokens
    │             ^^^^^^          ^^  ^^^^^^^^^^^ u256: Value
    │             │               │    
    │             │               address: Value
    │             ERC20: Value

note: 
    ┌─ uniswap.fe:237:13
    │
237 │             token1.transfer(to, amount1_out) # optimistically transfer tokens
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
    ·
242 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │                              ^^^^^^           ^^^ Context: Memory
    │                              │                 
    │                              ERC20: Value

note: 
    ┌─ uniswap.fe:242:47
    │
242 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │                                               ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:242:30
    │
242 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
243 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │                              ^^^^^^           ^^^ Context: Memory
    │                              │                 
    │                              ERC20: Value

note: 
    ┌─ uniswap.fe:243:47
    │
243 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │                                               ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:243:30
    │
243 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
244 │ 
245 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                                                       ^^^^^^^^   ^^^^^^^^   ^^^^^^^^^^^ u256: Value
    │                                                                       │          │           
    │                                                                       │          u256: Value
    │                                                                       u256: Value

note: 
    ┌─ uniswap.fe:245:82
    │
245 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                                                                  ^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:245:32
    │
245 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                ^^^^^^^^                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
    │                                │                                       
    │                                u256: Value

note: 
    ┌─ uniswap.fe:245:44
    │
245 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                            ^^^^^^^^   ^^^^^^^^^^^ u256: Value
    │                                            │           
    │                                            u256: Value

note: 
    ┌─ uniswap.fe:245:43
    │
245 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:245:32
    │
245 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                           ^ u256: Value
    │                                │                                                                              
    │                                u256: Value

note: 
    ┌─ uniswap.fe:245:32
    │
245 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
246 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                                                       ^^^^^^^^   ^^^^^^^^   ^^^^^^^^^^^ u256: Value
    │                                                                       │          │           
    │                                                                       │          u256: Value
    │                                                                       u256: Value

note: 
    ┌─ uniswap.fe:246:82
    │
246 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                                                                  ^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:246:32
    │
246 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                ^^^^^^^^                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
    │                                │                                       
    │                                u256: Value

note: 
    ┌─ uniswap.fe:246:44
    │
246 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                            ^^^^^^^^   ^^^^^^^^^^^ u256: Value
    │                                            │           
    │                                            u256: Value

note: 
    ┌─ uniswap.fe:246:43
    │
246 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:246:32
    │
246 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                           ^ u256: Value
    │                                │                                                                              
    │                                u256: Value

note: 
    ┌─ uniswap.fe:246:32
    │
246 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
247 │ 
248 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                ^^^^^^^^^^   ^ u256: Value
    │                │             
    │                u256: Value

note: 
    ┌─ uniswap.fe:248:16
    │
248 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^    ^^^^^^^^^^   ^ u256: Value
    │                │                 │             
    │                │                 u256: Value
    │                bool: Value

note: 
    ┌─ uniswap.fe:248:34
    │
248 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                                  ^^^^^^^^^^^^^^ bool: Value

note: 
    ┌─ uniswap.fe:248:16
    │
248 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<36>: Memory
    │                │                                  
    │                bool: Value
249 │ 
250 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                       ^^^^^^^^   ^^^^ u256: Value
    │                                       │           
    │                                       u256: Value

note: 
    ┌─ uniswap.fe:250:39
    │
250 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                       ^^^^^^^^^^^^^^^   ^^^^^^^^^^   ^ u256: Value
    │                                       │                 │             
    │                                       │                 u256: Value
    │                                       u256: Value

note: 
    ┌─ uniswap.fe:250:57
    │
250 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                                         ^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:250:39
    │
250 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
251 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                       ^^^^^^^^   ^^^^ u256: Value
    │                                       │           
    │                                       u256: Value

note: 
    ┌─ uniswap.fe:251:39
    │
251 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                       ^^^^^^^^^^^^^^^   ^^^^^^^^^^   ^ u256: Value
    │                                       │                 │             
    │                                       │                 u256: Value
    │                                       u256: Value

note: 
    ┌─ uniswap.fe:251:57
    │
251 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                                         ^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:251:39
    │
251 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
252 │ 
253 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ u256: Value
    │                │                    
    │                u256: Value

note: 
    ┌─ uniswap.fe:253:16
    │
253 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^   ^^^^^^^^ u256: Value
    │                │                                        │           
    │                │                                        u256: Value
    │                u256: Value

note: 
    ┌─ uniswap.fe:253:57
    │
253 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                                                         ^^^^^^^^^^^^^^^^^^^   ^^^^^^^ u256: Value
    │                                                         │                      
    │                                                         u256: Value

note: 
    ┌─ uniswap.fe:253:57
    │
253 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:253:16
    │
253 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ String<12>: Memory
    │                │                                                                        
    │                bool: Value
254 │ 
255 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^         ^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^ u256: Value
    │         │            │    │         │         │          
    │         │            │    │         │         u256: Value
    │         │            │    │         u256: Value
    │         │            │    u256: Value
    │         │            Context: Memory
    │         UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:255:9
    │
255 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
256 │         emit Swap(ctx, sender: ctx.msg_sender(), amount0_in, amount1_in, amount0_out, amount1_out, to)
    │                   ^^^          ^^^ Context: Memory
    │                   │             
    │                   Context: Memory

note: 
    ┌─ uniswap.fe:256:32
    │
256 │         emit Swap(ctx, sender: ctx.msg_sender(), amount0_in, amount1_in, amount0_out, amount1_out, to)
    │                                ^^^^^^^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^  ^^ address: Value
    │                                │                 │           │           │            │             
    │                                │                 │           │           │            u256: Value
    │                                │                 │           │           u256: Value
    │                                │                 │           u256: Value
    │                                │                 u256: Value
    │                                address: Value

note: 
    ┌─ uniswap.fe:256:9
    │
256 │         emit Swap(ctx, sender: ctx.msg_sender(), amount0_in, amount1_in, amount0_out, amount1_out, to)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 16055667627771619025
    │
    = Event {
          name: "Swap",
          fields: [
              EventField {
                  name: "sender",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
              EventField {
                  name: "amount0_in",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "amount1_in",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "amount0_out",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "amount1_out",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
          ],
      }

note: 
    ┌─ uniswap.fe:259:5
    │  
259 │ ╭     pub fn skim(self, ctx: Context, to: address):
260 │ │         let token0: ERC20 = ERC20(ctx, self.token0) # gas savings
261 │ │         let token1: ERC20 = ERC20(ctx, self.token1) # gas savings
262 │ │ 
263 │ │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
264 │ │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │ ╰─────────────────────────────────────────────────────────────────────────────────^ attributes hash: 9469713119497359790
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:260:21
    │
260 │         let token0: ERC20 = ERC20(ctx, self.token0) # gas savings
    │                     ^^^^^ ERC20
261 │         let token1: ERC20 = ERC20(ctx, self.token1) # gas savings
    │                     ^^^^^ ERC20

note: 
    ┌─ uniswap.fe:260:35
    │
260 │         let token0: ERC20 = ERC20(ctx, self.token0) # gas savings
    │                                   ^^^  ^^^^ UniswapV2Pair: Value
    │                                   │     
    │                                   Context: Memory

note: 
    ┌─ uniswap.fe:260:40
    │
260 │         let token0: ERC20 = ERC20(ctx, self.token0) # gas savings
    │                                        ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Value

note: 
    ┌─ uniswap.fe:260:29
    │
260 │         let token0: ERC20 = ERC20(ctx, self.token0) # gas savings
    │                             ^^^^^^^^^^^^^^^^^^^^^^^ ERC20: Value
261 │         let token1: ERC20 = ERC20(ctx, self.token1) # gas savings
    │                                   ^^^  ^^^^ UniswapV2Pair: Value
    │                                   │     
    │                                   Context: Memory

note: 
    ┌─ uniswap.fe:261:40
    │
261 │         let token1: ERC20 = ERC20(ctx, self.token1) # gas savings
    │                                        ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Value

note: 
    ┌─ uniswap.fe:261:29
    │
261 │         let token1: ERC20 = ERC20(ctx, self.token1) # gas savings
    │                             ^^^^^^^^^^^^^^^^^^^^^^^ ERC20: Value
262 │ 
263 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │         ^^^^^^          ^^  ^^^^^^           ^^^ Context: Memory
    │         │               │   │                 
    │         │               │   ERC20: Value
    │         │               address: Value
    │         ERC20: Value

note: 
    ┌─ uniswap.fe:263:46
    │
263 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │                                              ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:263:29
    │
263 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
    │                             │                                       
    │                             u256: Value

note: 
    ┌─ uniswap.fe:263:68
    │
263 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │                                                                    ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Value

note: 
    ┌─ uniswap.fe:263:29
    │
263 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:263:9
    │
263 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
264 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │         ^^^^^^          ^^  ^^^^^^           ^^^ Context: Memory
    │         │               │   │                 
    │         │               │   ERC20: Value
    │         │               address: Value
    │         ERC20: Value

note: 
    ┌─ uniswap.fe:264:46
    │
264 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │                                              ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:264:29
    │
264 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair: Value
    │                             │                                       
    │                             u256: Value

note: 
    ┌─ uniswap.fe:264:68
    │
264 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │                                                                    ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Value

note: 
    ┌─ uniswap.fe:264:29
    │
264 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ uniswap.fe:264:9
    │
264 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value

note: 
    ┌─ uniswap.fe:267:5
    │  
267 │ ╭     pub fn sync(self, ctx: Context):
268 │ │         let token0: ERC20 = ERC20(ctx, self.token0)
269 │ │         let token1: ERC20 = ERC20(ctx, self.token1)
270 │ │         self._update(ctx,
    · │
273 │ │                      reserve0: self.reserve0,
274 │ │                      reserve1: self.reserve1)
    │ ╰─────────────────────────────────────────────^ attributes hash: 1731341862738941170
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:268:21
    │
268 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                     ^^^^^ ERC20
269 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                     ^^^^^ ERC20

note: 
    ┌─ uniswap.fe:268:35
    │
268 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                                   ^^^  ^^^^ UniswapV2Pair: Value
    │                                   │     
    │                                   Context: Memory

note: 
    ┌─ uniswap.fe:268:40
    │
268 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                                        ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Value

note: 
    ┌─ uniswap.fe:268:29
    │
268 │         let token0: ERC20 = ERC20(ctx, self.token0)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^ ERC20: Value
269 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                                   ^^^  ^^^^ UniswapV2Pair: Value
    │                                   │     
    │                                   Context: Memory

note: 
    ┌─ uniswap.fe:269:40
    │
269 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                                        ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Value

note: 
    ┌─ uniswap.fe:269:29
    │
269 │         let token1: ERC20 = ERC20(ctx, self.token1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^ ERC20: Value
270 │         self._update(ctx,
    │         ^^^^         ^^^ Context: Memory
    │         │             
    │         UniswapV2Pair: Value
271 │                      balance0: token0.balanceOf(ctx.self_address()),
    │                                ^^^^^^           ^^^ Context: Memory
    │                                │                 
    │                                ERC20: Value

note: 
    ┌─ uniswap.fe:271:49
    │
271 │                      balance0: token0.balanceOf(ctx.self_address()),
    │                                                 ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:271:32
    │
271 │                      balance0: token0.balanceOf(ctx.self_address()),
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
272 │                      balance1: token1.balanceOf(ctx.self_address()),
    │                                ^^^^^^           ^^^ Context: Memory
    │                                │                 
    │                                ERC20: Value

note: 
    ┌─ uniswap.fe:272:49
    │
272 │                      balance1: token1.balanceOf(ctx.self_address()),
    │                                                 ^^^^^^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:272:32
    │
272 │                      balance1: token1.balanceOf(ctx.self_address()),
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
273 │                      reserve0: self.reserve0,
    │                                ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:273:32
    │
273 │                      reserve0: self.reserve0,
    │                                ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Value
274 │                      reserve1: self.reserve1)
    │                                ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:274:32
    │
274 │                      reserve1: self.reserve1)
    │                                ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Value

note: 
    ┌─ uniswap.fe:270:9
    │  
270 │ ╭         self._update(ctx,
271 │ │                      balance0: token0.balanceOf(ctx.self_address()),
272 │ │                      balance1: token1.balanceOf(ctx.self_address()),
273 │ │                      reserve0: self.reserve0,
274 │ │                      reserve1: self.reserve1)
    │ ╰─────────────────────────────────────────────^ (): Value

note: 
    ┌─ uniswap.fe:277:5
    │
277 │     fee_to: address
    │     ^^^^^^^^^^^^^^^ address
278 │     fee_to_setter: address
    │     ^^^^^^^^^^^^^^^^^^^^^^ address
279 │ 
280 │     pairs: Map<address, Map<address, address>>
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, address>>
281 │ 
282 │     all_pairs: Array<address, 100>
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 100>
283 │     pair_counter: u256
    │     ^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:286:9
    │
286 │         idx token0: address
    │         ^^^^^^^^^^^^^^^^^^^ address
287 │         idx token1: address
    │         ^^^^^^^^^^^^^^^^^^^ address
288 │         pair: address
    │         ^^^^^^^^^^^^^ address
289 │         index: u256
    │         ^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:294:5
    │  
294 │ ╭     pub fn fee_to(self) -> address:
295 │ │         return self.fee_to
    │ ╰──────────────────────────^ attributes hash: 227275695522088782
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: None,
          params: [],
          return_type: Ok(
              Base(
                  Address,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:295:16
    │
295 │         return self.fee_to
    │                ^^^^ UniswapV2Factory: Value

note: 
    ┌─ uniswap.fe:295:16
    │
295 │         return self.fee_to
    │                ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => Value

note: 
    ┌─ uniswap.fe:297:5
    │  
297 │ ╭     pub fn fee_to_setter(self) -> address:
298 │ │         return self.fee_to_setter
    │ ╰─────────────────────────────────^ attributes hash: 227275695522088782
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: None,
          params: [],
          return_type: Ok(
              Base(
                  Address,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:298:16
    │
298 │         return self.fee_to_setter
    │                ^^^^ UniswapV2Factory: Value

note: 
    ┌─ uniswap.fe:298:16
    │
298 │         return self.fee_to_setter
    │                ^^^^^^^^^^^^^^^^^^ address: Storage { nonce: Some(1) } => Value

note: 
    ┌─ uniswap.fe:300:5
    │  
300 │ ╭     pub fn all_pairs_length(self) -> u256:
301 │ │         return self.pair_counter
    │ ╰────────────────────────────────^ attributes hash: 11773348765973600208
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: None,
          params: [],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:301:16
    │
301 │         return self.pair_counter
    │                ^^^^ UniswapV2Factory: Value

note: 
    ┌─ uniswap.fe:301:16
    │
301 │         return self.pair_counter
    │                ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(4) } => Value

note: 
    ┌─ uniswap.fe:303:5
    │  
303 │ ╭     pub fn create_pair(self, ctx: Context, _ token_a: address, _ token_b: address) -> address:
304 │ │         assert token_a != token_b, "UniswapV2: IDENTICAL_ADDRESSES"
305 │ │ 
306 │ │         let token0: address = token_a if token_a < token_b else token_b
    · │
320 │ │         emit PairCreated(ctx, token0, token1, pair: address(pair), index: self.pair_counter)
321 │ │         return address(pair)
    │ ╰────────────────────────────^ attributes hash: 8455575078477255668
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: Some(
                      "_",
                  ),
                  name: "token_a",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
              FunctionParam {
                  label: Some(
                      "_",
                  ),
                  name: "token_b",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Address,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:306:21
    │
306 │         let token0: address = token_a if token_a < token_b else token_b
    │                     ^^^^^^^ address
307 │         let token1: address = token_a if token_a > token_b else token_b
    │                     ^^^^^^^ address
    ·
311 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                   ^^^^ u256
312 │         let pair: UniswapV2Pair = UniswapV2Pair.create2(ctx, 0, salt)
    │                   ^^^^^^^^^^^^^ UniswapV2Pair

note: 
    ┌─ uniswap.fe:304:16
    │
304 │         assert token_a != token_b, "UniswapV2: IDENTICAL_ADDRESSES"
    │                ^^^^^^^    ^^^^^^^ address: Value
    │                │           
    │                address: Value

note: 
    ┌─ uniswap.fe:304:16
    │
304 │         assert token_a != token_b, "UniswapV2: IDENTICAL_ADDRESSES"
    │                ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<30>: Memory
    │                │                    
    │                bool: Value
305 │ 
306 │         let token0: address = token_a if token_a < token_b else token_b
    │                                          ^^^^^^^   ^^^^^^^ address: Value
    │                                          │          
    │                                          address: Value

note: 
    ┌─ uniswap.fe:306:31
    │
306 │         let token0: address = token_a if token_a < token_b else token_b
    │                               ^^^^^^^    ^^^^^^^^^^^^^^^^^      ^^^^^^^ address: Value
    │                               │          │                       
    │                               │          bool: Value
    │                               address: Value

note: 
    ┌─ uniswap.fe:306:31
    │
306 │         let token0: address = token_a if token_a < token_b else token_b
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ address: Value
307 │         let token1: address = token_a if token_a > token_b else token_b
    │                                          ^^^^^^^   ^^^^^^^ address: Value
    │                                          │          
    │                                          address: Value

note: 
    ┌─ uniswap.fe:307:31
    │
307 │         let token1: address = token_a if token_a > token_b else token_b
    │                               ^^^^^^^    ^^^^^^^^^^^^^^^^^      ^^^^^^^ address: Value
    │                               │          │                       
    │                               │          bool: Value
    │                               address: Value

note: 
    ┌─ uniswap.fe:307:31
    │
307 │         let token1: address = token_a if token_a > token_b else token_b
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ address: Value
308 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                ^^^^^^            ^ u256: Value
    │                │                  
    │                address: Value

note: 
    ┌─ uniswap.fe:308:26
    │
308 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                          ^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:308:16
    │
308 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^ String<23>: Memory
    │                │                      
    │                bool: Value
309 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^ UniswapV2Factory: Value

note: 
    ┌─ uniswap.fe:309:16
    │
309 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^ ^^^^^^ address: Value
    │                │           
    │                Map<address, Map<address, address>>: Storage { nonce: Some(2) }

note: 
    ┌─ uniswap.fe:309:16
    │
309 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^^^^^^^^^ ^^^^^^ address: Value
    │                │                   
    │                Map<address, address>: Storage { nonce: None }

note: 
    ┌─ uniswap.fe:309:16
    │
309 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^            ^ u256: Value
    │                │                                      
    │                address: Storage { nonce: None } => Value

note: 
    ┌─ uniswap.fe:309:46
    │
309 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                                              ^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:309:16
    │
309 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^ String<22>: Memory
    │                │                                          
    │                bool: Value
310 │ 
311 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                                     ^^^^^^  ^^^^^^ address: Value
    │                                     │        
    │                                     address: Value

note: 
    ┌─ uniswap.fe:311:36
    │
311 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                                    ^^^^^^^^^^^^^^^^ (address, address): Memory

note: 
    ┌─ uniswap.fe:311:36
    │
311 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<u8, 64>: Memory

note: 
    ┌─ uniswap.fe:311:26
    │
311 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value
312 │         let pair: UniswapV2Pair = UniswapV2Pair.create2(ctx, 0, salt)
    │                                                         ^^^  ^  ^^^^ u256: Value
    │                                                         │    │   
    │                                                         │    u256: Value
    │                                                         Context: Memory

note: 
    ┌─ uniswap.fe:312:35
    │
312 │         let pair: UniswapV2Pair = UniswapV2Pair.create2(ctx, 0, salt)
    │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UniswapV2Pair: Value
313 │         pair.initialize(token0, token1)
    │         ^^^^            ^^^^^^  ^^^^^^ address: Value
    │         │               │        
    │         │               address: Value
    │         UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:313:9
    │
313 │         pair.initialize(token0, token1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
314 │ 
315 │         self.pairs[token0][token1] = address(pair)
    │         ^^^^ UniswapV2Factory: Value

note: 
    ┌─ uniswap.fe:315:9
    │
315 │         self.pairs[token0][token1] = address(pair)
    │         ^^^^^^^^^^ ^^^^^^ address: Value
    │         │           
    │         Map<address, Map<address, address>>: Storage { nonce: Some(2) }

note: 
    ┌─ uniswap.fe:315:9
    │
315 │         self.pairs[token0][token1] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^ ^^^^^^ address: Value
    │         │                   
    │         Map<address, address>: Storage { nonce: None }

note: 
    ┌─ uniswap.fe:315:9
    │
315 │         self.pairs[token0][token1] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^           ^^^^ UniswapV2Pair: Value
    │         │                                     
    │         address: Storage { nonce: None }

note: 
    ┌─ uniswap.fe:315:38
    │
315 │         self.pairs[token0][token1] = address(pair)
    │                                      ^^^^^^^^^^^^^ address: Value
316 │         self.pairs[token1][token0] = address(pair)
    │         ^^^^ UniswapV2Factory: Value

note: 
    ┌─ uniswap.fe:316:9
    │
316 │         self.pairs[token1][token0] = address(pair)
    │         ^^^^^^^^^^ ^^^^^^ address: Value
    │         │           
    │         Map<address, Map<address, address>>: Storage { nonce: Some(2) }

note: 
    ┌─ uniswap.fe:316:9
    │
316 │         self.pairs[token1][token0] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^ ^^^^^^ address: Value
    │         │                   
    │         Map<address, address>: Storage { nonce: None }

note: 
    ┌─ uniswap.fe:316:9
    │
316 │         self.pairs[token1][token0] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^           ^^^^ UniswapV2Pair: Value
    │         │                                     
    │         address: Storage { nonce: None }

note: 
    ┌─ uniswap.fe:316:38
    │
316 │         self.pairs[token1][token0] = address(pair)
    │                                      ^^^^^^^^^^^^^ address: Value
317 │         self.all_pairs[self.pair_counter] = address(pair)
    │         ^^^^ UniswapV2Factory: Value

note: 
    ┌─ uniswap.fe:317:9
    │
317 │         self.all_pairs[self.pair_counter] = address(pair)
    │         ^^^^^^^^^^^^^^ ^^^^ UniswapV2Factory: Value
    │         │               
    │         Array<address, 100>: Storage { nonce: Some(3) }

note: 
    ┌─ uniswap.fe:317:24
    │
317 │         self.all_pairs[self.pair_counter] = address(pair)
    │                        ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(4) } => Value

note: 
    ┌─ uniswap.fe:317:9
    │
317 │         self.all_pairs[self.pair_counter] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^           ^^^^ UniswapV2Pair: Value
    │         │                                            
    │         address: Storage { nonce: None }

note: 
    ┌─ uniswap.fe:317:45
    │
317 │         self.all_pairs[self.pair_counter] = address(pair)
    │                                             ^^^^^^^^^^^^^ address: Value
318 │         self.pair_counter = self.pair_counter + 1
    │         ^^^^ UniswapV2Factory: Value

note: 
    ┌─ uniswap.fe:318:9
    │
318 │         self.pair_counter = self.pair_counter + 1
    │         ^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Factory: Value
    │         │                    
    │         u256: Storage { nonce: Some(4) }

note: 
    ┌─ uniswap.fe:318:29
    │
318 │         self.pair_counter = self.pair_counter + 1
    │                             ^^^^^^^^^^^^^^^^^   ^ u256: Value
    │                             │                    
    │                             u256: Storage { nonce: Some(4) } => Value

note: 
    ┌─ uniswap.fe:318:29
    │
318 │         self.pair_counter = self.pair_counter + 1
    │                             ^^^^^^^^^^^^^^^^^^^^^ u256: Value
319 │ 
320 │         emit PairCreated(ctx, token0, token1, pair: address(pair), index: self.pair_counter)
    │                          ^^^  ^^^^^^  ^^^^^^                ^^^^ UniswapV2Pair: Value
    │                          │    │       │                      
    │                          │    │       address: Value
    │                          │    address: Value
    │                          Context: Memory

note: 
    ┌─ uniswap.fe:320:53
    │
320 │         emit PairCreated(ctx, token0, token1, pair: address(pair), index: self.pair_counter)
    │                                                     ^^^^^^^^^^^^^         ^^^^ UniswapV2Factory: Value
    │                                                     │                      
    │                                                     address: Value

note: 
    ┌─ uniswap.fe:320:75
    │
320 │         emit PairCreated(ctx, token0, token1, pair: address(pair), index: self.pair_counter)
    │                                                                           ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(4) } => Value
321 │         return address(pair)
    │                        ^^^^ UniswapV2Pair: Value

note: 
    ┌─ uniswap.fe:321:16
    │
321 │         return address(pair)
    │                ^^^^^^^^^^^^^ address: Value

note: 
    ┌─ uniswap.fe:320:9
    │
320 │         emit PairCreated(ctx, token0, token1, pair: address(pair), index: self.pair_counter)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 13094055123344570742
    │
    = Event {
          name: "PairCreated",
          fields: [
              EventField {
                  name: "token0",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
              EventField {
                  name: "token1",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
              EventField {
                  name: "pair",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "index",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
          ],
      }

note: 
    ┌─ uniswap.fe:323:5
    │  
323 │ ╭     pub fn set_fee_to(self, ctx: Context, fee_to: address):
324 │ │         assert ctx.msg_sender() == self.fee_to_setter, "UniswapV2: FORBIDDEN"
325 │ │         self.fee_to = fee_to
    │ ╰────────────────────────────^ attributes hash: 9061125162615165722
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "fee_to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:324:16
    │
324 │         assert ctx.msg_sender() == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^ Context: Memory

note: 
    ┌─ uniswap.fe:324:16
    │
324 │         assert ctx.msg_sender() == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^    ^^^^ UniswapV2Factory: Value
    │                │                    
    │                address: Value

note: 
    ┌─ uniswap.fe:324:36
    │
324 │         assert ctx.msg_sender() == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                                    ^^^^^^^^^^^^^^^^^^ address: Storage { nonce: Some(1) } => Value

note: 
    ┌─ uniswap.fe:324:16
    │
324 │         assert ctx.msg_sender() == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^ String<20>: Memory
    │                │                                        
    │                bool: Value
325 │         self.fee_to = fee_to
    │         ^^^^ UniswapV2Factory: Value

note: 
    ┌─ uniswap.fe:325:9
    │
325 │         self.fee_to = fee_to
    │         ^^^^^^^^^^^   ^^^^^^ address: Value
    │         │              
    │         address: Storage { nonce: Some(0) }

note: 
    ┌─ uniswap.fe:327:5
    │  
327 │ ╭     pub fn set_fee_to_setter(self, ctx: Context, fee_to_setter: address):
328 │ │         assert ctx.msg_sender() == fee_to_setter, "UniswapV2: FORBIDDEN"
329 │ │         self.fee_to_setter = fee_to_setter
    │ ╰──────────────────────────────────────────^ attributes hash: 16865322734649050051
    │  
    = FunctionSignature {
          self_decl: Some(
              Mutable,
          ),
          ctx_decl: Some(
              Mutable,
          ),
          params: [
              FunctionParam {
                  label: None,
                  name: "ctx",
                  typ: Ok(
                      Struct(
                          Struct {
                              name: "Context",
                              field_count: 0,
                          },
                      ),
                  ),
              },
              FunctionParam {
                  label: None,
                  name: "fee_to_setter",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:328:16
    │
328 │         assert ctx.msg_sender() == fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^ Context: Memory

note: 
    ┌─ uniswap.fe:328:16
    │
328 │         assert ctx.msg_sender() == fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^ address: Value
    │                │                    
    │                address: Value

note: 
    ┌─ uniswap.fe:328:16
    │
328 │         assert ctx.msg_sender() == fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^ String<20>: Memory
    │                │                                   
    │                bool: Value
329 │         self.fee_to_setter = fee_to_setter
    │         ^^^^ UniswapV2Factory: Value

note: 
    ┌─ uniswap.fe:329:9
    │
329 │         self.fee_to_setter = fee_to_setter
    │         ^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^ address: Value
    │         │                     
    │         address: Storage { nonce: Some(1) }

note: 
    ┌─ uniswap.fe:332:1
    │  
332 │ ╭ fn sqrt(_ val: u256) -> u256:
333 │ │     let z: u256
334 │ │     if (val > 3):
335 │ │         z = val
    · │
341 │ │         z = 1
342 │ │     return z
    │ ╰────────────^ attributes hash: 4892692935064256824
    │  
    = FunctionSignature {
          self_decl: None,
          ctx_decl: None,
          params: [
              FunctionParam {
                  label: Some(
                      "_",
                  ),
                  name: "val",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:333:12
    │
333 │     let z: u256
    │            ^^^^ u256
    ·
336 │         let x: u256 = val / 2 + 1
    │                ^^^^ u256

note: 
    ┌─ uniswap.fe:334:9
    │
334 │     if (val > 3):
    │         ^^^   ^ u256: Value
    │         │      
    │         u256: Value

note: 
    ┌─ uniswap.fe:334:8
    │
334 │     if (val > 3):
    │        ^^^^^^^^^ bool: Value
335 │         z = val
    │         ^   ^^^ u256: Value
    │         │    
    │         u256: Value
336 │         let x: u256 = val / 2 + 1
    │                       ^^^   ^ u256: Value
    │                       │      
    │                       u256: Value

note: 
    ┌─ uniswap.fe:336:23
    │
336 │         let x: u256 = val / 2 + 1
    │                       ^^^^^^^   ^ u256: Value
    │                       │          
    │                       u256: Value

note: 
    ┌─ uniswap.fe:336:23
    │
336 │         let x: u256 = val / 2 + 1
    │                       ^^^^^^^^^^^ u256: Value
337 │         while (x < z):
    │                ^   ^ u256: Value
    │                │    
    │                u256: Value

note: 
    ┌─ uniswap.fe:337:15
    │
337 │         while (x < z):
    │               ^^^^^^^ bool: Value
338 │             z = x
    │             ^   ^ u256: Value
    │             │    
    │             u256: Value
339 │             x = (val / x + x) / 2
    │             ^    ^^^   ^ u256: Value
    │             │    │      
    │             │    u256: Value
    │             u256: Value

note: 
    ┌─ uniswap.fe:339:18
    │
339 │             x = (val / x + x) / 2
    │                  ^^^^^^^   ^ u256: Value
    │                  │          
    │                  u256: Value

note: 
    ┌─ uniswap.fe:339:17
    │
339 │             x = (val / x + x) / 2
    │                 ^^^^^^^^^^^^^   ^ u256: Value
    │                 │                
    │                 u256: Value

note: 
    ┌─ uniswap.fe:339:17
    │
339 │             x = (val / x + x) / 2
    │                 ^^^^^^^^^^^^^^^^^ u256: Value
340 │     elif (val != 0):
    │           ^^^    ^ u256: Value
    │           │       
    │           u256: Value

note: 
    ┌─ uniswap.fe:340:10
    │
340 │     elif (val != 0):
    │          ^^^^^^^^^^ bool: Value
341 │         z = 1
    │         ^   ^ u256: Value
    │         │    
    │         u256: Value
342 │     return z
    │            ^ u256: Value

note: 
    ┌─ uniswap.fe:344:1
    │  
344 │ ╭ fn min(_ x: u256, _ y: u256) -> u256:
345 │ │     return x if x < y else y
    │ ╰────────────────────────────^ attributes hash: 4448606202021980030
    │  
    = FunctionSignature {
          self_decl: None,
          ctx_decl: None,
          params: [
              FunctionParam {
                  label: Some(
                      "_",
                  ),
                  name: "x",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  label: Some(
                      "_",
                  ),
                  name: "y",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ uniswap.fe:345:17
    │
345 │     return x if x < y else y
    │                 ^   ^ u256: Value
    │                 │    
    │                 u256: Value

note: 
    ┌─ uniswap.fe:345:12
    │
345 │     return x if x < y else y
    │            ^    ^^^^^      ^ u256: Value
    │            │    │           
    │            │    bool: Value
    │            u256: Value

note: 
    ┌─ uniswap.fe:345:12
    │
345 │     return x if x < y else y
    │            ^^^^^^^^^^^^^^^^^ u256: Value



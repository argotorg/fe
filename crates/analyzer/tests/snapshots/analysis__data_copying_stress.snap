---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ data_copying_stress.fe:2:5
  │
2 │     pub my_string: String<42>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^ String<42>
3 │     pub my_u256: u256
  │     ^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ data_copying_stress.fe:7:5
   │
 7 │     my_string: String<42>
   │     ^^^^^^^^^^^^^^^^^^^^^ String<42>
 8 │     my_other_string: String<42>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<42>
 9 │     my_u256: u256
   │     ^^^^^^^^^^^^^ u256
10 │     my_other_u256: u256
   │     ^^^^^^^^^^^^^^^^^^^ u256
11 │     my_nums: Array<u256, 5>
   │     ^^^^^^^^^^^^^^^^^^^^^^^ Array<u256, 5>
12 │     my_addrs: Array<address, 3>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 3>

note: 
   ┌─ data_copying_stress.fe:14:5
   │  
14 │ ╭     pub fn set_my_vals(self, my_string: String<42>, my_other_string: String<42>, my_u256: u256, my_other_u256: u256) {
15 │ │         self.my_string = my_string
16 │ │         self.my_other_string = my_other_string
17 │ │         self.my_u256 = my_u256
18 │ │         self.my_other_u256 = my_other_u256
19 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: my_string, typ: String<42> }, { label: None, name: my_other_string, typ: String<42> }, { label: None, name: my_u256, typ: u256 }, { label: None, name: my_other_u256, typ: u256 }] -> ()

note: 
   ┌─ data_copying_stress.fe:15:9
   │
15 │         self.my_string = my_string
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:15:9
   │
15 │         self.my_string = my_string
   │         ^^^^^^^^^^^^^^   ^^^^^^^^^ String<42>: Memory
   │         │                 
   │         String<42>: Storage { nonce: Some(0) }
16 │         self.my_other_string = my_other_string
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:16:9
   │
16 │         self.my_other_string = my_other_string
   │         ^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^ String<42>: Memory
   │         │                       
   │         String<42>: Storage { nonce: Some(1) }
17 │         self.my_u256 = my_u256
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:17:9
   │
17 │         self.my_u256 = my_u256
   │         ^^^^^^^^^^^^   ^^^^^^^ u256: Value
   │         │               
   │         u256: Storage { nonce: Some(2) }
18 │         self.my_other_u256 = my_other_u256
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:18:9
   │
18 │         self.my_other_u256 = my_other_u256
   │         ^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^ u256: Value
   │         │                     
   │         u256: Storage { nonce: Some(3) }

note: 
   ┌─ data_copying_stress.fe:21:5
   │  
21 │ ╭     pub fn set_to_my_other_vals(self) {
22 │ │         self.my_string = self.my_other_string
23 │ │         self.my_u256 = self.my_other_u256
24 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> ()

note: 
   ┌─ data_copying_stress.fe:22:9
   │
22 │         self.my_string = self.my_other_string
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:22:9
   │
22 │         self.my_string = self.my_other_string
   │         ^^^^^^^^^^^^^^   ^^^^ Foo: Value
   │         │                 
   │         String<42>: Storage { nonce: Some(0) }

note: 
   ┌─ data_copying_stress.fe:22:26
   │
22 │         self.my_string = self.my_other_string
   │                          ^^^^^^^^^^^^^^^^^^^^ String<42>: Storage { nonce: Some(1) }
23 │         self.my_u256 = self.my_other_u256
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:23:9
   │
23 │         self.my_u256 = self.my_other_u256
   │         ^^^^^^^^^^^^   ^^^^ Foo: Value
   │         │               
   │         u256: Storage { nonce: Some(2) }

note: 
   ┌─ data_copying_stress.fe:23:24
   │
23 │         self.my_u256 = self.my_other_u256
   │                        ^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(3) }

note: 
   ┌─ data_copying_stress.fe:26:5
   │  
26 │ ╭     pub fn multiple_references_shared_memory(my_array: Array<u256, 10>) {
27 │ │         let my_2nd_array: Array<u256, 10> = my_array
28 │ │         let my_3rd_array: Array<u256, 10> = my_2nd_array
29 │ │         assert my_array[3] != 5
   · │
37 │ │         assert my_3rd_array[3] == 50
38 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: my_array, typ: Array<u256, 10> }] -> ()

note: 
   ┌─ data_copying_stress.fe:27:13
   │
27 │         let my_2nd_array: Array<u256, 10> = my_array
   │             ^^^^^^^^^^^^ Array<u256, 10>
28 │         let my_3rd_array: Array<u256, 10> = my_2nd_array
   │             ^^^^^^^^^^^^ Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:27:45
   │
27 │         let my_2nd_array: Array<u256, 10> = my_array
   │                                             ^^^^^^^^ Array<u256, 10>: Memory
28 │         let my_3rd_array: Array<u256, 10> = my_2nd_array
   │                                             ^^^^^^^^^^^^ Array<u256, 10>: Memory
29 │         assert my_array[3] != 5
   │                ^^^^^^^^ ^ u256: Value
   │                │         
   │                Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:29:16
   │
29 │         assert my_array[3] != 5
   │                ^^^^^^^^^^^    ^ u256: Value
   │                │               
   │                u256: Memory => Value

note: 
   ┌─ data_copying_stress.fe:29:16
   │
29 │         assert my_array[3] != 5
   │                ^^^^^^^^^^^^^^^^ bool: Value
30 │         my_array[3] = 5
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:30:9
   │
30 │         my_array[3] = 5
   │         ^^^^^^^^^^^   ^ u256: Value
   │         │              
   │         u256: Memory
31 │         assert my_array[3] == 5
   │                ^^^^^^^^ ^ u256: Value
   │                │         
   │                Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:31:16
   │
31 │         assert my_array[3] == 5
   │                ^^^^^^^^^^^    ^ u256: Value
   │                │               
   │                u256: Memory => Value

note: 
   ┌─ data_copying_stress.fe:31:16
   │
31 │         assert my_array[3] == 5
   │                ^^^^^^^^^^^^^^^^ bool: Value
32 │         assert my_2nd_array[3] == 5
   │                ^^^^^^^^^^^^ ^ u256: Value
   │                │             
   │                Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:32:16
   │
32 │         assert my_2nd_array[3] == 5
   │                ^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                   
   │                u256: Memory => Value

note: 
   ┌─ data_copying_stress.fe:32:16
   │
32 │         assert my_2nd_array[3] == 5
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
33 │         assert my_3rd_array[3] == 5
   │                ^^^^^^^^^^^^ ^ u256: Value
   │                │             
   │                Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:33:16
   │
33 │         assert my_3rd_array[3] == 5
   │                ^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                   
   │                u256: Memory => Value

note: 
   ┌─ data_copying_stress.fe:33:16
   │
33 │         assert my_3rd_array[3] == 5
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
34 │         my_3rd_array[3] = 50
   │         ^^^^^^^^^^^^ ^ u256: Value
   │         │             
   │         Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:34:9
   │
34 │         my_3rd_array[3] = 50
   │         ^^^^^^^^^^^^^^^   ^^ u256: Value
   │         │                  
   │         u256: Memory
35 │         assert my_array[3] == 50
   │                ^^^^^^^^ ^ u256: Value
   │                │         
   │                Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:35:16
   │
35 │         assert my_array[3] == 50
   │                ^^^^^^^^^^^    ^^ u256: Value
   │                │               
   │                u256: Memory => Value

note: 
   ┌─ data_copying_stress.fe:35:16
   │
35 │         assert my_array[3] == 50
   │                ^^^^^^^^^^^^^^^^^ bool: Value
36 │         assert my_2nd_array[3] == 50
   │                ^^^^^^^^^^^^ ^ u256: Value
   │                │             
   │                Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:36:16
   │
36 │         assert my_2nd_array[3] == 50
   │                ^^^^^^^^^^^^^^^    ^^ u256: Value
   │                │                   
   │                u256: Memory => Value

note: 
   ┌─ data_copying_stress.fe:36:16
   │
36 │         assert my_2nd_array[3] == 50
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value
37 │         assert my_3rd_array[3] == 50
   │                ^^^^^^^^^^^^ ^ u256: Value
   │                │             
   │                Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:37:16
   │
37 │         assert my_3rd_array[3] == 50
   │                ^^^^^^^^^^^^^^^    ^^ u256: Value
   │                │                   
   │                u256: Memory => Value

note: 
   ┌─ data_copying_stress.fe:37:16
   │
37 │         assert my_3rd_array[3] == 50
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value

note: 
   ┌─ data_copying_stress.fe:40:5
   │  
40 │ ╭     pub fn mutate_and_return(my_array: Array<u256, 10>) -> Array<u256, 10> {
41 │ │         my_array[3] = 5
42 │ │         return my_array
43 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: my_array, typ: Array<u256, 10> }] -> Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:41:9
   │
41 │         my_array[3] = 5
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:41:9
   │
41 │         my_array[3] = 5
   │         ^^^^^^^^^^^   ^ u256: Value
   │         │              
   │         u256: Memory
42 │         return my_array
   │                ^^^^^^^^ Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:45:5
   │  
45 │ ╭     pub fn clone_and_return(my_array: Array<u256, 10>) -> Array<u256, 10> {
46 │ │         return my_array.clone()
47 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: my_array, typ: Array<u256, 10> }] -> Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:46:16
   │
46 │         return my_array.clone()
   │                ^^^^^^^^ Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:46:16
   │
46 │         return my_array.clone()
   │                ^^^^^^^^^^^^^^^^ Array<u256, 10>: Memory => Memory

note: 
   ┌─ data_copying_stress.fe:49:5
   │  
49 │ ╭     pub fn clone_mutate_and_return(my_array: Array<u256, 10>) -> Array<u256, 10> {
50 │ │         my_array.clone()[3] = 5
51 │ │         return my_array
52 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: my_array, typ: Array<u256, 10> }] -> Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:50:9
   │
50 │         my_array.clone()[3] = 5
   │         ^^^^^^^^ Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:50:9
   │
50 │         my_array.clone()[3] = 5
   │         ^^^^^^^^^^^^^^^^ ^ u256: Value
   │         │                 
   │         Array<u256, 10>: Memory => Memory

note: 
   ┌─ data_copying_stress.fe:50:9
   │
50 │         my_array.clone()[3] = 5
   │         ^^^^^^^^^^^^^^^^^^^   ^ u256: Value
   │         │                      
   │         u256: Memory
51 │         return my_array
   │                ^^^^^^^^ Array<u256, 10>: Memory

note: 
   ┌─ data_copying_stress.fe:54:5
   │  
54 │ ╭     pub fn assign_my_nums_and_return(self) -> Array<u256, 5> {
55 │ │         let my_nums_mem: Array<u256, 5> = [0; 5]
56 │ │         self.my_nums[0] = 42
57 │ │         self.my_nums[1] = 26
   · │
62 │ │         return my_nums_mem
63 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> Array<u256, 5>

note: 
   ┌─ data_copying_stress.fe:55:13
   │
55 │         let my_nums_mem: Array<u256, 5> = [0; 5]
   │             ^^^^^^^^^^^ Array<u256, 5>

note: 
   ┌─ data_copying_stress.fe:55:44
   │
55 │         let my_nums_mem: Array<u256, 5> = [0; 5]
   │                                            ^  ^ u256: Value
   │                                            │   
   │                                            u256: Value

note: 
   ┌─ data_copying_stress.fe:55:43
   │
55 │         let my_nums_mem: Array<u256, 5> = [0; 5]
   │                                           ^^^^^^ Array<u256, 5>: Memory
56 │         self.my_nums[0] = 42
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:56:9
   │
56 │         self.my_nums[0] = 42
   │         ^^^^^^^^^^^^ ^ u256: Value
   │         │             
   │         Array<u256, 5>: Storage { nonce: Some(4) }

note: 
   ┌─ data_copying_stress.fe:56:9
   │
56 │         self.my_nums[0] = 42
   │         ^^^^^^^^^^^^^^^   ^^ u256: Value
   │         │                  
   │         u256: Storage { nonce: None }
57 │         self.my_nums[1] = 26
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:57:9
   │
57 │         self.my_nums[1] = 26
   │         ^^^^^^^^^^^^ ^ u256: Value
   │         │             
   │         Array<u256, 5>: Storage { nonce: Some(4) }

note: 
   ┌─ data_copying_stress.fe:57:9
   │
57 │         self.my_nums[1] = 26
   │         ^^^^^^^^^^^^^^^   ^^ u256: Value
   │         │                  
   │         u256: Storage { nonce: None }
58 │         self.my_nums[2] = 0
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:58:9
   │
58 │         self.my_nums[2] = 0
   │         ^^^^^^^^^^^^ ^ u256: Value
   │         │             
   │         Array<u256, 5>: Storage { nonce: Some(4) }

note: 
   ┌─ data_copying_stress.fe:58:9
   │
58 │         self.my_nums[2] = 0
   │         ^^^^^^^^^^^^^^^   ^ u256: Value
   │         │                  
   │         u256: Storage { nonce: None }
59 │         self.my_nums[3] = 1
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:59:9
   │
59 │         self.my_nums[3] = 1
   │         ^^^^^^^^^^^^ ^ u256: Value
   │         │             
   │         Array<u256, 5>: Storage { nonce: Some(4) }

note: 
   ┌─ data_copying_stress.fe:59:9
   │
59 │         self.my_nums[3] = 1
   │         ^^^^^^^^^^^^^^^   ^ u256: Value
   │         │                  
   │         u256: Storage { nonce: None }
60 │         self.my_nums[4] = 255
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:60:9
   │
60 │         self.my_nums[4] = 255
   │         ^^^^^^^^^^^^ ^ u256: Value
   │         │             
   │         Array<u256, 5>: Storage { nonce: Some(4) }

note: 
   ┌─ data_copying_stress.fe:60:9
   │
60 │         self.my_nums[4] = 255
   │         ^^^^^^^^^^^^^^^   ^^^ u256: Value
   │         │                  
   │         u256: Storage { nonce: None }
61 │         my_nums_mem = self.my_nums.to_mem()
   │         ^^^^^^^^^^^   ^^^^ Foo: Value
   │         │              
   │         Array<u256, 5>: Memory

note: 
   ┌─ data_copying_stress.fe:61:23
   │
61 │         my_nums_mem = self.my_nums.to_mem()
   │                       ^^^^^^^^^^^^ Array<u256, 5>: Storage { nonce: Some(4) }

note: 
   ┌─ data_copying_stress.fe:61:23
   │
61 │         my_nums_mem = self.my_nums.to_mem()
   │                       ^^^^^^^^^^^^^^^^^^^^^ Array<u256, 5>: Storage { nonce: Some(4) } => Memory
62 │         return my_nums_mem
   │                ^^^^^^^^^^^ Array<u256, 5>: Memory

note: 
   ┌─ data_copying_stress.fe:65:5
   │  
65 │ ╭     pub fn emit_my_event(self, ctx: Context) {
66 │ │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
67 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> ()

note: 
   ┌─ data_copying_stress.fe:66:32
   │
66 │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
   │                                ^^^  ^^^^ Foo: Value
   │                                │     
   │                                Context: Memory

note: 
   ┌─ data_copying_stress.fe:66:37
   │
66 │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
   │                                     ^^^^^^^^^^^^^^ String<42>: Storage { nonce: Some(0) }

note: 
   ┌─ data_copying_stress.fe:66:37
   │
66 │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
   │                                     ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^ Foo: Value
   │                                     │                         
   │                                     String<42>: Storage { nonce: Some(0) } => Memory

note: 
   ┌─ data_copying_stress.fe:66:62
   │
66 │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
   │                                                              ^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => Value

note: 
   ┌─ data_copying_stress.fe:66:9
   │
66 │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value

note: 
   ┌─ data_copying_stress.fe:69:5
   │  
69 │ ╭     fn emit_my_event_internal(ctx: Context, _ my_string: String<42>, _ my_u256: u256) {
70 │ │         ctx.emit(MyEvent(my_string, my_u256))
71 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: ctx, typ: Context }, { label: Some("_"), name: my_string, typ: String<42> }, { label: Some("_"), name: my_u256, typ: u256 }] -> ()

note: 
   ┌─ data_copying_stress.fe:70:9
   │
70 │         ctx.emit(MyEvent(my_string, my_u256))
   │         ^^^              ^^^^^^^^^  ^^^^^^^ u256: Value
   │         │                │           
   │         │                String<42>: Memory
   │         Context: Memory

note: 
   ┌─ data_copying_stress.fe:70:18
   │
70 │         ctx.emit(MyEvent(my_string, my_u256))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ MyEvent: Memory

note: 
   ┌─ data_copying_stress.fe:70:9
   │
70 │         ctx.emit(MyEvent(my_string, my_u256))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value

note: 
   ┌─ data_copying_stress.fe:73:5
   │  
73 │ ╭     pub fn set_my_addrs(self, my_addrs: Array<address, 3>) {
74 │ │         self.my_addrs = my_addrs
75 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: my_addrs, typ: Array<address, 3> }] -> ()

note: 
   ┌─ data_copying_stress.fe:74:9
   │
74 │         self.my_addrs = my_addrs
   │         ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:74:9
   │
74 │         self.my_addrs = my_addrs
   │         ^^^^^^^^^^^^^   ^^^^^^^^ Array<address, 3>: Memory
   │         │                
   │         Array<address, 3>: Storage { nonce: Some(5) }

note: 
   ┌─ data_copying_stress.fe:77:5
   │  
77 │ ╭     pub fn get_my_second_addr(self) -> address {
78 │ │         return self.my_addrs[1]
79 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> address

note: 
   ┌─ data_copying_stress.fe:78:16
   │
78 │         return self.my_addrs[1]
   │                ^^^^ Foo: Value

note: 
   ┌─ data_copying_stress.fe:78:16
   │
78 │         return self.my_addrs[1]
   │                ^^^^^^^^^^^^^ ^ u256: Value
   │                │              
   │                Array<address, 3>: Storage { nonce: Some(5) }

note: 
   ┌─ data_copying_stress.fe:78:16
   │
78 │         return self.my_addrs[1]
   │                ^^^^^^^^^^^^^^^^ address: Storage { nonce: None } => Value



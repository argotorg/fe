---
source: crates/yulgen/tests/yulgen.rs
expression: "abi_functions::decode_data(&[AbiType::Uint{size: 32,},\n                             AbiType::Bytes{size: 100,},\n                             AbiType::String{max_size: 42,}, AbiType::Bool,\n                             AbiType::Address, AbiType::Bytes{size: 100,}],\n                           AbiDecodeLocation::Calldata)"

---
function abi_decode_data_uint256_bytes_100_string_42_bool_address_bytes_100_calldata(head_start, data_end) -> return_val_0, return_val_1, return_val_2, return_val_3, return_val_4, return_val_5 {
    let encoding_size := sub(data_end, head_start)
    if or(lt(encoding_size, 544), gt(encoding_size, 608)) { revert_with_Error_uint256(259) }
    let head_offset_0 := 0
    let head_offset_1 := 32
    let head_offset_2 := 64
    let head_offset_3 := 96
    let head_offset_4 := 128
    let head_offset_5 := 160
    let decoded_val_0 := abi_decode_component_uint256_calldata(head_start, head_offset_0)
    let decoded_val_1, data_start_offset_1, data_end_offset_1 := abi_decode_component_bytes_100_calldata(head_start, head_offset_1)
    let decoded_val_2, data_start_offset_2, data_end_offset_2 := abi_decode_component_string_42_calldata(head_start, head_offset_2)
    let decoded_val_3 := abi_decode_component_bool_calldata(head_start, head_offset_3)
    let decoded_val_4 := abi_decode_component_address_calldata(head_start, head_offset_4)
    let decoded_val_5, data_start_offset_5, data_end_offset_5 := abi_decode_component_bytes_100_calldata(head_start, head_offset_5)
    if iszero(eq(data_start_offset_1, 192)) { revert_with_Error_uint256(259) }
    if iszero(eq(data_start_offset_2, data_end_offset_1)) { revert_with_Error_uint256(259) }
    if iszero(eq(data_start_offset_5, data_end_offset_2)) { revert_with_Error_uint256(259) }
    if iszero(eq(encoding_size, data_end_offset_5)) { revert_with_Error_uint256(259) }
    return_val_0 := decoded_val_0
    return_val_1 := decoded_val_1
    return_val_2 := decoded_val_2
    return_val_3 := decoded_val_3
    return_val_4 := decoded_val_4
    return_val_5 := decoded_val_5
}

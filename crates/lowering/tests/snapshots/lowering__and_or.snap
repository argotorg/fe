---
source: crates/lowering/tests/lowering.rs
expression: lowered

---
struct $tuple_bool_bool_:
    pub item0: bool
    pub item1: bool

contract Foo:
    pub fn bar() -> ():
        let $boolean_expr_result_0: bool = true
        if not false:
            $boolean_expr_result_0 = true

        return baz($boolean_expr_result_0)

    pub fn nested() -> ():
        if true:
            let a: bool = true
            let b: bool = false
            let x: bool = true
            let y: bool = false
            let $boolean_expr_result_0: bool = true
            if not x:
                $boolean_expr_result_0 = y

            let $boolean_expr_result_1: bool = false
            if a:
                $boolean_expr_result_1 = b

            return double_baz($boolean_expr_result_1, $boolean_expr_result_0)

        return ()

    pub fn nested_ternary() -> ():
        let a: bool = true
        let b: bool = false
        let x: bool = true
        let y: bool = false
        let $boolean_expr_result_0: bool = false
        let $boolean_expr_result_1: bool = false
        if a:
            $boolean_expr_result_1 = b

        if baz($boolean_expr_result_1):
            let $boolean_expr_result_2: bool = false
            if x:
                $boolean_expr_result_2 = y

            $boolean_expr_result_0 = $boolean_expr_result_2

        return $boolean_expr_result_0

    pub fn in_dec() -> ():
        let a: bool = true
        let b: bool = false
        let x: bool = true
        let y: bool = false
        let $boolean_expr_result_0: bool = true
        if not x:
            $boolean_expr_result_0 = y

        let $boolean_expr_result_1: bool = false
        if a:
            $boolean_expr_result_1 = b

        let z: $tuple_bool_bool_ = $tuple_bool_bool_(item0: $boolean_expr_result_1, item1: $boolean_expr_result_0)
        return ()

    pub fn short_or(first: bool, second: bool, third: bool, fourth: bool) -> bool:
        let $boolean_expr_result_0: bool = true
        let $boolean_expr_result_1: bool = true
        let $boolean_expr_result_2: bool = true
        if not first:
            $boolean_expr_result_2 = second

        if not $boolean_expr_result_2:
            $boolean_expr_result_1 = third

        if not $boolean_expr_result_1:
            $boolean_expr_result_0 = fourth

        return $boolean_expr_result_0

    pub fn short_or2(first: bool, second: bool, third: bool, fourth: bool) -> bool:
        let $boolean_expr_result_0: bool = true
        let $boolean_expr_result_1: bool = true
        if not first:
            $boolean_expr_result_1 = second

        if not $boolean_expr_result_1:
            let $boolean_expr_result_2: bool = true
            if not third:
                $boolean_expr_result_2 = fourth

            $boolean_expr_result_0 = $boolean_expr_result_2

        return $boolean_expr_result_0

    pub fn short_or3(first: bool, second: bool, third: bool, fourth: bool) -> bool:
        let $boolean_expr_result_0: bool = true
        let $boolean_expr_result_1: bool = true
        let $boolean_expr_result_2: bool = true
        if not first:
            $boolean_expr_result_2 = second

        if not $boolean_expr_result_2:
            $boolean_expr_result_1 = third

        if not $boolean_expr_result_1:
            $boolean_expr_result_0 = fourth

        return $boolean_expr_result_0

    pub fn short_and(first: bool, second: bool, third: bool, fourth: bool) -> bool:
        let $boolean_expr_result_0: bool = false
        let $boolean_expr_result_1: bool = false
        let $boolean_expr_result_2: bool = false
        if first:
            $boolean_expr_result_2 = second

        if $boolean_expr_result_2:
            $boolean_expr_result_1 = third

        if $boolean_expr_result_1:
            $boolean_expr_result_0 = fourth

        return $boolean_expr_result_0

    pub fn short_and2(first: bool, second: bool, third: bool, fourth: bool) -> bool:
        let $boolean_expr_result_0: bool = false
        let $boolean_expr_result_1: bool = false
        if first:
            $boolean_expr_result_1 = second

        if $boolean_expr_result_1:
            let $boolean_expr_result_2: bool = false
            if third:
                $boolean_expr_result_2 = fourth

            $boolean_expr_result_0 = $boolean_expr_result_2

        return $boolean_expr_result_0

    pub fn short_and3(first: bool, second: bool, third: bool, fourth: bool) -> bool:
        let $boolean_expr_result_0: bool = false
        let $boolean_expr_result_1: bool = false
        let $boolean_expr_result_2: bool = false
        if first:
            $boolean_expr_result_2 = second

        if $boolean_expr_result_2:
            $boolean_expr_result_1 = third

        if $boolean_expr_result_1:
            $boolean_expr_result_0 = fourth

        return $boolean_expr_result_0

    pub fn short_mixed(first: bool, second: bool, third: bool, fourth: bool) -> bool:
        let $boolean_expr_result_0: bool = true
        let $boolean_expr_result_1: bool = false
        let $boolean_expr_result_2: bool = true
        if not first:
            $boolean_expr_result_2 = second

        if $boolean_expr_result_2:
            $boolean_expr_result_1 = third

        if not $boolean_expr_result_1:
            $boolean_expr_result_0 = fourth

        return $boolean_expr_result_0

    pub fn baz(val: bool) -> ():
        pass
        return ()

    pub fn double_baz(val: bool, val2: bool) -> ():
        pass
        return ()

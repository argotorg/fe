---
source: crates/lowering/tests/lowering.rs
expression: lowered

---
struct $tuple_u256_u256_:
    pub item0: u256
    pub item1: u256

fn list_expr_array_u256_2(val0: u256, val1: u256) -> Array<u256, 2>:
    let generated_array: Array<u256, 2>
    generated_array[0] = val0
    generated_array[1] = val1
    return generated_array

const THREE: u256 = 3

const TEN: u256 = 10

const IS_ADMIN: bool = true

const UNIT: () = ()

struct Bar:
    val: u256

contract Foo:
    table: Map<u256, u256>

    pub fn return_unit() -> ():
        return ()

    pub fn usage(self) -> u256:
        let my_calc: u256 = 3 * 10
        let my_other_calc: u256 = 3 * 3
        let my_array: Array<u256, 2> = list_expr_array_u256_2(3, 10)
        let my_tuple: $tuple_u256_u256_ = $tuple_u256_u256_(item0: 3, item1: 10)
        let my_bar: Bar = Bar(val: 3)
        while 3 > 4:
            pass

        for x in list_expr_array_u256_2(3, 10):
            pass

        self.table[10] = 3
        if 3 == 10:
            pass
        else:
            if 10 == 10:
                return 3 * 10
            else:
                if true:
                    revert Bar(val: 3)



        return self.table[3]

---
source: crates/hir-analysis/tests/ty_check.rs
expression: res
input_file: crates/hir-analysis/test_files/ty_check/refinement.fe
---
note: 
   ┌─ refinement.fe:22:37
   │  
22 │       fn call(self, _ t: i32) -> bool {
   │ ╭─────────────────────────────────────^
23 │ │         return true
24 │ │     }
   │ ╰─────^ bool

note: 
   ┌─ refinement.fe:23:16
   │
23 │         return true
   │                ^^^^ bool

note: 
   ┌─ refinement.fe:28:65
   │  
28 │       fn map<T, U, F: Fn<T, U>>(self: Self<T>, _ f: F) -> Self<U> {
   │ ╭─────────────────────────────────────────────────────────────────^
29 │ │         match self {
30 │ │             Result::Ok(t) => Result::Ok(f.call(t))
31 │ │             Result::Err(e) => Result::Err(e)
32 │ │         }
33 │ │     }
   │ ╰─────^ Result<E, U>

note: 
   ┌─ refinement.fe:29:9
   │  
29 │ ╭         match self {
30 │ │             Result::Ok(t) => Result::Ok(f.call(t))
31 │ │             Result::Err(e) => Result::Err(e)
32 │ │         }
   │ ╰─────────^ Result<E, U>

note: 
   ┌─ refinement.fe:29:15
   │
29 │         match self {
   │               ^^^^ Result<E, T>

note: 
   ┌─ refinement.fe:30:13
   │
30 │             Result::Ok(t) => Result::Ok(f.call(t))
   │             ^^^^^^^^^^^^^ Result<E, T>

note: 
   ┌─ refinement.fe:30:24
   │
30 │             Result::Ok(t) => Result::Ok(f.call(t))
   │                        ^ T

note: 
   ┌─ refinement.fe:30:30
   │
30 │             Result::Ok(t) => Result::Ok(f.call(t))
   │                              ^^^^^^^^^^ fn Ok<E, U>

note: 
   ┌─ refinement.fe:30:30
   │
30 │             Result::Ok(t) => Result::Ok(f.call(t))
   │                              ^^^^^^^^^^^^^^^^^^^^^ Result<E, U>

note: 
   ┌─ refinement.fe:30:41
   │
30 │             Result::Ok(t) => Result::Ok(f.call(t))
   │                                         ^ F

note: 
   ┌─ refinement.fe:30:41
   │
30 │             Result::Ok(t) => Result::Ok(f.call(t))
   │                                         ^^^^^^^^^ U

note: 
   ┌─ refinement.fe:30:48
   │
30 │             Result::Ok(t) => Result::Ok(f.call(t))
   │                                                ^ T

note: 
   ┌─ refinement.fe:31:13
   │
31 │             Result::Err(e) => Result::Err(e)
   │             ^^^^^^^^^^^^^^ Result<E, T>

note: 
   ┌─ refinement.fe:31:25
   │
31 │             Result::Err(e) => Result::Err(e)
   │                         ^ E

note: 
   ┌─ refinement.fe:31:31
   │
31 │             Result::Err(e) => Result::Err(e)
   │                               ^^^^^^^^^^^ fn Err<E, U>

note: 
   ┌─ refinement.fe:31:31
   │
31 │             Result::Err(e) => Result::Err(e)
   │                               ^^^^^^^^^^^^^^ Result<E, U>

note: 
   ┌─ refinement.fe:31:43
   │
31 │             Result::Err(e) => Result::Err(e)
   │                                           ^ E

note: 
   ┌─ refinement.fe:36:8
   │  
36 │   fn f() {
   │ ╭────────^
37 │ │     let r1 = Result<(), i32>::Ok(10)
38 │ │     let r2 = r1.map(MyFn{})
39 │ │ }
   │ ╰─^ ()

note: 
   ┌─ refinement.fe:37:9
   │
37 │     let r1 = Result<(), i32>::Ok(10)
   │         ^^ Result<(), i32>

note: 
   ┌─ refinement.fe:37:14
   │
37 │     let r1 = Result<(), i32>::Ok(10)
   │              ^^^^^^^^^^^^^^^^^^^ fn Ok<(), i32>

note: 
   ┌─ refinement.fe:37:14
   │
37 │     let r1 = Result<(), i32>::Ok(10)
   │              ^^^^^^^^^^^^^^^^^^^^^^^ Result<(), i32>

note: 
   ┌─ refinement.fe:37:34
   │
37 │     let r1 = Result<(), i32>::Ok(10)
   │                                  ^^ i32

note: 
   ┌─ refinement.fe:38:9
   │
38 │     let r2 = r1.map(MyFn{})
   │         ^^ Result<(), bool>

note: 
   ┌─ refinement.fe:38:14
   │
38 │     let r2 = r1.map(MyFn{})
   │              ^^ Result<(), i32>

note: 
   ┌─ refinement.fe:38:14
   │
38 │     let r2 = r1.map(MyFn{})
   │              ^^^^^^^^^^^^^^ Result<(), bool>

note: 
   ┌─ refinement.fe:38:21
   │
38 │     let r2 = r1.map(MyFn{})
   │                     ^^^^^^ MyFn

note: 
   ┌─ refinement.fe:47:1
   │  
47 │ ╭ {
48 │ │     todo() 
49 │ │     
50 │ │ }
   │ ╰─^ T

note: 
   ┌─ refinement.fe:48:5
   │
48 │     todo() 
   │     ^^^^ fn todo

note: 
   ┌─ refinement.fe:48:5
   │
48 │     todo() 
   │     ^^^^^^ T

note: 
   ┌─ refinement.fe:52:8
   │  
52 │   fn h() {
   │ ╭────────^
53 │ │     let _ = g()
54 │ │ }
   │ ╰─^ ()

note: 
   ┌─ refinement.fe:53:9
   │
53 │     let _ = g()
   │         ^ i32

note: 
   ┌─ refinement.fe:53:13
   │
53 │     let _ = g()
   │             ^ fn g<i32>

note: 
   ┌─ refinement.fe:53:13
   │
53 │     let _ = g()
   │             ^^^ i32

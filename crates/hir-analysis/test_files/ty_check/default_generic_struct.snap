---
source: crates/hir-analysis/tests/ty_check.rs
expression: res
input_file: test_files/ty_check/default_generic_struct.fe
---
note: 
   ┌─ default_generic_struct.fe:10:11
   │  
10 │   fn main() {
   │ ╭───────────^
11 │ │     let a: Wrap
12 │ │     let c: Wrap2<u64> = Wrap2 { a: 10, b: 20 }
13 │ │ 
14 │ │     let x = Wrap { v: 1 }
15 │ │     let z = Wrap<u64> { v: 2 }
16 │ │ }
   │ ╰─^ ()

note: 
   ┌─ default_generic_struct.fe:11:9
   │
11 │     let a: Wrap
   │         ^ Wrap<i32>

note: 
   ┌─ default_generic_struct.fe:12:9
   │
12 │     let c: Wrap2<u64> = Wrap2 { a: 10, b: 20 }
   │         ^ Wrap2<u64, u64>

note: 
   ┌─ default_generic_struct.fe:12:25
   │
12 │     let c: Wrap2<u64> = Wrap2 { a: 10, b: 20 }
   │                         ^^^^^^^^^^^^^^^^^^^^^^ Wrap2<u64, u64>

note: 
   ┌─ default_generic_struct.fe:12:36
   │
12 │     let c: Wrap2<u64> = Wrap2 { a: 10, b: 20 }
   │                                    ^^ u64

note: 
   ┌─ default_generic_struct.fe:12:43
   │
12 │     let c: Wrap2<u64> = Wrap2 { a: 10, b: 20 }
   │                                           ^^ u64

note: 
   ┌─ default_generic_struct.fe:14:9
   │
14 │     let x = Wrap { v: 1 }
   │         ^ Wrap<i32>

note: 
   ┌─ default_generic_struct.fe:14:13
   │
14 │     let x = Wrap { v: 1 }
   │             ^^^^^^^^^^^^^ Wrap<i32>

note: 
   ┌─ default_generic_struct.fe:14:23
   │
14 │     let x = Wrap { v: 1 }
   │                       ^ i32

note: 
   ┌─ default_generic_struct.fe:15:9
   │
15 │     let z = Wrap<u64> { v: 2 }
   │         ^ Wrap<u64>

note: 
   ┌─ default_generic_struct.fe:15:13
   │
15 │     let z = Wrap<u64> { v: 2 }
   │             ^^^^^^^^^^^^^^^^^^ Wrap<u64>

note: 
   ┌─ default_generic_struct.fe:15:28
   │
15 │     let z = Wrap<u64> { v: 2 }
   │                            ^ u64


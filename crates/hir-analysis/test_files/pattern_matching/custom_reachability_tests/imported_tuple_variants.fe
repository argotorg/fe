enum Color {
    Rgb(u8, u8, u8),
    Cmyk(u8, u8, u8, u8),
    Grayscale(u8)
}

// Function that uses full path to enum variants (control case)
fn match_full_path(color: Color) -> u8 {
    match color {
        Color::Rgb(r, g, b) => {
            return r + g + b
        }
        Color::Cmyk(c, m, y, k) => {
            return c + m + y + k
        }
        Color::Grayscale(value) => {
            return value
        }
    }
}

// Function that imports variants and uses them directly
fn match_imported_variants(color: Color) -> u8 {
    use Color::*
    
    match color {
        Rgb(r, g, b) => {
            return r + g + b
        }
        Cmyk(c, m, y, k) => {
            return c + m + y + k
        }
        Grayscale(value) => {
            return value
        }
    }
}

// Test for reachability with imported variants
fn match_with_unreachable_imported(color: Color) -> u8 {
    use Color::*
    
    match color {
        Rgb(r, g, b) => {
            return r + g + b
        }
        _ => {
            return 0
        }
        // This should be unreachable, but if variants are treated as wildcards,
        // the compiler might not detect this
        Cmyk(c, m, y, k) => {
            return c + m + y + k
        }
    }
}

// Test for reachability with fully qualified paths
fn match_with_unreachable_full_path(color: Color) -> u8 {
    match color {
        Color::Rgb(r, g, b) => {
            return r + g + b
        }
        _ => {
            return 0
        }
        // This should be unreachable
        Color::Cmyk(c, m, y, k) => {
            return c + m + y + k
        }
    }
}

// Test for partial destructuring with imported variants
fn match_with_partial_destructuring(color: Color) -> u8 {
    use Color::*
    
    match color {
        Rgb(r, ..) => {
            return r
        }
        Cmyk(c, ..) => {
            return c
        }
        _ => {
            return 0
        }
    }
}

// Test for wildcards in tuple elements with imported variants
fn match_with_tuple_wildcards(color: Color) -> u8 {
    use Color::*
    
    match color {
        Rgb(_, _, b) => {
            return b
        }
        Cmyk(_, _, _, k) => {
            return k
        }
        Grayscale(_) => {
            return 255
        }
    }
}
---
source: crates/hir-analysis/tests/pattern_matching.rs
expression: diagnostic_output
input_file: test_files/pattern_matching/misc_tests/bindings.fe
---
Misc test file bindings.fe has 7 diagnostic(s):

error[8-0014]: type must be known here
   ┌─ bindings.fe:35:47
   │
35 │         (Option::Some(a), Option::Some(b)) => a + b
   │                                               ^ type must be known here

error[8-0024]: argument label mismatch
    ┌─ bindings.fe:200:26
    │
194 │ fn identity<T>(value: T) -> T {
    │    -------- function defined here
    ·
200 │     let value = identity(Option::None)
    │                          ^^^^^^^^^^^^ expected `value` label

error[8-0031]: type annotation is needed
   ┌─ bindings.fe:37:10
   │
37 │         (Option::None, Option::Some(b)) => b      // Does 'b' bind correctly?
   │          ^^^^^^^^^^^^
   │          │
   │          type annotation is needed
   │          consider giving `: Option<_>` here

error[8-0031]: type annotation is needed
   ┌─ bindings.fe:38:10
   │
38 │         (Option::None, Option::None) => 0
   │          ^^^^^^^^^^^^
   │          │
   │          type annotation is needed
   │          consider giving `: Option<_>` here

error[8-0031]: type annotation is needed
   ┌─ bindings.fe:38:24
   │
38 │         (Option::None, Option::None) => 0
   │                        ^^^^^^^^^^^^
   │                        │
   │                        type annotation is needed
   │                        consider giving `: Option<_>` here

error[8-0031]: type annotation is needed
    ┌─ bindings.fe:185:9
    │
185 │     let result = Result::Ok(100)
    │         ^^^^^^
    │         │
    │         type annotation is needed
    │         consider giving `: Result<i32, _>` here

error[8-0031]: type annotation is needed
    ┌─ bindings.fe:211:9
    │
211 │     let outer = Result::Ok(Option::None)
    │         ^^^^^
    │         │
    │         type annotation is needed
    │         consider giving `: Result<Option<i32>, _>` here

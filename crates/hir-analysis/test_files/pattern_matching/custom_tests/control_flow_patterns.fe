enum MyEnum {
    Unit,
    Tuple(u8, u8)
}

enum State {
    Continue,
    Done
}

// Test pattern matching inside if statements
fn match_in_if() -> u8 {
    let mut res: u8 = 0
    let my_enum: MyEnum = MyEnum::Tuple(1, 2)

    if true {
        match my_enum {
            MyEnum::Tuple(x, y) => {
                res = x + y
            }
            _ => {
                res = 0
            }
        }
    } else {
        res = 100
    }

    return res
}

// Simplified test without array initialization that was causing issues
fn match_state() -> u8 {
    let state: State = State::Continue
    
    match state {
        State::Continue => {
            return 1
        }
        State::Done => {
            return 0
        }
    }
}

// Test pattern matching in a nested control flow
fn nested_match_in_control_flow(input: u8) -> u8 {
    let mut result: u8 = 0
    
    if input > 10 {
        let my_enum = if input > 20 {
            MyEnum::Tuple(1, 100)
        } else {
            MyEnum::Tuple(2, 200)
        }
        
        match my_enum {
            MyEnum::Tuple(x, y) => {
                result = x * y
            }
            _ => {
                result = 0
            }
        }
    } else {
        result = 50
    }
    
    return result
}
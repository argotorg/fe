contract Foo:
    my_string: String<42>
    my_other_string: String<42>

    my_u256: u256
    my_other_u256: u256

    my_nums: u256[5]

    my_addrs: address[3]

    event MyEvent:
        my_string: String<42>
        my_u256: u256

    pub fn set_my_vals(
        my_string: String<42>,
        my_other_string: String<42>,
        my_u256: u256,
        my_other_u256: u256
    ):
        self.my_string = my_string
        self.my_other_string = my_other_string
        self.my_u256 = my_u256
        self.my_other_u256 = my_other_u256

    pub fn set_to_my_other_vals():
        self.my_string = self.my_other_string
        self.my_u256 = self.my_other_u256

    pub fn multiple_references_shared_memory(my_array: u256[10]):
        my_2nd_array: u256[10] = my_array
        my_3rd_array: u256[10] = my_2nd_array

        assert my_array[3] != 5
        my_array[3] = 5
        assert my_array[3] == 5
        assert my_2nd_array[3] == 5
        assert my_3rd_array[3] == 5

        my_3rd_array[3] = 50
        assert my_array[3] == 50
        assert my_2nd_array[3] == 50
        assert my_3rd_array[3] == 50

    pub fn mutate_and_return(my_array: u256[10]) -> u256[10]:
        my_array[3] = 5
        return my_array

    pub fn clone_and_return(my_array: u256[10]) -> u256[10]:
        return my_array.clone()

    pub fn clone_mutate_and_return(my_array: u256[10]) -> u256[10]:
        my_array.clone()[3] = 5
        return my_array

    pub fn assign_my_nums_and_return() -> u256[5]:
        my_nums_mem: u256[5]
        self.my_nums[0] = 42
        self.my_nums[1] = 26
        self.my_nums[2] = 0
        self.my_nums[3] = 1
        self.my_nums[4] = 255
        my_nums_mem = self.my_nums.to_mem()
        return my_nums_mem

    pub fn emit_my_event():
        self.emit_my_event_internal(
            self.my_string.to_mem(),
            self.my_u256.to_mem()
        )

    fn emit_my_event_internal(some_string: String<42>, some_u256: u256):
        emit MyEvent(my_string=some_string, my_u256=some_u256)

    pub fn set_my_addrs(my_addrs: address[3]):
        self.my_addrs = my_addrs

    pub fn get_my_second_addr() -> address:
        return self.my_addrs[1]
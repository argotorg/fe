use parser::TextRange;

use crate::InputFile;

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct CompleteDiagnostic {
    pub severity: Severity,
    pub message: String,
    pub span: Span,
    pub sub_diagnostics: Vec<SubDiagnostic>,
    pub error_code: GlobalErrorCode,
}

impl CompleteDiagnostic {
    pub fn new(
        severity: Severity,
        message: String,
        span: Span,
        sub_diagnostics: Vec<SubDiagnostic>,
        error_code: GlobalErrorCode,
    ) -> Self {
        Self {
            severity,
            message,
            span,
            sub_diagnostics,
            error_code,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct GlobalErrorCode {
    pub pass: AnalysisPass,
    pub local_code: u16,
}

impl GlobalErrorCode {
    pub fn new(pass: AnalysisPass, local_code: u16) -> Self {
        Self { pass, local_code }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct SubDiagnostic {
    pub severity: Severity,
    pub message: String,
    pub span: Span,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Span {
    pub file: InputFile,
    pub range: TextRange,
    pub kind: SpanKind,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum SpanKind {
    /// A node corresponding is originally written in the source code.
    Original,

    /// A node corresponding to the span is generated by macro expansion.
    Expanded,

    /// No span information was found.
    /// This happens if analysis code tries to get a span for a node that is
    /// generated in lowering phase.
    ///
    /// If span has this kind, it means there is a bug in the analysis code.
    /// The reason not to panic is that LSP should continue working even if
    /// there are bugs in the span generation(This also makes easier to identify
    /// the cause of the bug)
    ///
    /// Range is always the first character of the file in this case.
    NotFound,
}

impl Span {
    pub fn new(file: InputFile, range: TextRange, kind: SpanKind) -> Self {
        Self { file, range, kind }
    }
}

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Severity {
    Error,
    Warning,
    Note,
}

#[repr(u16)]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum AnalysisPass {
    Parse = 1,
    NameResolution,
    TyCheck,

    ExternalAnalysis(ExternalAnalysisKey) = u16::MAX,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct ExternalAnalysisKey {
    name: String,
}

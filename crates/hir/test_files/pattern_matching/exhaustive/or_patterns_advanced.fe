// Basic or-pattern tests

enum Color {
    Red,
    Green,
    Blue
}

// Test simple or-patterns with enum variants
fn test_simple_or_patterns(color: Color) -> u8 {
    match color {
        Color::Red | Color::Green => {
            return 1
        }
        Color::Blue => {
            return 2
        }
    }
}

// Test or-patterns with literals
fn test_literal_or_patterns(x: u8) -> u8 {
    match x {
        0 | 1 | 2 => {
            return 10
        }
        10 | 20 => {
            return 20
        }
        _ => {
            return 0
        }
    }
}

// Test or-patterns with boolean literals - demonstrates pattern analysis bug
fn test_bool_or_patterns(data: (bool, u8)) -> u8 {
    match data {
        (true | false, 0) => {  // Matches: (true, 0) and (false, 0)
            return 5
        }
        (true, 1 | 2) => {      // Should be reachable: (true, 1) and (true, 2)
            return 4
        }
        (false, 1 | 2) => {     // Should be reachable: (false, 1) and (false, 2)
            return 3
        }
        _ => {
            return 1
        }
    }
}

// Test or-patterns in tuple patterns
fn test_or_in_tuples(data: (Color, Color)) -> u8 {
    match data {
        (Color::Red | Color::Green, Color::Blue) => {
            return 5
        }
        (Color::Blue, Color::Red | Color::Green) => {
            return 4
        }
        _ => {
            return 1
        }
    }
}

// Test exhaustiveness with or-patterns
fn test_or_exhaustiveness(color: Color) -> u8 {
    match color {
        Color::Red | Color::Green | Color::Blue => {
            return 1
        }
    }
}
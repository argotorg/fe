use std::evm

const ZERO_ADDRESS: address = 0x0000000000000000000000000000000000000000

struct AddressArray {
    array: Array<address, 2>
    length: u256

    pub fn new() -> AddressArray {
        return AddressArray (
            array: [ZERO_ADDRESS; 2],
            length: 0
        )
    }

    pub fn push(mut self, value: address) {
        // Omitting bounds check for simplicity
        self.array[self.length] = value
        self.length += 1
    }

    pub fn length(self) -> u256 {
        return self.length
    }

    pub fn get(self, index: u256) -> address {
        return self.array[index]
    }
}

contract Foo {
    my_array: Array<u256, 10>
    addr_array: AddressArray

    pub fn __init__(mut self) {
        self.my_array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        let mut addr_array: AddressArray = AddressArray::new()
        addr_array.push(value: 0x627306090abaB3A6e1400e9345bC60c78a8BEf57)
        addr_array.push(value: 0xf17f52151EbEF6C7334FAD080c5704D77216b732)
        self.addr_array = addr_array
    }

    pub fn get_address_from_storage(self, index: u256) -> address {
        return self.addr_array.get(index)
    }

    pub fn get_from_storage(self, index: u256) -> u256 {
        return self.my_array[index]
    }

    pub fn get_from_memory(index: u256) -> u256 {
        let my_array: Array<u256, 10> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        return my_array[index]
    }
}

#test
unsafe fn test_foo() {
    let mut ctx: Context = Context()
    let foo: Foo = Foo.create(ctx, 0)
    assert foo.get_from_storage(index: 3) == 3
    assert Foo::get_from_memory(index: 3) == 4
    assert foo.get_address_from_storage(index: 0) == 0x627306090abaB3A6e1400e9345bC60c78a8BEf57
    assert foo.get_address_from_storage(index: 1) == 0xf17f52151EbEF6C7334FAD080c5704D77216b732
}

contract ArrayIndexOobDyn {
    pub unsafe fn __call__() {
        let index: u256 = evm::call_data_load(offset: 0)
        let mut my_array: Array<u256, 4> = [0, 1, 2, 3]
        evm::sstore(offset: 0, value: my_array[index])
    }
}

const FREE_MEM_PTR: u256 = 1024
const CALL_GAS: u256 = 100000

#test
unsafe fn test_array_oob_dyn() {
    let mut ctx: Context = Context()
    let array_index_oob: ArrayIndexOobDyn = ArrayIndexOobDyn.create(ctx, value: 0)
    let expected_revert_data: Array<u8, 36> =  [78, 72, 123, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50]

    // store index value
    evm::mstore(offset: FREE_MEM_PTR, value: 26)

    // verify that the call reverts
    assert evm::call(
        gas: CALL_GAS, 
        addr: address(array_index_oob), 
        value: 0, 
        input_offset: FREE_MEM_PTR, 
        input_len: 32, 
        output_offset: FREE_MEM_PTR,
        output_len: 36
    ) == 0

    // check the revert data
    let mut offset: u256 = FREE_MEM_PTR 

    for expected_byte in expected_revert_data {
        assert evm::shr(248, evm::mload(offset)) == expected_byte
        offset += 1
    }
}

// The following tests does not pass due absent runtime check. 
// Obviously this couild also be a compile-time check.
//
// contract ArrayIndexOobStatic {
//     pub unsafe fn __call__() {
//         let mut my_array: Array<u256, 4> = [0, 1, 2, 3]
//         evm::sstore(offset: 0, value: my_array[26])
//     }
// }

// #test
// unsafe fn test_array_oob_static() {
//     let mut ctx: Context = Context()
//     let array_index_oob: ArrayIndexOobStatic = ArrayIndexOobStatic.create(ctx, value: 0)
//     let expected_revert_data: Array<u8, 36> =  [78, 72, 123, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50]

//     // verify that the call reverts
//     assert evm::call(
//         gas: CALL_GAS, 
//         addr: address(array_index_oob), 
//         value: 0, 
//         input_offset: 0, 
//         input_len: 0, 
//         output_offset: FREE_MEM_PTR,
//         output_len: 36
//     ) == 0 

//     // check the revert data
//     let mut offset: u256 = FREE_MEM_PTR 

//     for expected_byte in expected_revert_data {
//         assert evm::shr(248, evm::mload(offset)) == expected_byte
//         offset += 1
//     }
// }

---
source: crates/uitest/tests/ty_check.rs
expression: diags
input_file: fixtures/ty_check/generic_arg_path_resolution_fail.fe
---
error[2-0002]: `Bar` is not found
   ┌─ generic_arg_path_resolution_fail.fe:21:19
   │
21 │     type Foo = T::Bar  // Error: T has Tr2 bound but Tr2 doesn't have Bar associated type
   │                   ^^^ `Bar` is not found

error[2-0002]: `NonExistent` is not found
   ┌─ generic_arg_path_resolution_fail.fe:34:12
   │
34 │     x: Vec<NonExistent>  // Error: NonExistent doesn't exist
   │            ^^^^^^^^^^^ `NonExistent` is not found

error[2-0002]: `Bar` is not found
   ┌─ generic_arg_path_resolution_fail.fe:41:26
   │
41 │     type Foo = Concrete::Bar  // Error: Concrete doesn't have associated type Bar
   │                          ^^^ `Bar` is not found

error[2-0002]: `Missing` is not found
   ┌─ generic_arg_path_resolution_fail.fe:54:26
   │
54 │     type Foo = T::Inner::Missing  // Error: T::Inner doesn't have associated type Missing
   │                          ^^^^^^^ `Missing` is not found

error[2-0011]: ambiguous associated type `Foo`
   ┌─ generic_arg_path_resolution_fail.fe:23:32
   │
 5 │ trait Tr1 {
   │       ---
   │       │
   │       candidate: `Tr1`
   │       candidate: `Tr1`
   ·
23 │     fn make_foo(self) -> Self::Foo {
   │                                ^^^ associated type `Foo` is ambiguous
   │
   = specify the trait explicitly: `<Type as Trait>::Foo`

error[2-0011]: ambiguous associated type `Foo`
   ┌─ generic_arg_path_resolution_fail.fe:43:32
   │
 5 │ trait Tr1 {
   │       ---
   │       │
   │       candidate: `Tr1`
   │       candidate: `Tr1`
   │       candidate: `Tr1`
   ·
43 │     fn make_foo(self) -> Self::Foo {
   │                                ^^^ associated type `Foo` is ambiguous
   │
   = specify the trait explicitly: `<Type as Trait>::Foo`

error[2-0011]: ambiguous associated type `Foo`
   ┌─ generic_arg_path_resolution_fail.fe:56:32
   │
 5 │ trait Tr1 {
   │       ---
   │       │
   │       candidate: `Tr1`
   │       candidate: `Tr1`
   ·
56 │     fn make_foo(self) -> Self::Foo {
   │                                ^^^ associated type `Foo` is ambiguous
   │
   = specify the trait explicitly: `<Type as Trait>::Foo`

mod m {
    pub struct S {}

    impl S {
        pub fn new() -> S { S {} }

        // Private inherent method: only callable within `m`.
        fn secret(self) -> i32 { 1 }

        pub fn public(self) -> i32 { self.secret() }
    }

    pub fn make() -> S { S::new() }
}

fn ok() -> i32 {
    // Outside module: public method is callable
    m::make().public()
}

fn bad() -> i32 {
    // Outside module: calling private method should be invisible
    let s = m::make()
    s.secret()
}
